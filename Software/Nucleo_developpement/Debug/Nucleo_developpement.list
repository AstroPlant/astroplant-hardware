
Nucleo_developpement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  08011ae0  08011ae0  00021ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080124f0  080124f0  000224f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080124f8  080124f8  000224f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080124fc  080124fc  000224fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  08012500  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000008c  08012584  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000a4c  200000a0  08012595  000300a0  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000aec  08012595  00030aec  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  00030b5a  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  00040000  2**2
                  ALLOC
 13 .MB_MEM2      00000a76  200300e4  08012595  000300e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .comment      00008ebb  00000000  00000000  00030b8e  2**0
                  CONTENTS, READONLY
 15 .iar.rtmodel  00000360  00000000  00000000  00039a49  2**0
                  CONTENTS, READONLY
 16 .iar_vfe_header 00000040  00000000  00000000  00039dac  2**2
                  CONTENTS, READONLY
 17 .debug_info   00043ec6  00000000  00000000  00039dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007469  00000000  00000000  0007dcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003980  00000000  00000000  00085120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002154  00000000  00000000  00088aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c004  00000000  00000000  0008abf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000389db  00000000  00000000  000b6bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0010412b  00000000  00000000  000ef5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000d814  00000000  00000000  001f3700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000ac  00000000  00000000  00200f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002887  00000000  00000000  00200fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 000008a5  00000000  00000000  00203847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    0000620c  00000000  00000000  002040ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 0000162a  00000000  00000000  0020a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  0020b922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a0 	.word	0x200000a0
 800015c:	00000000 	.word	0x00000000
 8000160:	08011ac8 	.word	0x08011ac8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a4 	.word	0x200000a4
 800017c:	08011ac8 	.word	0x08011ac8

08000180 <ZbZclClusterGetEndpoint>:
 8000180:	7b80      	ldrb	r0, [r0, #14]
 8000182:	4770      	bx	lr

08000184 <ZbZclClusterSetCallbackArg>:
 8000184:	6541      	str	r1, [r0, #84]	; 0x54
 8000186:	4770      	bx	lr

08000188 <ZbZclClusterSetMfrCode>:
 8000188:	8201      	strh	r1, [r0, #16]
 800018a:	4770      	bx	lr

0800018c <ZbZclClusterGetClusterId>:
 800018c:	8980      	ldrh	r0, [r0, #12]
 800018e:	4770      	bx	lr

08000190 <ZbZclClusterSetProfileId>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	0004      	movs	r4, r0
 8000194:	000d      	movs	r5, r1
 8000196:	82a5      	strh	r5, [r4, #20]
 8000198:	7ba0      	ldrb	r0, [r4, #14]
 800019a:	28ff      	cmp	r0, #255	; 0xff
 800019c:	d008      	beq.n	80001b0 <??ZbZclClusterSetProfileId_0>
 800019e:	0020      	movs	r0, r4
 80001a0:	f00d fcda 	bl	800db58 <ZbZclClusterUnbind>
 80001a4:	7f23      	ldrb	r3, [r4, #28]
 80001a6:	8aa2      	ldrh	r2, [r4, #20]
 80001a8:	7ba1      	ldrb	r1, [r4, #14]
 80001aa:	0020      	movs	r0, r4
 80001ac:	f00d fc91 	bl	800dad2 <ZbZclClusterBind>

080001b0 <??ZbZclClusterSetProfileId_0>:
 80001b0:	bd31      	pop	{r0, r4, r5, pc}

080001b2 <ZbZclClusterGetProfileId>:
 80001b2:	b510      	push	{r4, lr}
 80001b4:	0004      	movs	r4, r0
 80001b6:	7ba1      	ldrb	r1, [r4, #14]
 80001b8:	68a0      	ldr	r0, [r4, #8]
 80001ba:	f00c ff79 	bl	800d0b0 <ZbApsEndpointProfile>
 80001be:	0001      	movs	r1, r0
 80001c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001c4:	b289      	uxth	r1, r1
 80001c6:	4291      	cmp	r1, r2
 80001c8:	d101      	bne.n	80001ce <??ZbZclClusterGetProfileId_0>
 80001ca:	8aa1      	ldrh	r1, [r4, #20]
 80001cc:	0008      	movs	r0, r1

080001ce <??ZbZclClusterGetProfileId_0>:
 80001ce:	b280      	uxth	r0, r0
 80001d0:	bd10      	pop	{r4, pc}

080001d2 <ZbZclClusterSetMinSecurity>:
 80001d2:	b430      	push	{r4, r5}
 80001d4:	0003      	movs	r3, r0
 80001d6:	2001      	movs	r0, #1
 80001d8:	7d9a      	ldrb	r2, [r3, #22]
 80001da:	f012 0203 	ands.w	r2, r2, #3
 80001de:	2a01      	cmp	r2, #1
 80001e0:	d101      	bne.n	80001e6 <??ZbZclClusterSetMinSecurity_0>
 80001e2:	2401      	movs	r4, #1
 80001e4:	e000      	b.n	80001e8 <??ZbZclClusterSetMinSecurity_1>

080001e6 <??ZbZclClusterSetMinSecurity_0>:
 80001e6:	2400      	movs	r4, #0

080001e8 <??ZbZclClusterSetMinSecurity_1>:
 80001e8:	000a      	movs	r2, r1
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	2aab      	cmp	r2, #171	; 0xab
 80001ee:	d01d      	beq.n	800022c <??ZbZclClusterSetMinSecurity_2>
 80001f0:	2aac      	cmp	r2, #172	; 0xac
 80001f2:	d00f      	beq.n	8000214 <??ZbZclClusterSetMinSecurity_3>
 80001f4:	2aaf      	cmp	r2, #175	; 0xaf
 80001f6:	d123      	bne.n	8000240 <??ZbZclClusterSetMinSecurity_4>

080001f8 <??ZbZclClusterSetMinSecurity_5>:
 80001f8:	8add      	ldrh	r5, [r3, #22]
 80001fa:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80001fe:	4015      	ands	r5, r2
 8000200:	82dd      	strh	r5, [r3, #22]
 8000202:	8add      	ldrh	r5, [r3, #22]
 8000204:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000208:	4015      	ands	r5, r2
 800020a:	82dd      	strh	r5, [r3, #22]
 800020c:	0022      	movs	r2, r4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	2a00      	cmp	r2, #0

08000212 <??ZbZclClusterSetMinSecurity_6>:
 8000212:	e017      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000214 <??ZbZclClusterSetMinSecurity_3>:
 8000214:	8ada      	ldrh	r2, [r3, #22]
 8000216:	f052 0202 	orrs.w	r2, r2, #2
 800021a:	82da      	strh	r2, [r3, #22]
 800021c:	8ada      	ldrh	r2, [r3, #22]
 800021e:	f052 0201 	orrs.w	r2, r2, #1
 8000222:	82da      	strh	r2, [r3, #22]
 8000224:	0022      	movs	r2, r4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	2a00      	cmp	r2, #0

0800022a <??ZbZclClusterSetMinSecurity_8>:
 800022a:	e00b      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

0800022c <??ZbZclClusterSetMinSecurity_2>:
 800022c:	8add      	ldrh	r5, [r3, #22]
 800022e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000232:	4015      	ands	r5, r2
 8000234:	82dd      	strh	r5, [r3, #22]
 8000236:	8ada      	ldrh	r2, [r3, #22]
 8000238:	f052 0201 	orrs.w	r2, r2, #1
 800023c:	82da      	strh	r2, [r3, #22]
 800023e:	e001      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000240 <??ZbZclClusterSetMinSecurity_4>:
 8000240:	2200      	movs	r2, #0
 8000242:	0010      	movs	r0, r2

08000244 <??ZbZclClusterSetMinSecurity_7>:
 8000244:	0002      	movs	r2, r0
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	2a00      	cmp	r2, #0
 800024a:	d000      	beq.n	800024e <??ZbZclClusterSetMinSecurity_9>
 800024c:	7499      	strb	r1, [r3, #18]

0800024e <??ZbZclClusterSetMinSecurity_9>:
 800024e:	b2c0      	uxtb	r0, r0
 8000250:	bc30      	pop	{r4, r5}
 8000252:	4770      	bx	lr

08000254 <ZbZclClusterCheckMinSecurity>:
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	0004      	movs	r4, r0
 800025a:	000d      	movs	r5, r1
 800025c:	0016      	movs	r6, r2
 800025e:	2700      	movs	r7, #0
 8000260:	7ca0      	ldrb	r0, [r4, #18]
 8000262:	28af      	cmp	r0, #175	; 0xaf
 8000264:	d102      	bne.n	800026c <??ZbZclClusterCheckMinSecurity_0>
 8000266:	2001      	movs	r0, #1
 8000268:	0007      	movs	r7, r0
 800026a:	e073      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800026c <??ZbZclClusterCheckMinSecurity_0>:
 800026c:	7ca0      	ldrb	r0, [r4, #18]
 800026e:	28ac      	cmp	r0, #172	; 0xac
 8000270:	d10a      	bne.n	8000288 <??ZbZclClusterCheckMinSecurity_2>
 8000272:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000276:	28ac      	cmp	r0, #172	; 0xac
 8000278:	d003      	beq.n	8000282 <??ZbZclClusterCheckMinSecurity_3>
 800027a:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 800027e:	28ab      	cmp	r0, #171	; 0xab
 8000280:	d101      	bne.n	8000286 <??ZbZclClusterCheckMinSecurity_4>

08000282 <??ZbZclClusterCheckMinSecurity_3>:
 8000282:	2001      	movs	r0, #1
 8000284:	0007      	movs	r7, r0

08000286 <??ZbZclClusterCheckMinSecurity_4>:
 8000286:	e065      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000288 <??ZbZclClusterCheckMinSecurity_2>:
 8000288:	7ca0      	ldrb	r0, [r4, #18]
 800028a:	28ab      	cmp	r0, #171	; 0xab
 800028c:	d162      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>
 800028e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8000292:	28ab      	cmp	r0, #171	; 0xab
 8000294:	d102      	bne.n	800029c <??ZbZclClusterCheckMinSecurity_6>
 8000296:	2001      	movs	r0, #1
 8000298:	0007      	movs	r7, r0
 800029a:	e05b      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800029c <??ZbZclClusterCheckMinSecurity_6>:
 800029c:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 80002a0:	28ac      	cmp	r0, #172	; 0xac
 80002a2:	d157      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002a4 <??ZbZclClusterCheckMinSecurity_7>:
 80002a4:	89a0      	ldrh	r0, [r4, #12]
 80002a6:	2819      	cmp	r0, #25
 80002a8:	d114      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002aa:	7f20      	ldrb	r0, [r4, #28]
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d111      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002b0:	0028      	movs	r0, r5
 80002b2:	f00c ff30 	bl	800d116 <ZbApsAddrIsBcast>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d00b      	beq.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002ba:	7830      	ldrb	r0, [r6, #0]
 80002bc:	2801      	cmp	r0, #1
 80002be:	d108      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c0:	78b0      	ldrb	r0, [r6, #2]
 80002c2:	2801      	cmp	r0, #1
 80002c4:	d105      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c6:	79f0      	ldrb	r0, [r6, #7]
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d102      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002cc:	2001      	movs	r0, #1
 80002ce:	0007      	movs	r7, r0
 80002d0:	e040      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d2 <??ZbZclClusterCheckMinSecurity_9>:
 80002d2:	e03f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d4 <??ZbZclClusterCheckMinSecurity_8>:
 80002d4:	f240 7802 	movw	r8, #1794	; 0x702
 80002d8:	89a0      	ldrh	r0, [r4, #12]
 80002da:	4540      	cmp	r0, r8
 80002dc:	d11a      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002de:	7f20      	ldrb	r0, [r4, #28]
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d117      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002e4:	7830      	ldrb	r0, [r6, #0]
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d114      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002ea:	79f0      	ldrb	r0, [r6, #7]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d111      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f0:	78b0      	ldrb	r0, [r6, #2]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d10e      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f6:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80002f8:	2802      	cmp	r0, #2
 80002fa:	d30b      	bcc.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002fc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80002fe:	f000 ff7e 	bl	80011fe <pletoh16>
 8000302:	0001      	movs	r1, r0
 8000304:	f240 3206 	movw	r2, #774	; 0x306
 8000308:	b289      	uxth	r1, r1
 800030a:	4291      	cmp	r1, r2
 800030c:	d102      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 800030e:	2101      	movs	r1, #1
 8000310:	000f      	movs	r7, r1
 8000312:	e01f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000314 <??ZbZclClusterCheckMinSecurity_10>:
 8000314:	89a0      	ldrh	r0, [r4, #12]
 8000316:	4540      	cmp	r0, r8
 8000318:	d11b      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 800031a:	7f20      	ldrb	r0, [r4, #28]
 800031c:	2801      	cmp	r0, #1
 800031e:	d118      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 8000320:	7830      	ldrb	r0, [r6, #0]
 8000322:	2800      	cmp	r0, #0
 8000324:	d114      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000326:	79f0      	ldrb	r0, [r6, #7]
 8000328:	2801      	cmp	r0, #1
 800032a:	d111      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800032c:	78b0      	ldrb	r0, [r6, #2]
 800032e:	2801      	cmp	r0, #1
 8000330:	d10e      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000332:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8000334:	2802      	cmp	r0, #2
 8000336:	d30b      	bcc.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000338:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800033a:	f000 ff60 	bl	80011fe <pletoh16>
 800033e:	0001      	movs	r1, r0
 8000340:	f240 3206 	movw	r2, #774	; 0x306
 8000344:	b289      	uxth	r1, r1
 8000346:	4291      	cmp	r1, r2
 8000348:	d102      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800034a:	2101      	movs	r1, #1
 800034c:	000f      	movs	r7, r1
 800034e:	e001      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000350 <??ZbZclClusterCheckMinSecurity_12>:
 8000350:	e000      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000352 <??ZbZclClusterCheckMinSecurity_11>:
 8000352:	e7ff      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000354 <??ZbZclClusterCheckMinSecurity_1>:
 8000354:	0038      	movs	r0, r7
 8000356:	b2c0      	uxtb	r0, r0
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <ZbZclClusterSetTxOptions>:
 800035c:	05ca      	lsls	r2, r1, #23
 800035e:	d400      	bmi.n	8000362 <??ZbZclClusterSetTxOptions_0>

08000360 <??ZbZclClusterSetTxOptions_1>:
 8000360:	82c1      	strh	r1, [r0, #22]

08000362 <??ZbZclClusterSetTxOptions_0>:
 8000362:	4770      	bx	lr

08000364 <ZbZclClusterGetTxOptions>:
 8000364:	8ac0      	ldrh	r0, [r0, #22]
 8000366:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 800036a:	4008      	ands	r0, r1
 800036c:	4770      	bx	lr

0800036e <ZbZclTxOptsFromSecurityStatus>:
 800036e:	0001      	movs	r1, r0
 8000370:	2000      	movs	r0, #0
 8000372:	f050 0004 	orrs.w	r0, r0, #4
 8000376:	f050 0008 	orrs.w	r0, r0, #8
 800037a:	000a      	movs	r2, r1
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	2aab      	cmp	r2, #171	; 0xab
 8000380:	d102      	bne.n	8000388 <??ZbZclTxOptsFromSecurityStatus_0>
 8000382:	f050 0001 	orrs.w	r0, r0, #1
 8000386:	e007      	b.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>

08000388 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000388:	000a      	movs	r2, r1
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	2aac      	cmp	r2, #172	; 0xac
 800038e:	d103      	bne.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>
 8000390:	f050 0001 	orrs.w	r0, r0, #1
 8000394:	f050 0002 	orrs.w	r0, r0, #2

08000398 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000398:	b280      	uxth	r0, r0
 800039a:	4770      	bx	lr

0800039c <ZbZclClusterGetDirection>:
 800039c:	7f00      	ldrb	r0, [r0, #28]
 800039e:	4770      	bx	lr

080003a0 <ZbZclClusterGetDirectionStr>:
 80003a0:	0001      	movs	r1, r0
 80003a2:	7f08      	ldrb	r0, [r1, #28]
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d003      	beq.n	80003b0 <??ZbZclClusterGetDirectionStr_0>
 80003a8:	2802      	cmp	r0, #2
 80003aa:	d005      	beq.n	80003b8 <??ZbZclClusterGetDirectionStr_1>
 80003ac:	d302      	bcc.n	80003b4 <??ZbZclClusterGetDirectionStr_2>
 80003ae:	e005      	b.n	80003bc <??ZbZclClusterGetDirectionStr_3>

080003b0 <??ZbZclClusterGetDirectionStr_0>:
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <??DataTable1>)
 80003b2:	e004      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b4 <??ZbZclClusterGetDirectionStr_2>:
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <??DataTable1_1>)
 80003b6:	e002      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b8 <??ZbZclClusterGetDirectionStr_1>:
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <??DataTable1_2>)
 80003ba:	e000      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003bc <??ZbZclClusterGetDirectionStr_3>:
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <??DataTable1_3>)

080003be <??ZbZclClusterGetDirectionStr_4>:
 80003be:	4770      	bx	lr

080003c0 <??DataTable1>:
 80003c0:	2084 0801                                   . ..

080003c4 <??DataTable1_1>:
 80003c4:	208c 0801                                   . ..

080003c8 <??DataTable1_2>:
 80003c8:	2094 0801                                   . ..

080003cc <??DataTable1_3>:
 80003cc:	209c 0801                                   . ..

080003d0 <ZbZclClusterSetDiscoverRoute>:
 80003d0:	7601      	strb	r1, [r0, #24]
 80003d2:	4770      	bx	lr

080003d4 <ZbZclClusterSetRadius>:
 80003d4:	7641      	strb	r1, [r0, #25]
 80003d6:	4770      	bx	lr

080003d8 <ZbZclClusterGetRadius>:
 80003d8:	7e40      	ldrb	r0, [r0, #25]
 80003da:	4770      	bx	lr

080003dc <ZbZclClusterSetMaxAsduLength>:
 80003dc:	b410      	push	{r4}
 80003de:	0002      	movs	r2, r0
 80003e0:	000b      	movs	r3, r1
 80003e2:	0018      	movs	r0, r3
 80003e4:	b280      	uxth	r0, r0
 80003e6:	f240 74d1 	movw	r4, #2001	; 0x7d1
 80003ea:	42a0      	cmp	r0, r4
 80003ec:	d301      	bcc.n	80003f2 <??ZbZclClusterSetMaxAsduLength_0>
 80003ee:	2000      	movs	r0, #0
 80003f0:	e007      	b.n	8000402 <??ZbZclClusterSetMaxAsduLength_1>

080003f2 <??ZbZclClusterSetMaxAsduLength_0>:
 80003f2:	0018      	movs	r0, r3
 80003f4:	b280      	uxth	r0, r0
 80003f6:	2839      	cmp	r0, #57	; 0x39
 80003f8:	d201      	bcs.n	80003fe <??ZbZclClusterSetMaxAsduLength_2>
 80003fa:	2039      	movs	r0, #57	; 0x39
 80003fc:	0003      	movs	r3, r0

080003fe <??ZbZclClusterSetMaxAsduLength_2>:
 80003fe:	8353      	strh	r3, [r2, #26]
 8000400:	2001      	movs	r0, #1

08000402 <??ZbZclClusterSetMaxAsduLength_1>:
 8000402:	bc10      	pop	{r4}
 8000404:	4770      	bx	lr

08000406 <ZbZclClusterGetMaxAsduLength>:
 8000406:	8b40      	ldrh	r0, [r0, #26]
 8000408:	4770      	bx	lr

0800040a <ZbZclClusterInitCommandReq>:
 800040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040e:	0004      	movs	r4, r0
 8000410:	000d      	movs	r5, r1
 8000412:	2630      	movs	r6, #48	; 0x30
 8000414:	2700      	movs	r7, #0
 8000416:	46a8      	mov	r8, r5
 8000418:	003a      	movs	r2, r7
 800041a:	0031      	movs	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f005 fc38 	bl	8005c92 <__aeabi_memset>
 8000422:	8aa0      	ldrh	r0, [r4, #20]
 8000424:	8228      	strh	r0, [r5, #16]
 8000426:	89a0      	ldrh	r0, [r4, #12]
 8000428:	8268      	strh	r0, [r5, #18]
 800042a:	7ba0      	ldrb	r0, [r4, #14]
 800042c:	82a8      	strh	r0, [r5, #20]
 800042e:	8ae0      	ldrh	r0, [r4, #22]
 8000430:	82e8      	strh	r0, [r5, #22]
 8000432:	7e20      	ldrb	r0, [r4, #24]
 8000434:	7628      	strb	r0, [r5, #24]
 8000436:	7e60      	ldrb	r0, [r4, #25]
 8000438:	7668      	strb	r0, [r5, #25]
 800043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800043e <ZbZclClusterInitApsdeReq>:
 800043e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000442:	0005      	movs	r5, r0
 8000444:	000e      	movs	r6, r1
 8000446:	0014      	movs	r4, r2
 8000448:	2730      	movs	r7, #48	; 0x30
 800044a:	f05f 0800 	movs.w	r8, #0
 800044e:	46b1      	mov	r9, r6
 8000450:	4642      	mov	r2, r8
 8000452:	0039      	movs	r1, r7
 8000454:	4648      	mov	r0, r9
 8000456:	f005 fc1c 	bl	8005c92 <__aeabi_memset>
 800045a:	8aa8      	ldrh	r0, [r5, #20]
 800045c:	8230      	strh	r0, [r6, #16]
 800045e:	89a8      	ldrh	r0, [r5, #12]
 8000460:	8270      	strh	r0, [r6, #18]
 8000462:	7ba8      	ldrb	r0, [r5, #14]
 8000464:	82b0      	strh	r0, [r6, #20]
 8000466:	8ae8      	ldrh	r0, [r5, #22]
 8000468:	84b0      	strh	r0, [r6, #36]	; 0x24
 800046a:	7e28      	ldrb	r0, [r5, #24]
 800046c:	f886 0026 	strb.w	r0, [r6, #38]	; 0x26
 8000470:	7e68      	ldrb	r0, [r5, #25]
 8000472:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
 8000476:	2c00      	cmp	r4, #0
 8000478:	d00b      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800047a:	8ab0      	ldrh	r0, [r6, #20]
 800047c:	28ff      	cmp	r0, #255	; 0xff
 800047e:	d101      	bne.n	8000484 <??ZbZclClusterInitApsdeReq_1>
 8000480:	8860      	ldrh	r0, [r4, #2]
 8000482:	82b0      	strh	r0, [r6, #20]

08000484 <??ZbZclClusterInitApsdeReq_1>:
 8000484:	8c20      	ldrh	r0, [r4, #32]
 8000486:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800048a:	4288      	cmp	r0, r1
 800048c:	d001      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800048e:	8c20      	ldrh	r0, [r4, #32]
 8000490:	8230      	strh	r0, [r6, #16]

08000492 <??ZbZclClusterInitApsdeReq_0>:
 8000492:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000498 <zcl_persist_handle_set>:
 8000498:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	0016      	movs	r6, r2
 80004a2:	f05f 0b00 	movs.w	fp, #0

080004a6 <??zcl_persist_handle_set_0>:
 80004a6:	4658      	mov	r0, fp
 80004a8:	0031      	movs	r1, r6
 80004aa:	b280      	uxth	r0, r0
 80004ac:	b289      	uxth	r1, r1
 80004ae:	4288      	cmp	r0, r1
 80004b0:	d23c      	bcs.n	800052c <??zcl_persist_handle_set_1>
 80004b2:	0030      	movs	r0, r6
 80004b4:	b280      	uxth	r0, r0
 80004b6:	4659      	mov	r1, fp
 80004b8:	b289      	uxth	r1, r1
 80004ba:	1d09      	adds	r1, r1, #4
 80004bc:	4288      	cmp	r0, r1
 80004be:	d201      	bcs.n	80004c4 <??zcl_persist_handle_set_2>
 80004c0:	2087      	movs	r0, #135	; 0x87
 80004c2:	e034      	b.n	800052e <??zcl_persist_handle_set_3>

080004c4 <??zcl_persist_handle_set_2>:
 80004c4:	4658      	mov	r0, fp
 80004c6:	b280      	uxth	r0, r0
 80004c8:	4428      	add	r0, r5
 80004ca:	f000 fe98 	bl	80011fe <pletoh16>
 80004ce:	0007      	movs	r7, r0
 80004d0:	f11b 0b02 	adds.w	fp, fp, #2
 80004d4:	4658      	mov	r0, fp
 80004d6:	b280      	uxth	r0, r0
 80004d8:	4428      	add	r0, r5
 80004da:	f000 fe90 	bl	80011fe <pletoh16>
 80004de:	4680      	mov	r8, r0
 80004e0:	f11b 0b02 	adds.w	fp, fp, #2
 80004e4:	0030      	movs	r0, r6
 80004e6:	b280      	uxth	r0, r0
 80004e8:	4641      	mov	r1, r8
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fa11 f18b 	uxtah	r1, r1, fp
 80004f0:	4288      	cmp	r0, r1
 80004f2:	da01      	bge.n	80004f8 <??zcl_persist_handle_set_4>
 80004f4:	2087      	movs	r0, #135	; 0x87
 80004f6:	e01a      	b.n	800052e <??zcl_persist_handle_set_3>

080004f8 <??zcl_persist_handle_set_4>:
 80004f8:	4658      	mov	r0, fp
 80004fa:	b280      	uxth	r0, r0
 80004fc:	4428      	add	r0, r5
 80004fe:	4681      	mov	r9, r0
 8000500:	eb18 0b0b 	adds.w	fp, r8, fp
 8000504:	2006      	movs	r0, #6
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	4640      	mov	r0, r8
 800050a:	b280      	uxth	r0, r0
 800050c:	9000      	str	r0, [sp, #0]
 800050e:	464b      	mov	r3, r9
 8000510:	003a      	movs	r2, r7
 8000512:	b292      	uxth	r2, r2
 8000514:	2100      	movs	r1, #0
 8000516:	0020      	movs	r0, r4
 8000518:	f001 f997 	bl	800184a <ZbZclAttrWrite>
 800051c:	4682      	mov	sl, r0
 800051e:	4650      	mov	r0, sl
 8000520:	b2c0      	uxtb	r0, r0
 8000522:	2800      	cmp	r0, #0
 8000524:	d0bf      	beq.n	80004a6 <??zcl_persist_handle_set_0>
 8000526:	4650      	mov	r0, sl
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	e000      	b.n	800052e <??zcl_persist_handle_set_3>

0800052c <??zcl_persist_handle_set_1>:
 800052c:	2000      	movs	r0, #0

0800052e <??zcl_persist_handle_set_3>:
 800052e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000532 <ZbZclHandleReadAttr>:
 8000532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000536:	b092      	sub	sp, #72	; 0x48
 8000538:	0005      	movs	r5, r0
 800053a:	000e      	movs	r6, r1
 800053c:	0017      	movs	r7, r2
 800053e:	f20f 19a4 	addw	r9, pc, #420	; 0x1a4
 8000542:	2300      	movs	r3, #0
 8000544:	464a      	mov	r2, r9
 8000546:	8b69      	ldrh	r1, [r5, #26]
 8000548:	68a8      	ldr	r0, [r5, #8]
 800054a:	f00d fb5d 	bl	800dc08 <zb_heap_alloc>
 800054e:	0004      	movs	r4, r0
 8000550:	2c00      	cmp	r4, #0
 8000552:	d106      	bne.n	8000562 <??ZbZclHandleReadAttr_0>
 8000554:	2389      	movs	r3, #137	; 0x89
 8000556:	0032      	movs	r2, r6
 8000558:	0039      	movs	r1, r7
 800055a:	0028      	movs	r0, r5
 800055c:	f00d f9ca 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000560:	e0bd      	b.n	80006de <??ZbZclHandleReadAttr_1>

08000562 <??ZbZclHandleReadAttr_0>:
 8000562:	f05f 0808 	movs.w	r8, #8
 8000566:	f05f 0a00 	movs.w	sl, #0
 800056a:	f10d 0b0c 	add.w	fp, sp, #12
 800056e:	4652      	mov	r2, sl
 8000570:	4641      	mov	r1, r8
 8000572:	4658      	mov	r0, fp
 8000574:	f005 fb8d 	bl	8005c92 <__aeabi_memset>
 8000578:	2000      	movs	r0, #0
 800057a:	f88d 000c 	strb.w	r0, [sp, #12]
 800057e:	7870      	ldrb	r0, [r6, #1]
 8000580:	f88d 000d 	strb.w	r0, [sp, #13]
 8000584:	78b0      	ldrb	r0, [r6, #2]
 8000586:	2800      	cmp	r0, #0
 8000588:	d101      	bne.n	800058e <??ZbZclHandleReadAttr_2>
 800058a:	2001      	movs	r0, #1
 800058c:	e000      	b.n	8000590 <??ZbZclHandleReadAttr_3>

0800058e <??ZbZclHandleReadAttr_2>:
 800058e:	2000      	movs	r0, #0

08000590 <??ZbZclHandleReadAttr_3>:
 8000590:	f88d 000e 	strb.w	r0, [sp, #14]
 8000594:	2001      	movs	r0, #1
 8000596:	f88d 000f 	strb.w	r0, [sp, #15]
 800059a:	88b0      	ldrh	r0, [r6, #4]
 800059c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80005a0:	79b0      	ldrb	r0, [r6, #6]
 80005a2:	f88d 0012 	strb.w	r0, [sp, #18]
 80005a6:	2001      	movs	r0, #1
 80005a8:	f88d 0013 	strb.w	r0, [sp, #19]
 80005ac:	8b6a      	ldrh	r2, [r5, #26]
 80005ae:	0021      	movs	r1, r4
 80005b0:	a803      	add	r0, sp, #12
 80005b2:	f000 fd40 	bl	8001036 <ZbZclAppendHeader>
 80005b6:	4680      	mov	r8, r0
 80005b8:	f1b8 0f00 	cmp.w	r8, #0
 80005bc:	d50c      	bpl.n	80005d8 <??ZbZclHandleReadAttr_4>
 80005be:	2300      	movs	r3, #0
 80005c0:	464a      	mov	r2, r9
 80005c2:	0021      	movs	r1, r4
 80005c4:	68a8      	ldr	r0, [r5, #8]
 80005c6:	f00d fb2e 	bl	800dc26 <zb_heap_free>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	0032      	movs	r2, r6
 80005ce:	0039      	movs	r1, r7
 80005d0:	0028      	movs	r0, r5
 80005d2:	f00d f98f 	bl	800d8f4 <ZbZclSendDefaultResponse>
 80005d6:	e082      	b.n	80006de <??ZbZclHandleReadAttr_1>

080005d8 <??ZbZclHandleReadAttr_4>:
 80005d8:	46c3      	mov	fp, r8

080005da <??ZbZclHandleReadAttr_5>:
 80005da:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 80005dc:	2802      	cmp	r0, #2
 80005de:	d353      	bcc.n	8000688 <??ZbZclHandleReadAttr_6>

080005e0 <??ZbZclHandleReadAttr_7>:
 80005e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005e2:	f000 fe0c 	bl	80011fe <pletoh16>
 80005e6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80005ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005ec:	1c80      	adds	r0, r0, #2
 80005ee:	6278      	str	r0, [r7, #36]	; 0x24
 80005f0:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 80005f2:	1e80      	subs	r0, r0, #2
 80005f4:	8538      	strh	r0, [r7, #40]	; 0x28
 80005f6:	f11b 0004 	adds.w	r0, fp, #4
 80005fa:	8b69      	ldrh	r1, [r5, #26]
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d243      	bcs.n	8000688 <??ZbZclHandleReadAttr_6>

08000600 <??ZbZclHandleReadAttr_8>:
 8000600:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000604:	eb04 000b 	add.w	r0, r4, fp
 8000608:	f000 fe45 	bl	8001296 <putle16>
 800060c:	f11b 0b02 	adds.w	fp, fp, #2
 8000610:	2000      	movs	r0, #0
 8000612:	9001      	str	r0, [sp, #4]
 8000614:	8b68      	ldrh	r0, [r5, #26]
 8000616:	ebb0 000b 	subs.w	r0, r0, fp
 800061a:	1e80      	subs	r0, r0, #2
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	eb04 000b 	add.w	r0, r4, fp
 8000622:	1c83      	adds	r3, r0, #2
 8000624:	aa02      	add	r2, sp, #8
 8000626:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800062a:	0028      	movs	r0, r5
 800062c:	f000 ffbb 	bl	80015a6 <ZbZclAttrRead>
 8000630:	4682      	mov	sl, r0
 8000632:	f804 a00b 	strb.w	sl, [r4, fp]
 8000636:	f11b 0b01 	adds.w	fp, fp, #1
 800063a:	4650      	mov	r0, sl
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	2889      	cmp	r0, #137	; 0x89
 8000640:	d022      	beq.n	8000688 <??ZbZclHandleReadAttr_6>

08000642 <??ZbZclHandleReadAttr_9>:
 8000642:	4650      	mov	r0, sl
 8000644:	b2c0      	uxtb	r0, r0
 8000646:	2800      	cmp	r0, #0
 8000648:	d1c7      	bne.n	80005da <??ZbZclHandleReadAttr_5>

0800064a <??ZbZclHandleReadAttr_10>:
 800064a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800064e:	f804 000b 	strb.w	r0, [r4, fp]
 8000652:	f11b 0b01 	adds.w	fp, fp, #1
 8000656:	2300      	movs	r3, #0
 8000658:	8b6a      	ldrh	r2, [r5, #26]
 800065a:	ebb2 020b 	subs.w	r2, r2, fp
 800065e:	eb04 010b 	add.w	r1, r4, fp
 8000662:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000666:	f001 fdc6 	bl	80021f6 <ZbZclAttrParseLength>
 800066a:	4680      	mov	r8, r0
 800066c:	f1b8 0f00 	cmp.w	r8, #0
 8000670:	d507      	bpl.n	8000682 <??ZbZclHandleReadAttr_11>
 8000672:	f1bb 0b01 	subs.w	fp, fp, #1
 8000676:	2087      	movs	r0, #135	; 0x87
 8000678:	eb04 010b 	add.w	r1, r4, fp
 800067c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8000680:	e7ab      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000682 <??ZbZclHandleReadAttr_11>:
 8000682:	eb18 0b0b 	adds.w	fp, r8, fp
 8000686:	e7a8      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000688 <??ZbZclHandleReadAttr_6>:
 8000688:	003a      	movs	r2, r7
 800068a:	a906      	add	r1, sp, #24
 800068c:	0028      	movs	r0, r5
 800068e:	f7ff fed6 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000692:	a806      	add	r0, sp, #24
 8000694:	f117 0110 	adds.w	r1, r7, #16
 8000698:	2210      	movs	r2, #16
 800069a:	f010 fb28 	bl	8010cee <__aeabi_memcpy>
 800069e:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 80006a2:	f7ff fe64 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80006a6:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80006aa:	7da8      	ldrb	r0, [r5, #22]
 80006ac:	0700      	lsls	r0, r0, #28
 80006ae:	d406      	bmi.n	80006be <??ZbZclHandleReadAttr_12>
 80006b0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80006b4:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 80006b8:	4001      	ands	r1, r0
 80006ba:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c

080006be <??ZbZclHandleReadAttr_12>:
 80006be:	940c      	str	r4, [sp, #48]	; 0x30
 80006c0:	4658      	mov	r0, fp
 80006c2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	68a8      	ldr	r0, [r5, #8]
 80006ce:	f00c fc91 	bl	800cff4 <ZbApsdeDataReqCallback>
 80006d2:	2300      	movs	r3, #0
 80006d4:	464a      	mov	r2, r9
 80006d6:	0021      	movs	r1, r4
 80006d8:	68a8      	ldr	r0, [r5, #8]
 80006da:	f00d faa4 	bl	800dc26 <zb_heap_free>

080006de <??ZbZclHandleReadAttr_1>:
 80006de:	b013      	add	sp, #76	; 0x4c
 80006e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006e4 <??DataTable1>:
 80006e4:	0000 0000                                   ....

080006e8 <ZbZclHandleWriteAttr>:
 80006e8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ec:	b0a3      	sub	sp, #140	; 0x8c
 80006ee:	0016      	movs	r6, r2
 80006f0:	2701      	movs	r7, #1
 80006f2:	2500      	movs	r5, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	f05f 0800 	movs.w	r8, #0
 80006fa:	9824      	ldr	r0, [sp, #144]	; 0x90
 80006fc:	79c0      	ldrb	r0, [r0, #7]
 80006fe:	f88d 000a 	strb.w	r0, [sp, #10]
 8000702:	f05f 0900 	movs.w	r9, #0
 8000706:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800070a:	2802      	cmp	r0, #2
 800070c:	d007      	beq.n	800071e <??ZbZclHandleWriteAttr_0>
 800070e:	2803      	cmp	r0, #3
 8000710:	d003      	beq.n	800071a <??ZbZclHandleWriteAttr_1>
 8000712:	2805      	cmp	r0, #5
 8000714:	f000 80c3 	beq.w	800089e <??ZbZclHandleWriteAttr_2>
 8000718:	e116      	b.n	8000948 <??ZbZclHandleWriteAttr_3>

0800071a <??ZbZclHandleWriteAttr_1>:
 800071a:	f059 0901 	orrs.w	r9, r9, #1

0800071e <??ZbZclHandleWriteAttr_0>:
 800071e:	2008      	movs	r0, #8
 8000720:	9001      	str	r0, [sp, #4]
 8000722:	2000      	movs	r0, #0
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	f10d 0b14 	add.w	fp, sp, #20
 800072a:	9a00      	ldr	r2, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	4658      	mov	r0, fp
 8000730:	f005 faaf 	bl	8005c92 <__aeabi_memset>
 8000734:	2000      	movs	r0, #0
 8000736:	f88d 0014 	strb.w	r0, [sp, #20]
 800073a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800073c:	7840      	ldrb	r0, [r0, #1]
 800073e:	f88d 0015 	strb.w	r0, [sp, #21]
 8000742:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000744:	7880      	ldrb	r0, [r0, #2]
 8000746:	2800      	cmp	r0, #0
 8000748:	d101      	bne.n	800074e <??ZbZclHandleWriteAttr_4>
 800074a:	2001      	movs	r0, #1
 800074c:	e000      	b.n	8000750 <??ZbZclHandleWriteAttr_5>

0800074e <??ZbZclHandleWriteAttr_4>:
 800074e:	2000      	movs	r0, #0

08000750 <??ZbZclHandleWriteAttr_5>:
 8000750:	f88d 0016 	strb.w	r0, [sp, #22]
 8000754:	2001      	movs	r0, #1
 8000756:	f88d 0017 	strb.w	r0, [sp, #23]
 800075a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800075c:	8880      	ldrh	r0, [r0, #4]
 800075e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8000762:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000764:	7980      	ldrb	r0, [r0, #6]
 8000766:	f88d 001a 	strb.w	r0, [sp, #26]
 800076a:	2004      	movs	r0, #4
 800076c:	f88d 001b 	strb.w	r0, [sp, #27]
 8000770:	2239      	movs	r2, #57	; 0x39
 8000772:	a907      	add	r1, sp, #28
 8000774:	a805      	add	r0, sp, #20
 8000776:	f000 fc5e 	bl	8001036 <ZbZclAppendHeader>
 800077a:	0005      	movs	r5, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	d502      	bpl.n	8000786 <??ZbZclHandleWriteAttr_6>
 8000780:	2080      	movs	r0, #128	; 0x80
 8000782:	4680      	mov	r8, r0
 8000784:	e0e2      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000786 <??ZbZclHandleWriteAttr_6>:
 8000786:	0032      	movs	r2, r6
 8000788:	a916      	add	r1, sp, #88	; 0x58
 800078a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800078c:	f7ff fe57 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000790:	a816      	add	r0, sp, #88	; 0x58
 8000792:	f116 0110 	adds.w	r1, r6, #16
 8000796:	2210      	movs	r2, #16
 8000798:	f010 faa9 	bl	8010cee <__aeabi_memcpy>
 800079c:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 80007a0:	f7ff fde5 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80007a4:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
 80007a8:	2000      	movs	r0, #0
 80007aa:	4682      	mov	sl, r0
 80007ac:	2080      	movs	r0, #128	; 0x80
 80007ae:	0007      	movs	r7, r0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007b6:	2000      	movs	r0, #0
 80007b8:	0004      	movs	r4, r0

080007ba <??ZbZclHandleWriteAttr_8>:
 80007ba:	f11a 0003 	adds.w	r0, sl, #3
 80007be:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80007c0:	4288      	cmp	r0, r1
 80007c2:	d302      	bcc.n	80007ca <??ZbZclHandleWriteAttr_9>
 80007c4:	2080      	movs	r0, #128	; 0x80
 80007c6:	0007      	movs	r7, r0
 80007c8:	e05c      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007ca <??ZbZclHandleWriteAttr_9>:
 80007ca:	1ce8      	adds	r0, r5, #3
 80007cc:	283a      	cmp	r0, #58	; 0x3a
 80007ce:	d305      	bcc.n	80007dc <??ZbZclHandleWriteAttr_11>
 80007d0:	2001      	movs	r0, #1
 80007d2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007d6:	2089      	movs	r0, #137	; 0x89
 80007d8:	0007      	movs	r7, r0
 80007da:	e053      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007dc <??ZbZclHandleWriteAttr_11>:
 80007dc:	2000      	movs	r0, #0
 80007de:	f88d 0008 	strb.w	r0, [sp, #8]
 80007e2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80007e4:	4450      	add	r0, sl
 80007e6:	f000 fd0a 	bl	80011fe <pletoh16>
 80007ea:	f8ad 000c 	strh.w	r0, [sp, #12]
 80007ee:	f11a 0a02 	adds.w	sl, sl, #2
 80007f2:	4650      	mov	r0, sl
 80007f4:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80007f6:	5c09      	ldrb	r1, [r1, r0]
 80007f8:	f88d 1009 	strb.w	r1, [sp, #9]
 80007fc:	4682      	mov	sl, r0
 80007fe:	f11a 0a01 	adds.w	sl, sl, #1
 8000802:	2300      	movs	r3, #0
 8000804:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8000806:	ebb2 020a 	subs.w	r2, r2, sl
 800080a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800080c:	eb00 010a 	add.w	r1, r0, sl
 8000810:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000814:	f001 fcef 	bl	80021f6 <ZbZclAttrParseLength>
 8000818:	9004      	str	r0, [sp, #16]
 800081a:	9804      	ldr	r0, [sp, #16]
 800081c:	2800      	cmp	r0, #0
 800081e:	d50c      	bpl.n	800083a <??ZbZclHandleWriteAttr_12>
 8000820:	1c64      	adds	r4, r4, #1
 8000822:	2087      	movs	r0, #135	; 0x87
 8000824:	a907      	add	r1, sp, #28
 8000826:	5548      	strb	r0, [r1, r5]
 8000828:	1c6d      	adds	r5, r5, #1
 800082a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800082e:	a807      	add	r0, sp, #28
 8000830:	4428      	add	r0, r5
 8000832:	f000 fd30 	bl	8001296 <putle16>
 8000836:	1cad      	adds	r5, r5, #2
 8000838:	e024      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

0800083a <??ZbZclHandleWriteAttr_12>:
 800083a:	4648      	mov	r0, r9
 800083c:	b280      	uxth	r0, r0
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8000842:	ebb0 000a 	subs.w	r0, r0, sl
 8000846:	9000      	str	r0, [sp, #0]
 8000848:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800084a:	eb00 030a 	add.w	r3, r0, sl
 800084e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000852:	f116 0110 	adds.w	r1, r6, #16
 8000856:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000858:	f000 fff7 	bl	800184a <ZbZclAttrWrite>
 800085c:	0007      	movs	r7, r0
 800085e:	9804      	ldr	r0, [sp, #16]
 8000860:	eb10 0a0a 	adds.w	sl, r0, sl
 8000864:	0038      	movs	r0, r7
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d0a6      	beq.n	80007ba <??ZbZclHandleWriteAttr_8>
 800086c:	1c64      	adds	r4, r4, #1
 800086e:	a807      	add	r0, sp, #28
 8000870:	5547      	strb	r7, [r0, r5]
 8000872:	1c6d      	adds	r5, r5, #1
 8000874:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000878:	a807      	add	r0, sp, #28
 800087a:	4428      	add	r0, r5
 800087c:	f000 fd0b 	bl	8001296 <putle16>
 8000880:	1cad      	adds	r5, r5, #2
 8000882:	e79a      	b.n	80007ba <??ZbZclHandleWriteAttr_8>

08000884 <??ZbZclHandleWriteAttr_10>:
 8000884:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000888:	2800      	cmp	r0, #0
 800088a:	d001      	beq.n	8000890 <??ZbZclHandleWriteAttr_13>
 800088c:	46b8      	mov	r8, r7
 800088e:	e05d      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000890 <??ZbZclHandleWriteAttr_13>:
 8000890:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000894:	2802      	cmp	r0, #2
 8000896:	d001      	beq.n	800089c <??ZbZclHandleWriteAttr_14>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d000      	beq.n	800089e <??ZbZclHandleWriteAttr_2>

0800089c <??ZbZclHandleWriteAttr_14>:
 800089c:	e056      	b.n	800094c <??ZbZclHandleWriteAttr_7>

0800089e <??ZbZclHandleWriteAttr_2>:
 800089e:	2000      	movs	r0, #0
 80008a0:	4682      	mov	sl, r0
 80008a2:	f05f 0b00 	movs.w	fp, #0

080008a6 <??ZbZclHandleWriteAttr_15>:
 80008a6:	f11a 0003 	adds.w	r0, sl, #3
 80008aa:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80008ac:	4288      	cmp	r0, r1
 80008ae:	d302      	bcc.n	80008b6 <??ZbZclHandleWriteAttr_16>
 80008b0:	465c      	mov	r4, fp
 80008b2:	1c64      	adds	r4, r4, #1
 80008b4:	e03b      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008b6 <??ZbZclHandleWriteAttr_16>:
 80008b6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80008b8:	4450      	add	r0, sl
 80008ba:	f000 fca0 	bl	80011fe <pletoh16>
 80008be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80008c2:	f11a 0a02 	adds.w	sl, sl, #2
 80008c6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80008c8:	f810 000a 	ldrb.w	r0, [r0, sl]
 80008cc:	f88d 0009 	strb.w	r0, [sp, #9]
 80008d0:	f11a 0a01 	adds.w	sl, sl, #1
 80008d4:	2300      	movs	r3, #0
 80008d6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80008d8:	ebb2 020a 	subs.w	r2, r2, sl
 80008dc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80008de:	eb00 010a 	add.w	r1, r0, sl
 80008e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80008e6:	f001 fc86 	bl	80021f6 <ZbZclAttrParseLength>
 80008ea:	9004      	str	r0, [sp, #16]
 80008ec:	9804      	ldr	r0, [sp, #16]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d502      	bpl.n	80008f8 <??ZbZclHandleWriteAttr_18>
 80008f2:	465c      	mov	r4, fp
 80008f4:	1c64      	adds	r4, r4, #1
 80008f6:	e01a      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008f8 <??ZbZclHandleWriteAttr_18>:
 80008f8:	2000      	movs	r0, #0
 80008fa:	9001      	str	r0, [sp, #4]
 80008fc:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80008fe:	ebb0 000a 	subs.w	r0, r0, sl
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000906:	eb00 030a 	add.w	r3, r0, sl
 800090a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800090e:	f116 0110 	adds.w	r1, r6, #16
 8000912:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000914:	f000 ff99 	bl	800184a <ZbZclAttrWrite>
 8000918:	0007      	movs	r7, r0
 800091a:	0038      	movs	r0, r7
 800091c:	b2c0      	uxtb	r0, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d001      	beq.n	8000926 <??ZbZclHandleWriteAttr_19>
 8000922:	f11b 0b01 	adds.w	fp, fp, #1

08000926 <??ZbZclHandleWriteAttr_19>:
 8000926:	9804      	ldr	r0, [sp, #16]
 8000928:	eb10 0a0a 	adds.w	sl, r0, sl
 800092c:	e7bb      	b.n	80008a6 <??ZbZclHandleWriteAttr_15>

0800092e <??ZbZclHandleWriteAttr_17>:
 800092e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000932:	2803      	cmp	r0, #3
 8000934:	d105      	bne.n	8000942 <??ZbZclHandleWriteAttr_20>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d002      	beq.n	8000940 <??ZbZclHandleWriteAttr_21>
 800093a:	2001      	movs	r0, #1
 800093c:	4680      	mov	r8, r0
 800093e:	e005      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000940 <??ZbZclHandleWriteAttr_21>:
 8000940:	e004      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000942 <??ZbZclHandleWriteAttr_20>:
 8000942:	20ff      	movs	r0, #255	; 0xff
 8000944:	4680      	mov	r8, r0
 8000946:	e001      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000948 <??ZbZclHandleWriteAttr_3>:
 8000948:	2081      	movs	r0, #129	; 0x81
 800094a:	4680      	mov	r8, r0

0800094c <??ZbZclHandleWriteAttr_7>:
 800094c:	4640      	mov	r0, r8
 800094e:	b2c0      	uxtb	r0, r0
 8000950:	2800      	cmp	r0, #0
 8000952:	d00b      	beq.n	800096c <??ZbZclHandleWriteAttr_22>
 8000954:	4640      	mov	r0, r8
 8000956:	b2c0      	uxtb	r0, r0
 8000958:	28ff      	cmp	r0, #255	; 0xff
 800095a:	d006      	beq.n	800096a <??ZbZclHandleWriteAttr_23>
 800095c:	4643      	mov	r3, r8
 800095e:	b2db      	uxtb	r3, r3
 8000960:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000962:	0031      	movs	r1, r6
 8000964:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8000966:	f00c ffc5 	bl	800d8f4 <ZbZclSendDefaultResponse>

0800096a <??ZbZclHandleWriteAttr_23>:
 800096a:	e01a      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

0800096c <??ZbZclHandleWriteAttr_22>:
 800096c:	2c00      	cmp	r4, #0
 800096e:	d10c      	bne.n	800098a <??ZbZclHandleWriteAttr_25>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d106      	bne.n	8000982 <??ZbZclHandleWriteAttr_26>
 8000974:	2301      	movs	r3, #1
 8000976:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000978:	0031      	movs	r1, r6
 800097a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800097c:	f00c ffba 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000980:	e00f      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

08000982 <??ZbZclHandleWriteAttr_26>:
 8000982:	2000      	movs	r0, #0
 8000984:	a907      	add	r1, sp, #28
 8000986:	5548      	strb	r0, [r1, r5]
 8000988:	1c6d      	adds	r5, r5, #1

0800098a <??ZbZclHandleWriteAttr_25>:
 800098a:	a807      	add	r0, sp, #28
 800098c:	901c      	str	r0, [sp, #112]	; 0x70
 800098e:	0028      	movs	r0, r5
 8000990:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	a916      	add	r1, sp, #88	; 0x58
 800099a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800099c:	6880      	ldr	r0, [r0, #8]
 800099e:	f00c fb29 	bl	800cff4 <ZbApsdeDataReqCallback>

080009a2 <??ZbZclHandleWriteAttr_24>:
 80009a2:	b025      	add	sp, #148	; 0x94
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009a8 <zcl_handle_command>:
 80009a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009ac:	0004      	movs	r4, r0
 80009ae:	000d      	movs	r5, r1
 80009b0:	0016      	movs	r6, r2
 80009b2:	79f7      	ldrb	r7, [r6, #7]
 80009b4:	8868      	ldrh	r0, [r5, #2]
 80009b6:	28ff      	cmp	r0, #255	; 0xff
 80009b8:	d102      	bne.n	80009c0 <??zcl_handle_command_0>
 80009ba:	f05f 0800 	movs.w	r8, #0
 80009be:	e001      	b.n	80009c4 <??zcl_handle_command_1>

080009c0 <??zcl_handle_command_0>:
 80009c0:	f05f 0801 	movs.w	r8, #1

080009c4 <??zcl_handle_command_1>:
 80009c4:	f115 0110 	adds.w	r1, r5, #16
 80009c8:	68a0      	ldr	r0, [r4, #8]
 80009ca:	f00c fbc7 	bl	800d15c <ZbApsAddrIsLocal>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d121      	bne.n	8000a16 <??zcl_handle_command_2>

080009d2 <??zcl_handle_command_3>:
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80009d8:	d01d      	beq.n	8000a16 <??zcl_handle_command_2>

080009da <??zcl_handle_command_4>:
 80009da:	0032      	movs	r2, r6
 80009dc:	0029      	movs	r1, r5
 80009de:	0020      	movs	r0, r4
 80009e0:	f7ff fc38 	bl	8000254 <ZbZclClusterCheckMinSecurity>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d107      	bne.n	80009f8 <??zcl_handle_command_5>
 80009e8:	2301      	movs	r3, #1
 80009ea:	0032      	movs	r2, r6
 80009ec:	0029      	movs	r1, r5
 80009ee:	0020      	movs	r0, r4
 80009f0:	f00c ff80 	bl	800d8f4 <ZbZclSendDefaultResponse>
 80009f4:	4640      	mov	r0, r8
 80009f6:	e0f7      	b.n	8000be8 <??zcl_handle_command_6>

080009f8 <??zcl_handle_command_5>:
 80009f8:	0032      	movs	r2, r6
 80009fa:	0029      	movs	r1, r5
 80009fc:	68a0      	ldr	r0, [r4, #8]
 80009fe:	f00c fe95 	bl	800d72c <ZbZclDeviceLogCheckAllow>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d107      	bne.n	8000a16 <??zcl_handle_command_2>
 8000a06:	2301      	movs	r3, #1
 8000a08:	0032      	movs	r2, r6
 8000a0a:	0029      	movs	r1, r5
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f00c ff71 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000a12:	4640      	mov	r0, r8
 8000a14:	e0e8      	b.n	8000be8 <??zcl_handle_command_6>

08000a16 <??zcl_handle_command_2>:
 8000a16:	7830      	ldrb	r0, [r6, #0]
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d13a      	bne.n	8000a92 <??zcl_handle_command_8>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d107      	bne.n	8000a32 <??zcl_handle_command_9>
 8000a22:	2381      	movs	r3, #129	; 0x81
 8000a24:	0032      	movs	r2, r6
 8000a26:	0029      	movs	r1, r5
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f00c ff63 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	e0da      	b.n	8000be8 <??zcl_handle_command_6>

08000a32 <??zcl_handle_command_9>:
 8000a32:	7870      	ldrb	r0, [r6, #1]
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d00e      	beq.n	8000a56 <??zcl_handle_command_10>
 8000a38:	8a20      	ldrh	r0, [r4, #16]
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d003      	beq.n	8000a46 <??zcl_handle_command_11>
 8000a3e:	8a20      	ldrh	r0, [r4, #16]
 8000a40:	88b1      	ldrh	r1, [r6, #4]
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d012      	beq.n	8000a6c <??zcl_handle_command_12>

08000a46 <??zcl_handle_command_11>:
 8000a46:	2381      	movs	r3, #129	; 0x81
 8000a48:	0032      	movs	r2, r6
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	f00c ff51 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000a52:	4640      	mov	r0, r8
 8000a54:	e0c8      	b.n	8000be8 <??zcl_handle_command_6>

08000a56 <??zcl_handle_command_10>:
 8000a56:	8a20      	ldrh	r0, [r4, #16]
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d007      	beq.n	8000a6c <??zcl_handle_command_12>
 8000a5c:	2381      	movs	r3, #129	; 0x81
 8000a5e:	0032      	movs	r2, r6
 8000a60:	0029      	movs	r1, r5
 8000a62:	0020      	movs	r0, r4
 8000a64:	f00c ff46 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e0bd      	b.n	8000be8 <??zcl_handle_command_6>

08000a6c <??zcl_handle_command_12>:
 8000a6c:	002a      	movs	r2, r5
 8000a6e:	0031      	movs	r1, r6
 8000a70:	0020      	movs	r0, r4
 8000a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a74:	4798      	blx	r3
 8000a76:	4681      	mov	r9, r0
 8000a78:	4648      	mov	r0, r9
 8000a7a:	b2c0      	uxtb	r0, r0
 8000a7c:	28ff      	cmp	r0, #255	; 0xff
 8000a7e:	d006      	beq.n	8000a8e <??zcl_handle_command_13>
 8000a80:	464b      	mov	r3, r9
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	0032      	movs	r2, r6
 8000a86:	0029      	movs	r1, r5
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f00c ff33 	bl	800d8f4 <ZbZclSendDefaultResponse>

08000a8e <??zcl_handle_command_13>:
 8000a8e:	4640      	mov	r0, r8
 8000a90:	e0aa      	b.n	8000be8 <??zcl_handle_command_6>

08000a92 <??zcl_handle_command_8>:
 8000a92:	7830      	ldrb	r0, [r6, #0]
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d007      	beq.n	8000aa8 <??zcl_handle_command_14>
 8000a98:	2385      	movs	r3, #133	; 0x85
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f00c ff28 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	e09f      	b.n	8000be8 <??zcl_handle_command_6>

08000aa8 <??zcl_handle_command_14>:
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d01c      	beq.n	8000aea <??zcl_handle_command_15>
 8000ab0:	2801      	cmp	r0, #1
 8000ab2:	d03f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d01e      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d01c      	beq.n	8000af6 <??zcl_handle_command_17>
 8000abc:	2804      	cmp	r0, #4
 8000abe:	d039      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ac0:	2805      	cmp	r0, #5
 8000ac2:	d018      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ac4:	2806      	cmp	r0, #6
 8000ac6:	d01c      	beq.n	8000b02 <??zcl_handle_command_18>
 8000ac8:	2807      	cmp	r0, #7
 8000aca:	d033      	beq.n	8000b34 <??zcl_handle_command_16>
 8000acc:	2808      	cmp	r0, #8
 8000ace:	d01e      	beq.n	8000b0e <??zcl_handle_command_19>
 8000ad0:	2809      	cmp	r0, #9
 8000ad2:	d02f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	d020      	beq.n	8000b1a <??zcl_handle_command_20>
 8000ad8:	280b      	cmp	r0, #11
 8000ada:	d02a      	beq.n	8000b32 <??zcl_handle_command_21>
 8000adc:	280c      	cmp	r0, #12
 8000ade:	d022      	beq.n	8000b26 <??zcl_handle_command_22>
 8000ae0:	280d      	cmp	r0, #13
 8000ae2:	d027      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae4:	2810      	cmp	r0, #16
 8000ae6:	d025      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae8:	e025      	b.n	8000b36 <??zcl_handle_command_23>

08000aea <??zcl_handle_command_15>:
 8000aea:	002a      	movs	r2, r5
 8000aec:	0031      	movs	r1, r6
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fd1f 	bl	8000532 <ZbZclHandleReadAttr>
 8000af4:	e077      	b.n	8000be6 <??zcl_handle_command_24>

08000af6 <??zcl_handle_command_17>:
 8000af6:	002a      	movs	r2, r5
 8000af8:	0031      	movs	r1, r6
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fdf4 	bl	80006e8 <ZbZclHandleWriteAttr>
 8000b00:	e071      	b.n	8000be6 <??zcl_handle_command_24>

08000b02 <??zcl_handle_command_18>:
 8000b02:	002a      	movs	r2, r5
 8000b04:	0031      	movs	r1, r6
 8000b06:	0020      	movs	r0, r4
 8000b08:	f003 fa17 	bl	8003f3a <ZbZclHandleConfigReport>
 8000b0c:	e06b      	b.n	8000be6 <??zcl_handle_command_24>

08000b0e <??zcl_handle_command_19>:
 8000b0e:	002a      	movs	r2, r5
 8000b10:	0031      	movs	r1, r6
 8000b12:	0020      	movs	r0, r4
 8000b14:	f003 fc95 	bl	8004442 <ZbZclHandleReadReport>
 8000b18:	e065      	b.n	8000be6 <??zcl_handle_command_24>

08000b1a <??zcl_handle_command_20>:
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f003 fdb4 	bl	800468c <ZbZclHandleReportAttr>
 8000b24:	e05f      	b.n	8000be6 <??zcl_handle_command_24>

08000b26 <??zcl_handle_command_22>:
 8000b26:	002a      	movs	r2, r5
 8000b28:	0031      	movs	r1, r6
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fc59 	bl	80013e2 <ZbZclAttrHandleDiscover>
 8000b30:	e059      	b.n	8000be6 <??zcl_handle_command_24>

08000b32 <??zcl_handle_command_21>:
 8000b32:	e058      	b.n	8000be6 <??zcl_handle_command_24>

08000b34 <??zcl_handle_command_16>:
 8000b34:	e057      	b.n	8000be6 <??zcl_handle_command_24>

08000b36 <??zcl_handle_command_23>:
 8000b36:	7870      	ldrb	r0, [r6, #1]
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d04e      	beq.n	8000bda <??zcl_handle_command_25>
 8000b3c:	88b0      	ldrh	r0, [r6, #4]
 8000b3e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d141      	bne.n	8000bca <??zcl_handle_command_26>
 8000b46:	f115 0110 	adds.w	r1, r5, #16
 8000b4a:	68a0      	ldr	r0, [r4, #8]
 8000b4c:	f00c fb06 	bl	800d15c <ZbApsAddrIsLocal>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d107      	bne.n	8000b64 <??zcl_handle_command_27>
 8000b54:	2381      	movs	r3, #129	; 0x81
 8000b56:	0032      	movs	r2, r6
 8000b58:	0029      	movs	r1, r5
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f00c feca 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000b60:	4640      	mov	r0, r8
 8000b62:	e041      	b.n	8000be8 <??zcl_handle_command_6>

08000b64 <??zcl_handle_command_27>:
 8000b64:	0038      	movs	r0, r7
 8000b66:	b2c0      	uxtb	r0, r0
 8000b68:	28f0      	cmp	r0, #240	; 0xf0
 8000b6a:	d108      	bne.n	8000b7e <??zcl_handle_command_28>
 8000b6c:	78b0      	ldrb	r0, [r6, #2]
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d131      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b72:	002a      	movs	r2, r5
 8000b74:	0031      	movs	r1, r6
 8000b76:	0020      	movs	r0, r4
 8000b78:	f004 fb01 	bl	800517e <ZbZclHandleGetSceneData>
 8000b7c:	e02b      	b.n	8000bd6 <??zcl_handle_command_29>

08000b7e <??zcl_handle_command_28>:
 8000b7e:	0038      	movs	r0, r7
 8000b80:	b2c0      	uxtb	r0, r0
 8000b82:	28f1      	cmp	r0, #241	; 0xf1
 8000b84:	d108      	bne.n	8000b98 <??zcl_handle_command_30>
 8000b86:	78b0      	ldrb	r0, [r6, #2]
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d124      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b8c:	002a      	movs	r2, r5
 8000b8e:	0031      	movs	r1, r6
 8000b90:	0020      	movs	r0, r4
 8000b92:	f004 fb73 	bl	800527c <ZbZclHandleSetSceneData>
 8000b96:	e01e      	b.n	8000bd6 <??zcl_handle_command_29>

08000b98 <??zcl_handle_command_30>:
 8000b98:	0038      	movs	r0, r7
 8000b9a:	b2c0      	uxtb	r0, r0
 8000b9c:	28f2      	cmp	r0, #242	; 0xf2
 8000b9e:	d10d      	bne.n	8000bbc <??zcl_handle_command_31>
 8000ba0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8000ba2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ba4:	0020      	movs	r0, r4
 8000ba6:	f7ff fc77 	bl	8000498 <zcl_persist_handle_set>
 8000baa:	4681      	mov	r9, r0
 8000bac:	464b      	mov	r3, r9
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f00c fe9d 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000bba:	e00c      	b.n	8000bd6 <??zcl_handle_command_29>

08000bbc <??zcl_handle_command_31>:
 8000bbc:	2381      	movs	r3, #129	; 0x81
 8000bbe:	0032      	movs	r2, r6
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f00c fe96 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8000bc8:	e005      	b.n	8000bd6 <??zcl_handle_command_29>

08000bca <??zcl_handle_command_26>:
 8000bca:	2381      	movs	r3, #129	; 0x81
 8000bcc:	0032      	movs	r2, r6
 8000bce:	0029      	movs	r1, r5
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f00c fe8f 	bl	800d8f4 <ZbZclSendDefaultResponse>

08000bd6 <??zcl_handle_command_29>:
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	e006      	b.n	8000be8 <??zcl_handle_command_6>

08000bda <??zcl_handle_command_25>:
 8000bda:	2381      	movs	r3, #129	; 0x81
 8000bdc:	0032      	movs	r2, r6
 8000bde:	0029      	movs	r1, r5
 8000be0:	0020      	movs	r0, r4
 8000be2:	f00c fe87 	bl	800d8f4 <ZbZclSendDefaultResponse>

08000be6 <??zcl_handle_command_24>:
 8000be6:	4640      	mov	r0, r8

08000be8 <??zcl_handle_command_6>:
 8000be8:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000bec <zcl_cluster_data_ind>:
 8000bec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000bee:	0004      	movs	r4, r0
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	002e      	movs	r6, r5
 8000bf4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000bf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f000 f999 	bl	8000f30 <ZbZclParseHeader>
 8000bfe:	0007      	movs	r7, r0
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d501      	bpl.n	8000c08 <??zcl_cluster_data_ind_0>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e00a      	b.n	8000c1e <??zcl_cluster_data_ind_1>

08000c08 <??zcl_cluster_data_ind_0>:
 8000c08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c0a:	4438      	add	r0, r7
 8000c0c:	6260      	str	r0, [r4, #36]	; 0x24
 8000c0e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	8520      	strh	r0, [r4, #40]	; 0x28
 8000c14:	466a      	mov	r2, sp
 8000c16:	0021      	movs	r1, r4
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f7ff fec5 	bl	80009a8 <zcl_handle_command>

08000c1e <??zcl_cluster_data_ind_1>:
 8000c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000c20 <zcl_cluster_alarm_data_ind>:
 8000c20:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b098      	sub	sp, #96	; 0x60
 8000c26:	0004      	movs	r4, r0
 8000c28:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8000c2a:	26ff      	movs	r6, #255	; 0xff
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000c30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c32:	a802      	add	r0, sp, #8
 8000c34:	f000 f97c 	bl	8000f30 <ZbZclParseHeader>
 8000c38:	4680      	mov	r8, r0
 8000c3a:	f1b8 0f00 	cmp.w	r8, #0
 8000c3e:	d501      	bpl.n	8000c44 <??zcl_cluster_alarm_data_ind_0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e0d7      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c44 <??zcl_cluster_alarm_data_ind_0>:
 8000c44:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8000c46:	ebb0 0008 	subs.w	r0, r0, r8
 8000c4a:	8520      	strh	r0, [r4, #40]	; 0x28
 8000c4c:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000c4e:	2809      	cmp	r0, #9
 8000c50:	d001      	beq.n	8000c56 <??zcl_cluster_alarm_data_ind_2>
 8000c52:	2000      	movs	r0, #0
 8000c54:	e0ce      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c56 <??zcl_cluster_alarm_data_ind_2>:
 8000c56:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d001      	beq.n	8000c62 <??zcl_cluster_alarm_data_ind_3>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e0c8      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c62 <??zcl_cluster_alarm_data_ind_3>:
 8000c62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c66:	2801      	cmp	r0, #1
 8000c68:	d001      	beq.n	8000c6e <??zcl_cluster_alarm_data_ind_4>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e0c2      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c6e <??zcl_cluster_alarm_data_ind_4>:
 8000c6e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d002      	beq.n	8000c7c <??zcl_cluster_alarm_data_ind_5>
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d02a      	beq.n	8000cd0 <??zcl_cluster_alarm_data_ind_6>
 8000c7a:	e03f      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000c7c <??zcl_cluster_alarm_data_ind_5>:
 8000c7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c7e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8000c82:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c88:	4440      	add	r0, r8
 8000c8a:	1c40      	adds	r0, r0, #1
 8000c8c:	f000 fab7 	bl	80011fe <pletoh16>
 8000c90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8000c94:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8000c98:	0028      	movs	r0, r5
 8000c9a:	f7ff fa77 	bl	800018c <ZbZclClusterGetClusterId>
 8000c9e:	4581      	cmp	r9, r0
 8000ca0:	d12c      	bne.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ca2 <??zcl_cluster_alarm_data_ind_9>:
 8000ca2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d104      	bne.n	8000cb2 <??zcl_cluster_alarm_data_ind_10>
 8000ca8:	2081      	movs	r0, #129	; 0x81
 8000caa:	0006      	movs	r6, r0
 8000cac:	2001      	movs	r0, #1
 8000cae:	0007      	movs	r7, r0
 8000cb0:	e024      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cb2 <??zcl_cluster_alarm_data_ind_10>:
 8000cb2:	a802      	add	r0, sp, #8
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8000cc6:	47e0      	blx	ip
 8000cc8:	0006      	movs	r6, r0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0007      	movs	r7, r0
 8000cce:	e015      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cd0 <??zcl_cluster_alarm_data_ind_6>:
 8000cd0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d104      	bne.n	8000ce0 <??zcl_cluster_alarm_data_ind_11>
 8000cd6:	2081      	movs	r0, #129	; 0x81
 8000cd8:	0006      	movs	r6, r0
 8000cda:	2001      	movs	r0, #1
 8000cdc:	0007      	movs	r7, r0
 8000cde:	e00d      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ce0 <??zcl_cluster_alarm_data_ind_11>:
 8000ce0:	a802      	add	r0, sp, #8
 8000ce2:	9000      	str	r0, [sp, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cea:	21ff      	movs	r1, #255	; 0xff
 8000cec:	0028      	movs	r0, r5
 8000cee:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8000cf2:	47e0      	blx	ip
 8000cf4:	0006      	movs	r6, r0
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e7ff      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cfc <??zcl_cluster_alarm_data_ind_7>:
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	b2c0      	uxtb	r0, r0
 8000d00:	28ff      	cmp	r0, #255	; 0xff
 8000d02:	d076      	beq.n	8000df2 <??zcl_cluster_alarm_data_ind_12>
 8000d04:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000d08:	f88d 0000 	strb.w	r0, [sp]
 8000d0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d10:	f88d 0002 	strb.w	r0, [sp, #2]
 8000d14:	f88d 6003 	strb.w	r6, [sp, #3]
 8000d18:	f05f 0a08 	movs.w	sl, #8
 8000d1c:	f05f 0b00 	movs.w	fp, #0
 8000d20:	f10d 0908 	add.w	r9, sp, #8
 8000d24:	465a      	mov	r2, fp
 8000d26:	4651      	mov	r1, sl
 8000d28:	4648      	mov	r0, r9
 8000d2a:	f004 ffb2 	bl	8005c92 <__aeabi_memset>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f88d 0008 	strb.w	r0, [sp, #8]
 8000d34:	2000      	movs	r0, #0
 8000d36:	f88d 0009 	strb.w	r0, [sp, #9]
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f88d 000a 	strb.w	r0, [sp, #10]
 8000d40:	2001      	movs	r0, #1
 8000d42:	f88d 000b 	strb.w	r0, [sp, #11]
 8000d46:	2000      	movs	r0, #0
 8000d48:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000d4c:	f89d 0000 	ldrb.w	r0, [sp]
 8000d50:	f88d 000e 	strb.w	r0, [sp, #14]
 8000d54:	200b      	movs	r0, #11
 8000d56:	f88d 000f 	strb.w	r0, [sp, #15]
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	a905      	add	r1, sp, #20
 8000d5e:	a802      	add	r0, sp, #8
 8000d60:	f000 f969 	bl	8001036 <ZbZclAppendHeader>
 8000d64:	4681      	mov	r9, r0
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	d501      	bpl.n	8000d70 <??zcl_cluster_alarm_data_ind_13>
 8000d6c:	2089      	movs	r0, #137	; 0x89
 8000d6e:	e041      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000d70 <??zcl_cluster_alarm_data_ind_13>:
 8000d70:	a805      	add	r0, sp, #20
 8000d72:	9014      	str	r0, [sp, #80]	; 0x50
 8000d74:	a814      	add	r0, sp, #80	; 0x50
 8000d76:	f8c0 9004 	str.w	r9, [r0, #4]
 8000d7a:	f10d 0102 	add.w	r1, sp, #2
 8000d7e:	6081      	str	r1, [r0, #8]
 8000d80:	2002      	movs	r0, #2
 8000d82:	9017      	str	r0, [sp, #92]	; 0x5c
 8000d84:	2030      	movs	r0, #48	; 0x30
 8000d86:	9004      	str	r0, [sp, #16]
 8000d88:	f05f 0a00 	movs.w	sl, #0
 8000d8c:	f10d 0b20 	add.w	fp, sp, #32
 8000d90:	4652      	mov	r2, sl
 8000d92:	9904      	ldr	r1, [sp, #16]
 8000d94:	4658      	mov	r0, fp
 8000d96:	f004 ff7c 	bl	8005c92 <__aeabi_memset>
 8000d9a:	a808      	add	r0, sp, #32
 8000d9c:	f114 0110 	adds.w	r1, r4, #16
 8000da0:	2210      	movs	r2, #16
 8000da2:	f00f ffa4 	bl	8010cee <__aeabi_memcpy>
 8000da6:	8aa8      	ldrh	r0, [r5, #20]
 8000da8:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8000dac:	2009      	movs	r0, #9
 8000dae:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8000db2:	7ba8      	ldrb	r0, [r5, #14]
 8000db4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8000db8:	a814      	add	r0, sp, #80	; 0x50
 8000dba:	900e      	str	r0, [sp, #56]	; 0x38
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8000dc2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8000dc6:	f7ff fad2 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8000dca:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8000dce:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8000dd2:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8000dd6:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
 8000de0:	2000      	movs	r0, #0
 8000de2:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	a908      	add	r1, sp, #32
 8000dec:	68a8      	ldr	r0, [r5, #8]
 8000dee:	f00c f901 	bl	800cff4 <ZbApsdeDataReqCallback>

08000df2 <??zcl_cluster_alarm_data_ind_12>:
 8000df2:	0038      	movs	r0, r7

08000df4 <??zcl_cluster_alarm_data_ind_1>:
 8000df4:	b019      	add	sp, #100	; 0x64
 8000df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dfa <ZbZclElecMeasClientAlloc>:
 8000dfa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000dfc:	0005      	movs	r5, r0
 8000dfe:	000e      	movs	r6, r1
 8000e00:	2001      	movs	r0, #1
 8000e02:	9000      	str	r0, [sp, #0]
 8000e04:	0033      	movs	r3, r6
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f640 3204 	movw	r2, #2820	; 0xb04
 8000e0c:	216c      	movs	r1, #108	; 0x6c
 8000e0e:	0028      	movs	r0, r5
 8000e10:	f003 fecb 	bl	8004baa <ZbZclClusterAlloc>
 8000e14:	0004      	movs	r4, r0
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d101      	bne.n	8000e1e <??ZbZclElecMeasClientAlloc_0>
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e003      	b.n	8000e26 <??ZbZclElecMeasClientAlloc_1>

08000e1e <??ZbZclElecMeasClientAlloc_0>:
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f003 ff53 	bl	8004cca <ZbZclClusterAttach>
 8000e24:	0020      	movs	r0, r4

08000e26 <??ZbZclElecMeasClientAlloc_1>:
 8000e26:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08000e28 <ZbZclElecMeasClientGetProfileInfoReq>:
 8000e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e2c:	b088      	sub	sp, #32
 8000e2e:	0004      	movs	r4, r0
 8000e30:	000d      	movs	r5, r1
 8000e32:	0016      	movs	r6, r2
 8000e34:	001f      	movs	r7, r3
 8000e36:	f05f 0820 	movs.w	r8, #32
 8000e3a:	f05f 0900 	movs.w	r9, #0
 8000e3e:	46ea      	mov	sl, sp
 8000e40:	464a      	mov	r2, r9
 8000e42:	4641      	mov	r1, r8
 8000e44:	4650      	mov	r0, sl
 8000e46:	f004 ff24 	bl	8005c92 <__aeabi_memset>
 8000e4a:	4668      	mov	r0, sp
 8000e4c:	0029      	movs	r1, r5
 8000e4e:	2210      	movs	r2, #16
 8000e50:	f00f ff4d 	bl	8010cee <__aeabi_memcpy>
 8000e54:	2000      	movs	r0, #0
 8000e56:	f88d 0010 	strb.w	r0, [sp, #16]
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f88d 0011 	strb.w	r0, [sp, #17]
 8000e60:	2000      	movs	r0, #0
 8000e62:	9005      	str	r0, [sp, #20]
 8000e64:	2000      	movs	r0, #0
 8000e66:	9006      	str	r0, [sp, #24]
 8000e68:	003b      	movs	r3, r7
 8000e6a:	0032      	movs	r2, r6
 8000e6c:	4669      	mov	r1, sp
 8000e6e:	0020      	movs	r0, r4
 8000e70:	f00c fd78 	bl	800d964 <ZbZclClusterCommandReq>
 8000e74:	b008      	add	sp, #32
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000e7a <ZbZclElecMeasClientGetMeasProfileReq>:
 8000e7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	0004      	movs	r4, r0
 8000e82:	000d      	movs	r5, r1
 8000e84:	0016      	movs	r6, r2
 8000e86:	001f      	movs	r7, r3
 8000e88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8000e8c:	f05f 0900 	movs.w	r9, #0
 8000e90:	8831      	ldrh	r1, [r6, #0]
 8000e92:	4668      	mov	r0, sp
 8000e94:	4448      	add	r0, r9
 8000e96:	f000 f9fe 	bl	8001296 <putle16>
 8000e9a:	f119 0902 	adds.w	r9, r9, #2
 8000e9e:	6871      	ldr	r1, [r6, #4]
 8000ea0:	4668      	mov	r0, sp
 8000ea2:	4448      	add	r0, r9
 8000ea4:	f000 fa09 	bl	80012ba <putle32>
 8000ea8:	f119 0904 	adds.w	r9, r9, #4
 8000eac:	7a30      	ldrb	r0, [r6, #8]
 8000eae:	4669      	mov	r1, sp
 8000eb0:	f801 0009 	strb.w	r0, [r1, r9]
 8000eb4:	f119 0901 	adds.w	r9, r9, #1
 8000eb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8000ebc:	f05f 0920 	movs.w	r9, #32
 8000ec0:	f05f 0a00 	movs.w	sl, #0
 8000ec4:	f10d 0b10 	add.w	fp, sp, #16
 8000ec8:	4652      	mov	r2, sl
 8000eca:	4649      	mov	r1, r9
 8000ecc:	4658      	mov	r0, fp
 8000ece:	f004 fee0 	bl	8005c92 <__aeabi_memset>
 8000ed2:	a804      	add	r0, sp, #16
 8000ed4:	0029      	movs	r1, r5
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	f00f ff09 	bl	8010cee <__aeabi_memcpy>
 8000edc:	2001      	movs	r0, #1
 8000ede:	f88d 0020 	strb.w	r0, [sp, #32]
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8000ee8:	4668      	mov	r0, sp
 8000eea:	9009      	str	r0, [sp, #36]	; 0x24
 8000eec:	2007      	movs	r0, #7
 8000eee:	900a      	str	r0, [sp, #40]	; 0x28
 8000ef0:	4643      	mov	r3, r8
 8000ef2:	003a      	movs	r2, r7
 8000ef4:	a904      	add	r1, sp, #16
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	f00c fd34 	bl	800d964 <ZbZclClusterCommandReq>
 8000efc:	b00d      	add	sp, #52	; 0x34
 8000efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f02 <ZbZclFanClientAlloc>:
 8000f02:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000f04:	0005      	movs	r5, r0
 8000f06:	000e      	movs	r6, r1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	9000      	str	r0, [sp, #0]
 8000f0c:	0033      	movs	r3, r6
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f240 2202 	movw	r2, #514	; 0x202
 8000f14:	216c      	movs	r1, #108	; 0x6c
 8000f16:	0028      	movs	r0, r5
 8000f18:	f003 fe47 	bl	8004baa <ZbZclClusterAlloc>
 8000f1c:	0004      	movs	r4, r0
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d101      	bne.n	8000f26 <??ZbZclFanClientAlloc_0>
 8000f22:	2000      	movs	r0, #0
 8000f24:	e003      	b.n	8000f2e <??ZbZclFanClientAlloc_1>

08000f26 <??ZbZclFanClientAlloc_0>:
 8000f26:	0020      	movs	r0, r4
 8000f28:	f003 fecf 	bl	8004cca <ZbZclClusterAttach>
 8000f2c:	0020      	movs	r0, r4

08000f2e <??ZbZclFanClientAlloc_1>:
 8000f2e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08000f30 <ZbZclParseHeader>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	0004      	movs	r4, r0
 8000f36:	000d      	movs	r5, r1
 8000f38:	0016      	movs	r6, r2
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	2e03      	cmp	r6, #3
 8000f3e:	d202      	bcs.n	8000f46 <??ZbZclParseHeader_0>
 8000f40:	f05f 30ff 	movs.w	r0, #4294967295
 8000f44:	e035      	b.n	8000fb2 <??ZbZclParseHeader_1>

08000f46 <??ZbZclParseHeader_0>:
 8000f46:	f05f 0808 	movs.w	r8, #8
 8000f4a:	f05f 0900 	movs.w	r9, #0
 8000f4e:	46a2      	mov	sl, r4
 8000f50:	464a      	mov	r2, r9
 8000f52:	4641      	mov	r1, r8
 8000f54:	4650      	mov	r0, sl
 8000f56:	f004 fe9c 	bl	8005c92 <__aeabi_memset>
 8000f5a:	5de8      	ldrb	r0, [r5, r7]
 8000f5c:	f010 0003 	ands.w	r0, r0, #3
 8000f60:	7020      	strb	r0, [r4, #0]
 8000f62:	5de8      	ldrb	r0, [r5, r7]
 8000f64:	b2c0      	uxtb	r0, r0
 8000f66:	0880      	lsrs	r0, r0, #2
 8000f68:	f010 0001 	ands.w	r0, r0, #1
 8000f6c:	7060      	strb	r0, [r4, #1]
 8000f6e:	5de8      	ldrb	r0, [r5, r7]
 8000f70:	b2c0      	uxtb	r0, r0
 8000f72:	08c0      	lsrs	r0, r0, #3
 8000f74:	f010 0001 	ands.w	r0, r0, #1
 8000f78:	70a0      	strb	r0, [r4, #2]
 8000f7a:	5de8      	ldrb	r0, [r5, r7]
 8000f7c:	b2c0      	uxtb	r0, r0
 8000f7e:	0900      	lsrs	r0, r0, #4
 8000f80:	f010 0001 	ands.w	r0, r0, #1
 8000f84:	70e0      	strb	r0, [r4, #3]
 8000f86:	1c7f      	adds	r7, r7, #1
 8000f88:	7860      	ldrb	r0, [r4, #1]
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d00a      	beq.n	8000fa4 <??ZbZclParseHeader_2>
 8000f8e:	2e05      	cmp	r6, #5
 8000f90:	d202      	bcs.n	8000f98 <??ZbZclParseHeader_3>
 8000f92:	f05f 30ff 	movs.w	r0, #4294967295
 8000f96:	e00c      	b.n	8000fb2 <??ZbZclParseHeader_1>

08000f98 <??ZbZclParseHeader_3>:
 8000f98:	eb05 0007 	add.w	r0, r5, r7
 8000f9c:	f000 f92f 	bl	80011fe <pletoh16>
 8000fa0:	80a0      	strh	r0, [r4, #4]
 8000fa2:	1cbf      	adds	r7, r7, #2

08000fa4 <??ZbZclParseHeader_2>:
 8000fa4:	5de8      	ldrb	r0, [r5, r7]
 8000fa6:	71a0      	strb	r0, [r4, #6]
 8000fa8:	1c7f      	adds	r7, r7, #1
 8000faa:	5de8      	ldrb	r0, [r5, r7]
 8000fac:	71e0      	strb	r0, [r4, #7]
 8000fae:	1c7f      	adds	r7, r7, #1
 8000fb0:	0038      	movs	r0, r7

08000fb2 <??ZbZclParseHeader_1>:
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fb6 <ZbZclPrependHeader>:
 8000fb6:	b470      	push	{r4, r5, r6}
 8000fb8:	0003      	movs	r3, r0
 8000fba:	2400      	movs	r4, #0
 8000fbc:	0015      	movs	r5, r2
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	7858      	ldrb	r0, [r3, #1]
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d004      	beq.n	8000fd0 <??ZbZclPrependHeader_0>
 8000fc6:	2a05      	cmp	r2, #5
 8000fc8:	d202      	bcs.n	8000fd0 <??ZbZclPrependHeader_0>
 8000fca:	f05f 30ff 	movs.w	r0, #4294967295
 8000fce:	e030      	b.n	8001032 <??ZbZclPrependHeader_1>

08000fd0 <??ZbZclPrependHeader_0>:
 8000fd0:	2a03      	cmp	r2, #3
 8000fd2:	d202      	bcs.n	8000fda <??ZbZclPrependHeader_2>
 8000fd4:	f05f 30ff 	movs.w	r0, #4294967295
 8000fd8:	e02b      	b.n	8001032 <??ZbZclPrependHeader_1>

08000fda <??ZbZclPrependHeader_2>:
 8000fda:	1e6d      	subs	r5, r5, #1
 8000fdc:	79d8      	ldrb	r0, [r3, #7]
 8000fde:	5548      	strb	r0, [r1, r5]
 8000fe0:	1c76      	adds	r6, r6, #1
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	7998      	ldrb	r0, [r3, #6]
 8000fe6:	5548      	strb	r0, [r1, r5]
 8000fe8:	1c76      	adds	r6, r6, #1
 8000fea:	7858      	ldrb	r0, [r3, #1]
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d009      	beq.n	8001004 <??ZbZclPrependHeader_3>
 8000ff0:	1e6d      	subs	r5, r5, #1
 8000ff2:	8898      	ldrh	r0, [r3, #4]
 8000ff4:	b280      	uxth	r0, r0
 8000ff6:	0a00      	lsrs	r0, r0, #8
 8000ff8:	5548      	strb	r0, [r1, r5]
 8000ffa:	1c76      	adds	r6, r6, #1
 8000ffc:	1e6d      	subs	r5, r5, #1
 8000ffe:	8898      	ldrh	r0, [r3, #4]
 8001000:	5548      	strb	r0, [r1, r5]
 8001002:	1c76      	adds	r6, r6, #1

08001004 <??ZbZclPrependHeader_3>:
 8001004:	7818      	ldrb	r0, [r3, #0]
 8001006:	f010 0003 	ands.w	r0, r0, #3
 800100a:	4304      	orrs	r4, r0
 800100c:	7858      	ldrb	r0, [r3, #1]
 800100e:	2800      	cmp	r0, #0
 8001010:	d001      	beq.n	8001016 <??ZbZclPrependHeader_4>
 8001012:	f054 0404 	orrs.w	r4, r4, #4

08001016 <??ZbZclPrependHeader_4>:
 8001016:	7898      	ldrb	r0, [r3, #2]
 8001018:	2801      	cmp	r0, #1
 800101a:	d101      	bne.n	8001020 <??ZbZclPrependHeader_5>
 800101c:	f054 0408 	orrs.w	r4, r4, #8

08001020 <??ZbZclPrependHeader_5>:
 8001020:	78d8      	ldrb	r0, [r3, #3]
 8001022:	2801      	cmp	r0, #1
 8001024:	d101      	bne.n	800102a <??ZbZclPrependHeader_6>
 8001026:	f054 0410 	orrs.w	r4, r4, #16

0800102a <??ZbZclPrependHeader_6>:
 800102a:	1e6d      	subs	r5, r5, #1
 800102c:	554c      	strb	r4, [r1, r5]
 800102e:	1c76      	adds	r6, r6, #1
 8001030:	0030      	movs	r0, r6

08001032 <??ZbZclPrependHeader_1>:
 8001032:	bc70      	pop	{r4, r5, r6}
 8001034:	4770      	bx	lr

08001036 <ZbZclAppendHeader>:
 8001036:	b430      	push	{r4, r5}
 8001038:	0003      	movs	r3, r0
 800103a:	2400      	movs	r4, #0
 800103c:	2500      	movs	r5, #0
 800103e:	7858      	ldrb	r0, [r3, #1]
 8001040:	2800      	cmp	r0, #0
 8001042:	d004      	beq.n	800104e <??ZbZclAppendHeader_0>
 8001044:	2a05      	cmp	r2, #5
 8001046:	d202      	bcs.n	800104e <??ZbZclAppendHeader_0>
 8001048:	f05f 30ff 	movs.w	r0, #4294967295
 800104c:	e02b      	b.n	80010a6 <??ZbZclAppendHeader_1>

0800104e <??ZbZclAppendHeader_0>:
 800104e:	2a03      	cmp	r2, #3
 8001050:	d202      	bcs.n	8001058 <??ZbZclAppendHeader_2>
 8001052:	f05f 30ff 	movs.w	r0, #4294967295
 8001056:	e026      	b.n	80010a6 <??ZbZclAppendHeader_1>

08001058 <??ZbZclAppendHeader_2>:
 8001058:	7818      	ldrb	r0, [r3, #0]
 800105a:	f010 0003 	ands.w	r0, r0, #3
 800105e:	4304      	orrs	r4, r0
 8001060:	7858      	ldrb	r0, [r3, #1]
 8001062:	2800      	cmp	r0, #0
 8001064:	d001      	beq.n	800106a <??ZbZclAppendHeader_3>
 8001066:	f054 0404 	orrs.w	r4, r4, #4

0800106a <??ZbZclAppendHeader_3>:
 800106a:	7898      	ldrb	r0, [r3, #2]
 800106c:	2801      	cmp	r0, #1
 800106e:	d101      	bne.n	8001074 <??ZbZclAppendHeader_4>
 8001070:	f054 0408 	orrs.w	r4, r4, #8

08001074 <??ZbZclAppendHeader_4>:
 8001074:	78d8      	ldrb	r0, [r3, #3]
 8001076:	2801      	cmp	r0, #1
 8001078:	d101      	bne.n	800107e <??ZbZclAppendHeader_5>
 800107a:	f054 0410 	orrs.w	r4, r4, #16

0800107e <??ZbZclAppendHeader_5>:
 800107e:	554c      	strb	r4, [r1, r5]
 8001080:	1c6d      	adds	r5, r5, #1
 8001082:	7858      	ldrb	r0, [r3, #1]
 8001084:	2800      	cmp	r0, #0
 8001086:	d007      	beq.n	8001098 <??ZbZclAppendHeader_6>
 8001088:	8898      	ldrh	r0, [r3, #4]
 800108a:	5548      	strb	r0, [r1, r5]
 800108c:	1c6d      	adds	r5, r5, #1
 800108e:	8898      	ldrh	r0, [r3, #4]
 8001090:	b280      	uxth	r0, r0
 8001092:	0a00      	lsrs	r0, r0, #8
 8001094:	5548      	strb	r0, [r1, r5]
 8001096:	1c6d      	adds	r5, r5, #1

08001098 <??ZbZclAppendHeader_6>:
 8001098:	7998      	ldrb	r0, [r3, #6]
 800109a:	5548      	strb	r0, [r1, r5]
 800109c:	1c6d      	adds	r5, r5, #1
 800109e:	79d8      	ldrb	r0, [r3, #7]
 80010a0:	5548      	strb	r0, [r1, r5]
 80010a2:	1c6d      	adds	r5, r5, #1
 80010a4:	0028      	movs	r0, r5

080010a6 <??ZbZclAppendHeader_1>:
 80010a6:	bc30      	pop	{r4, r5}
 80010a8:	4770      	bx	lr

080010aa <ZbZclIllumMeasClientAlloc>:
 80010aa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80010ac:	0005      	movs	r5, r0
 80010ae:	000e      	movs	r6, r1
 80010b0:	2001      	movs	r0, #1
 80010b2:	9000      	str	r0, [sp, #0]
 80010b4:	0033      	movs	r3, r6
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010bc:	216c      	movs	r1, #108	; 0x6c
 80010be:	0028      	movs	r0, r5
 80010c0:	f003 fd73 	bl	8004baa <ZbZclClusterAlloc>
 80010c4:	0004      	movs	r4, r0
 80010c6:	2c00      	cmp	r4, #0
 80010c8:	d101      	bne.n	80010ce <??ZbZclIllumMeasClientAlloc_0>
 80010ca:	2000      	movs	r0, #0
 80010cc:	e003      	b.n	80010d6 <??ZbZclIllumMeasClientAlloc_1>

080010ce <??ZbZclIllumMeasClientAlloc_0>:
 80010ce:	0020      	movs	r0, r4
 80010d0:	f003 fdfb 	bl	8004cca <ZbZclClusterAttach>
 80010d4:	0020      	movs	r0, r4

080010d6 <??ZbZclIllumMeasClientAlloc_1>:
 80010d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080010d8 <ZbZclOnOffClientAlloc>:
 80010d8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80010da:	0005      	movs	r5, r0
 80010dc:	000e      	movs	r6, r1
 80010de:	2001      	movs	r0, #1
 80010e0:	9000      	str	r0, [sp, #0]
 80010e2:	0033      	movs	r3, r6
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2206      	movs	r2, #6
 80010e8:	216c      	movs	r1, #108	; 0x6c
 80010ea:	0028      	movs	r0, r5
 80010ec:	f003 fd5d 	bl	8004baa <ZbZclClusterAlloc>
 80010f0:	0004      	movs	r4, r0
 80010f2:	2c00      	cmp	r4, #0
 80010f4:	d101      	bne.n	80010fa <??ZbZclOnOffClientAlloc_0>
 80010f6:	2000      	movs	r0, #0
 80010f8:	e003      	b.n	8001102 <??ZbZclOnOffClientAlloc_1>

080010fa <??ZbZclOnOffClientAlloc_0>:
 80010fa:	0020      	movs	r0, r4
 80010fc:	f003 fde5 	bl	8004cca <ZbZclClusterAttach>
 8001100:	0020      	movs	r0, r4

08001102 <??ZbZclOnOffClientAlloc_1>:
 8001102:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08001104 <onoff_send_req>:
 8001104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001108:	b088      	sub	sp, #32
 800110a:	0004      	movs	r4, r0
 800110c:	000d      	movs	r5, r1
 800110e:	0016      	movs	r6, r2
 8001110:	001f      	movs	r7, r3
 8001112:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001116:	f05f 0920 	movs.w	r9, #32
 800111a:	f05f 0a00 	movs.w	sl, #0
 800111e:	46eb      	mov	fp, sp
 8001120:	4652      	mov	r2, sl
 8001122:	4649      	mov	r1, r9
 8001124:	4658      	mov	r0, fp
 8001126:	f004 fdb4 	bl	8005c92 <__aeabi_memset>
 800112a:	4668      	mov	r0, sp
 800112c:	0029      	movs	r1, r5
 800112e:	2210      	movs	r2, #16
 8001130:	f00f fddd 	bl	8010cee <__aeabi_memcpy>
 8001134:	f88d 6010 	strb.w	r6, [sp, #16]
 8001138:	0028      	movs	r0, r5
 800113a:	f00b ffec 	bl	800d116 <ZbApsAddrIsBcast>
 800113e:	2800      	cmp	r0, #0
 8001140:	d001      	beq.n	8001146 <??onoff_send_req_0>
 8001142:	2001      	movs	r0, #1
 8001144:	e000      	b.n	8001148 <??onoff_send_req_1>

08001146 <??onoff_send_req_0>:
 8001146:	2000      	movs	r0, #0

08001148 <??onoff_send_req_1>:
 8001148:	f88d 0011 	strb.w	r0, [sp, #17]
 800114c:	2000      	movs	r0, #0
 800114e:	9005      	str	r0, [sp, #20]
 8001150:	2000      	movs	r0, #0
 8001152:	9006      	str	r0, [sp, #24]
 8001154:	4643      	mov	r3, r8
 8001156:	003a      	movs	r2, r7
 8001158:	4669      	mov	r1, sp
 800115a:	0020      	movs	r0, r4
 800115c:	f00c fc02 	bl	800d964 <ZbZclClusterCommandReq>
 8001160:	b009      	add	sp, #36	; 0x24
 8001162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001166 <ZbZclOnOffClientOnReq>:
 8001166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001168:	0004      	movs	r4, r0
 800116a:	000d      	movs	r5, r1
 800116c:	0016      	movs	r6, r2
 800116e:	001f      	movs	r7, r3
 8001170:	9700      	str	r7, [sp, #0]
 8001172:	0033      	movs	r3, r6
 8001174:	2201      	movs	r2, #1
 8001176:	0029      	movs	r1, r5
 8001178:	0020      	movs	r0, r4
 800117a:	f7ff ffc3 	bl	8001104 <onoff_send_req>
 800117e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001180 <ZbZclOnOffClientOffReq>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	0004      	movs	r4, r0
 8001184:	000d      	movs	r5, r1
 8001186:	0016      	movs	r6, r2
 8001188:	001f      	movs	r7, r3
 800118a:	9700      	str	r7, [sp, #0]
 800118c:	0033      	movs	r3, r6
 800118e:	2200      	movs	r2, #0
 8001190:	0029      	movs	r1, r5
 8001192:	0020      	movs	r0, r4
 8001194:	f7ff ffb6 	bl	8001104 <onoff_send_req>
 8001198:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800119a <ZbZclOnOffClientToggleReq>:
 800119a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119c:	0004      	movs	r4, r0
 800119e:	000d      	movs	r5, r1
 80011a0:	0016      	movs	r6, r2
 80011a2:	001f      	movs	r7, r3
 80011a4:	9700      	str	r7, [sp, #0]
 80011a6:	0033      	movs	r3, r6
 80011a8:	2202      	movs	r2, #2
 80011aa:	0029      	movs	r1, r5
 80011ac:	0020      	movs	r0, r4
 80011ae:	f7ff ffa9 	bl	8001104 <onoff_send_req>
 80011b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080011b4 <ZbZclTempMeasClientAlloc>:
 80011b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80011b6:	0005      	movs	r5, r0
 80011b8:	000e      	movs	r6, r1
 80011ba:	2001      	movs	r0, #1
 80011bc:	9000      	str	r0, [sp, #0]
 80011be:	0033      	movs	r3, r6
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f240 4202 	movw	r2, #1026	; 0x402
 80011c6:	216c      	movs	r1, #108	; 0x6c
 80011c8:	0028      	movs	r0, r5
 80011ca:	f003 fcee 	bl	8004baa <ZbZclClusterAlloc>
 80011ce:	0004      	movs	r4, r0
 80011d0:	2c00      	cmp	r4, #0
 80011d2:	d101      	bne.n	80011d8 <??ZbZclTempMeasClientAlloc_0>
 80011d4:	2000      	movs	r0, #0
 80011d6:	e003      	b.n	80011e0 <??ZbZclTempMeasClientAlloc_1>

080011d8 <??ZbZclTempMeasClientAlloc_0>:
 80011d8:	0020      	movs	r0, r4
 80011da:	f003 fd76 	bl	8004cca <ZbZclClusterAttach>
 80011de:	0020      	movs	r0, r4

080011e0 <??ZbZclTempMeasClientAlloc_1>:
 80011e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080011e2 <is_little_endian>:
 80011e2:	b081      	sub	sp, #4
 80011e4:	2001      	movs	r0, #1
 80011e6:	f8ad 0000 	strh.w	r0, [sp]
 80011ea:	4668      	mov	r0, sp
 80011ec:	7800      	ldrb	r0, [r0, #0]
 80011ee:	2801      	cmp	r0, #1
 80011f0:	d101      	bne.n	80011f6 <??is_little_endian_0>
 80011f2:	2001      	movs	r0, #1
 80011f4:	e000      	b.n	80011f8 <??is_little_endian_1>

080011f6 <??is_little_endian_0>:
 80011f6:	2000      	movs	r0, #0

080011f8 <??is_little_endian_1>:
 80011f8:	b2c0      	uxtb	r0, r0
 80011fa:	b001      	add	sp, #4
 80011fc:	4770      	bx	lr

080011fe <pletoh16>:
 80011fe:	0001      	movs	r1, r0
 8001200:	7808      	ldrb	r0, [r1, #0]
 8001202:	7849      	ldrb	r1, [r1, #1]
 8001204:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001208:	b280      	uxth	r0, r0
 800120a:	4770      	bx	lr

0800120c <pletoh24>:
 800120c:	b510      	push	{r4, lr}
 800120e:	0004      	movs	r4, r0
 8001210:	0020      	movs	r0, r4
 8001212:	f7ff fff4 	bl	80011fe <pletoh16>
 8001216:	b280      	uxth	r0, r0
 8001218:	78a1      	ldrb	r1, [r4, #2]
 800121a:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 800121e:	bd10      	pop	{r4, pc}

08001220 <pletoh32>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	0004      	movs	r4, r0
 8001224:	0020      	movs	r0, r4
 8001226:	f7ff ffea 	bl	80011fe <pletoh16>
 800122a:	0005      	movs	r5, r0
 800122c:	b2ad      	uxth	r5, r5
 800122e:	1ca0      	adds	r0, r4, #2
 8001230:	f7ff ffe5 	bl	80011fe <pletoh16>
 8001234:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8001238:	0028      	movs	r0, r5
 800123a:	bd32      	pop	{r1, r4, r5, pc}

0800123c <pletoh40>:
 800123c:	b510      	push	{r4, lr}
 800123e:	0004      	movs	r4, r0
 8001240:	0020      	movs	r0, r4
 8001242:	f7ff ffed 	bl	8001220 <pletoh32>
 8001246:	7921      	ldrb	r1, [r4, #4]
 8001248:	bd10      	pop	{r4, pc}

0800124a <pletoh48>:
 800124a:	b510      	push	{r4, lr}
 800124c:	0004      	movs	r4, r0
 800124e:	0020      	movs	r0, r4
 8001250:	f7ff fff4 	bl	800123c <pletoh40>
 8001254:	7962      	ldrb	r2, [r4, #5]
 8001256:	2300      	movs	r3, #0
 8001258:	0213      	lsls	r3, r2, #8
 800125a:	2200      	movs	r2, #0
 800125c:	4310      	orrs	r0, r2
 800125e:	4319      	orrs	r1, r3
 8001260:	bd10      	pop	{r4, pc}

08001262 <pletoh56>:
 8001262:	b510      	push	{r4, lr}
 8001264:	0004      	movs	r4, r0
 8001266:	0020      	movs	r0, r4
 8001268:	f7ff ffef 	bl	800124a <pletoh48>
 800126c:	79a2      	ldrb	r2, [r4, #6]
 800126e:	2300      	movs	r3, #0
 8001270:	0413      	lsls	r3, r2, #16
 8001272:	2200      	movs	r2, #0
 8001274:	4310      	orrs	r0, r2
 8001276:	4319      	orrs	r1, r3
 8001278:	bd10      	pop	{r4, pc}

0800127a <pletoh64>:
 800127a:	b538      	push	{r3, r4, r5, lr}
 800127c:	0005      	movs	r5, r0
 800127e:	0028      	movs	r0, r5
 8001280:	f7ff ffce 	bl	8001220 <pletoh32>
 8001284:	0004      	movs	r4, r0
 8001286:	1d28      	adds	r0, r5, #4
 8001288:	f7ff ffca 	bl	8001220 <pletoh32>
 800128c:	0003      	movs	r3, r0
 800128e:	0022      	movs	r2, r4
 8001290:	0010      	movs	r0, r2
 8001292:	0019      	movs	r1, r3
 8001294:	bd34      	pop	{r2, r4, r5, pc}

08001296 <putle16>:
 8001296:	7001      	strb	r1, [r0, #0]
 8001298:	000a      	movs	r2, r1
 800129a:	b292      	uxth	r2, r2
 800129c:	0a12      	lsrs	r2, r2, #8
 800129e:	7042      	strb	r2, [r0, #1]
 80012a0:	4770      	bx	lr

080012a2 <putle24>:
 80012a2:	b538      	push	{r3, r4, r5, lr}
 80012a4:	0004      	movs	r4, r0
 80012a6:	000d      	movs	r5, r1
 80012a8:	0029      	movs	r1, r5
 80012aa:	b289      	uxth	r1, r1
 80012ac:	0020      	movs	r0, r4
 80012ae:	f7ff fff2 	bl	8001296 <putle16>
 80012b2:	0028      	movs	r0, r5
 80012b4:	0c00      	lsrs	r0, r0, #16
 80012b6:	70a0      	strb	r0, [r4, #2]
 80012b8:	bd31      	pop	{r0, r4, r5, pc}

080012ba <putle32>:
 80012ba:	b538      	push	{r3, r4, r5, lr}
 80012bc:	0004      	movs	r4, r0
 80012be:	000d      	movs	r5, r1
 80012c0:	0029      	movs	r1, r5
 80012c2:	0020      	movs	r0, r4
 80012c4:	f7ff ffed 	bl	80012a2 <putle24>
 80012c8:	0028      	movs	r0, r5
 80012ca:	0e00      	lsrs	r0, r0, #24
 80012cc:	70e0      	strb	r0, [r4, #3]
 80012ce:	bd31      	pop	{r0, r4, r5, pc}

080012d0 <putle40>:
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	0006      	movs	r6, r0
 80012d4:	0014      	movs	r4, r2
 80012d6:	001d      	movs	r5, r3
 80012d8:	0021      	movs	r1, r4
 80012da:	0030      	movs	r0, r6
 80012dc:	f7ff ffed 	bl	80012ba <putle32>
 80012e0:	7135      	strb	r5, [r6, #4]
 80012e2:	bd70      	pop	{r4, r5, r6, pc}

080012e4 <putle48>:
 80012e4:	b570      	push	{r4, r5, r6, lr}
 80012e6:	0006      	movs	r6, r0
 80012e8:	0014      	movs	r4, r2
 80012ea:	001d      	movs	r5, r3
 80012ec:	0022      	movs	r2, r4
 80012ee:	002b      	movs	r3, r5
 80012f0:	0030      	movs	r0, r6
 80012f2:	f7ff ffed 	bl	80012d0 <putle40>
 80012f6:	0020      	movs	r0, r4
 80012f8:	0029      	movs	r1, r5
 80012fa:	0a08      	lsrs	r0, r1, #8
 80012fc:	2100      	movs	r1, #0
 80012fe:	7170      	strb	r0, [r6, #5]
 8001300:	bd70      	pop	{r4, r5, r6, pc}

08001302 <putle56>:
 8001302:	b570      	push	{r4, r5, r6, lr}
 8001304:	0006      	movs	r6, r0
 8001306:	0014      	movs	r4, r2
 8001308:	001d      	movs	r5, r3
 800130a:	0022      	movs	r2, r4
 800130c:	002b      	movs	r3, r5
 800130e:	0030      	movs	r0, r6
 8001310:	f7ff ffe8 	bl	80012e4 <putle48>
 8001314:	0020      	movs	r0, r4
 8001316:	0029      	movs	r1, r5
 8001318:	0c08      	lsrs	r0, r1, #16
 800131a:	2100      	movs	r1, #0
 800131c:	71b0      	strb	r0, [r6, #6]
 800131e:	bd70      	pop	{r4, r5, r6, pc}

08001320 <putle64>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	0006      	movs	r6, r0
 8001324:	0014      	movs	r4, r2
 8001326:	001d      	movs	r5, r3
 8001328:	0022      	movs	r2, r4
 800132a:	002b      	movs	r3, r5
 800132c:	0030      	movs	r0, r6
 800132e:	f7ff ffe8 	bl	8001302 <putle56>
 8001332:	0020      	movs	r0, r4
 8001334:	0029      	movs	r1, r5
 8001336:	0e08      	lsrs	r0, r1, #24
 8001338:	2100      	movs	r1, #0
 800133a:	71f0      	strb	r0, [r6, #7]
 800133c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001340 <ZbZclAttrAddSorted>:
 8001340:	b430      	push	{r4, r5}
 8001342:	0002      	movs	r2, r0
 8001344:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001346:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 800134a:	42a0      	cmp	r0, r4
 800134c:	d001      	beq.n	8001352 <??ZbZclAttrAddSorted_0>
 800134e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001350:	e000      	b.n	8001354 <??ZbZclAttrAddSorted_1>

08001352 <??ZbZclAttrAddSorted_0>:
 8001352:	2000      	movs	r0, #0

08001354 <??ZbZclAttrAddSorted_1>:
 8001354:	2800      	cmp	r0, #0
 8001356:	d017      	beq.n	8001388 <??ZbZclAttrAddSorted_2>
 8001358:	0003      	movs	r3, r0
 800135a:	688c      	ldr	r4, [r1, #8]
 800135c:	8824      	ldrh	r4, [r4, #0]
 800135e:	689d      	ldr	r5, [r3, #8]
 8001360:	882d      	ldrh	r5, [r5, #0]
 8001362:	42ac      	cmp	r4, r5
 8001364:	d207      	bcs.n	8001376 <??ZbZclAttrAddSorted_3>
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	685c      	ldr	r4, [r3, #4]
 800136a:	604c      	str	r4, [r1, #4]
 800136c:	680c      	ldr	r4, [r1, #0]
 800136e:	6061      	str	r1, [r4, #4]
 8001370:	684c      	ldr	r4, [r1, #4]
 8001372:	6021      	str	r1, [r4, #0]
 8001374:	e011      	b.n	800139a <??ZbZclAttrAddSorted_4>

08001376 <??ZbZclAttrAddSorted_3>:
 8001376:	6804      	ldr	r4, [r0, #0]
 8001378:	f112 0524 	adds.w	r5, r2, #36	; 0x24
 800137c:	42ac      	cmp	r4, r5
 800137e:	d001      	beq.n	8001384 <??ZbZclAttrAddSorted_5>
 8001380:	6800      	ldr	r0, [r0, #0]
 8001382:	e7e7      	b.n	8001354 <??ZbZclAttrAddSorted_1>

08001384 <??ZbZclAttrAddSorted_5>:
 8001384:	2000      	movs	r0, #0
 8001386:	e7e5      	b.n	8001354 <??ZbZclAttrAddSorted_1>

08001388 <??ZbZclAttrAddSorted_2>:
 8001388:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 800138c:	600c      	str	r4, [r1, #0]
 800138e:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001390:	604c      	str	r4, [r1, #4]
 8001392:	680c      	ldr	r4, [r1, #0]
 8001394:	6061      	str	r1, [r4, #4]
 8001396:	684c      	ldr	r4, [r1, #4]
 8001398:	6021      	str	r1, [r4, #0]

0800139a <??ZbZclAttrAddSorted_4>:
 800139a:	bc30      	pop	{r4, r5}
 800139c:	4770      	bx	lr

0800139e <ZbZclAttrFind>:
 800139e:	b430      	push	{r4, r5}
 80013a0:	0003      	movs	r3, r0
 80013a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013a4:	f113 0224 	adds.w	r2, r3, #36	; 0x24
 80013a8:	4290      	cmp	r0, r2
 80013aa:	d001      	beq.n	80013b0 <??ZbZclAttrFind_0>
 80013ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ae:	e000      	b.n	80013b2 <??ZbZclAttrFind_1>

080013b0 <??ZbZclAttrFind_0>:
 80013b0:	2200      	movs	r2, #0

080013b2 <??ZbZclAttrFind_1>:
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d012      	beq.n	80013dc <??ZbZclAttrFind_2>
 80013b6:	0014      	movs	r4, r2
 80013b8:	68a0      	ldr	r0, [r4, #8]
 80013ba:	8800      	ldrh	r0, [r0, #0]
 80013bc:	000d      	movs	r5, r1
 80013be:	b2ad      	uxth	r5, r5
 80013c0:	42a8      	cmp	r0, r5
 80013c2:	d005      	beq.n	80013d0 <??ZbZclAttrFind_3>
 80013c4:	6810      	ldr	r0, [r2, #0]
 80013c6:	f113 0524 	adds.w	r5, r3, #36	; 0x24
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	d004      	beq.n	80013d8 <??ZbZclAttrFind_4>
 80013ce:	e001      	b.n	80013d4 <??ZbZclAttrFind_5>

080013d0 <??ZbZclAttrFind_3>:
 80013d0:	0020      	movs	r0, r4
 80013d2:	e004      	b.n	80013de <??ZbZclAttrFind_6>

080013d4 <??ZbZclAttrFind_5>:
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	e7ec      	b.n	80013b2 <??ZbZclAttrFind_1>

080013d8 <??ZbZclAttrFind_4>:
 80013d8:	2200      	movs	r2, #0
 80013da:	e7ea      	b.n	80013b2 <??ZbZclAttrFind_1>

080013dc <??ZbZclAttrFind_2>:
 80013dc:	2000      	movs	r0, #0

080013de <??ZbZclAttrFind_6>:
 80013de:	bc30      	pop	{r4, r5}
 80013e0:	4770      	bx	lr

080013e2 <ZbZclAttrHandleDiscover>:
 80013e2:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013e6:	b09f      	sub	sp, #124	; 0x7c
 80013e8:	0004      	movs	r4, r0
 80013ea:	000d      	movs	r5, r1
 80013ec:	0016      	movs	r6, r2
 80013ee:	2708      	movs	r7, #8
 80013f0:	f05f 0800 	movs.w	r8, #0
 80013f4:	f10d 0908 	add.w	r9, sp, #8
 80013f8:	4642      	mov	r2, r8
 80013fa:	0039      	movs	r1, r7
 80013fc:	4648      	mov	r0, r9
 80013fe:	f004 fc48 	bl	8005c92 <__aeabi_memset>
 8001402:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8001404:	2803      	cmp	r0, #3
 8001406:	d206      	bcs.n	8001416 <??ZbZclAttrHandleDiscover_0>
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	002a      	movs	r2, r5
 800140c:	0031      	movs	r1, r6
 800140e:	0020      	movs	r0, r4
 8001410:	f00c fa70 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8001414:	e070      	b.n	80014f8 <??ZbZclAttrHandleDiscover_1>

08001416 <??ZbZclAttrHandleDiscover_0>:
 8001416:	f05f 0800 	movs.w	r8, #0
 800141a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800141c:	4641      	mov	r1, r8
 800141e:	b2c9      	uxtb	r1, r1
 8001420:	4408      	add	r0, r1
 8001422:	f7ff feec 	bl	80011fe <pletoh16>
 8001426:	0007      	movs	r7, r0
 8001428:	f118 0802 	adds.w	r8, r8, #2
 800142c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800142e:	4641      	mov	r1, r8
 8001430:	b2c9      	uxtb	r1, r1
 8001432:	5c40      	ldrb	r0, [r0, r1]
 8001434:	f88d 0004 	strb.w	r0, [sp, #4]
 8001438:	f118 0801 	adds.w	r8, r8, #1
 800143c:	2000      	movs	r0, #0
 800143e:	f88d 0008 	strb.w	r0, [sp, #8]
 8001442:	7868      	ldrb	r0, [r5, #1]
 8001444:	f88d 0009 	strb.w	r0, [sp, #9]
 8001448:	78a8      	ldrb	r0, [r5, #2]
 800144a:	2800      	cmp	r0, #0
 800144c:	d101      	bne.n	8001452 <??ZbZclAttrHandleDiscover_2>
 800144e:	2001      	movs	r0, #1
 8001450:	e000      	b.n	8001454 <??ZbZclAttrHandleDiscover_3>

08001452 <??ZbZclAttrHandleDiscover_2>:
 8001452:	2000      	movs	r0, #0

08001454 <??ZbZclAttrHandleDiscover_3>:
 8001454:	f88d 000a 	strb.w	r0, [sp, #10]
 8001458:	2001      	movs	r0, #1
 800145a:	f88d 000b 	strb.w	r0, [sp, #11]
 800145e:	88a8      	ldrh	r0, [r5, #4]
 8001460:	f8ad 000c 	strh.w	r0, [sp, #12]
 8001464:	79a8      	ldrb	r0, [r5, #6]
 8001466:	f88d 000e 	strb.w	r0, [sp, #14]
 800146a:	200d      	movs	r0, #13
 800146c:	f88d 000f 	strb.w	r0, [sp, #15]
 8001470:	2239      	movs	r2, #57	; 0x39
 8001472:	a910      	add	r1, sp, #64	; 0x40
 8001474:	a802      	add	r0, sp, #8
 8001476:	f7ff fdde 	bl	8001036 <ZbZclAppendHeader>
 800147a:	4682      	mov	sl, r0
 800147c:	f1ba 0f00 	cmp.w	sl, #0
 8001480:	d506      	bpl.n	8001490 <??ZbZclAttrHandleDiscover_4>
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	002a      	movs	r2, r5
 8001486:	0031      	movs	r1, r6
 8001488:	0020      	movs	r0, r4
 800148a:	f00c fa33 	bl	800d8f4 <ZbZclSendDefaultResponse>
 800148e:	e033      	b.n	80014f8 <??ZbZclAttrHandleDiscover_1>

08001490 <??ZbZclAttrHandleDiscover_4>:
 8001490:	f1da 0039 	rsbs	r0, sl, #57	; 0x39
 8001494:	9000      	str	r0, [sp, #0]
 8001496:	a810      	add	r0, sp, #64	; 0x40
 8001498:	eb00 030a 	add.w	r3, r0, sl
 800149c:	aa01      	add	r2, sp, #4
 800149e:	0039      	movs	r1, r7
 80014a0:	b289      	uxth	r1, r1
 80014a2:	0020      	movs	r0, r4
 80014a4:	f000 f82b 	bl	80014fe <ZbZclAttrDiscoverGetList>
 80014a8:	4681      	mov	r9, r0
 80014aa:	eb19 090a 	adds.w	r9, r9, sl
 80014ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d104      	bne.n	80014c0 <??ZbZclAttrHandleDiscover_5>
 80014b6:	0030      	movs	r0, r6
 80014b8:	f00b fe2d 	bl	800d116 <ZbApsAddrIsBcast>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d11b      	bne.n	80014f8 <??ZbZclAttrHandleDiscover_1>

080014c0 <??ZbZclAttrHandleDiscover_5>:
 80014c0:	0032      	movs	r2, r6
 80014c2:	a904      	add	r1, sp, #16
 80014c4:	0020      	movs	r0, r4
 80014c6:	f7fe ffba 	bl	800043e <ZbZclClusterInitApsdeReq>
 80014ca:	a804      	add	r0, sp, #16
 80014cc:	f116 0110 	adds.w	r1, r6, #16
 80014d0:	2210      	movs	r2, #16
 80014d2:	f00f fc0c 	bl	8010cee <__aeabi_memcpy>
 80014d6:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 80014da:	f7fe ff48 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80014de:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80014e2:	a810      	add	r0, sp, #64	; 0x40
 80014e4:	900a      	str	r0, [sp, #40]	; 0x28
 80014e6:	4648      	mov	r0, r9
 80014e8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 80014ec:	2300      	movs	r3, #0
 80014ee:	2200      	movs	r2, #0
 80014f0:	a904      	add	r1, sp, #16
 80014f2:	68a0      	ldr	r0, [r4, #8]
 80014f4:	f00b fd7e 	bl	800cff4 <ZbApsdeDataReqCallback>

080014f8 <??ZbZclAttrHandleDiscover_1>:
 80014f8:	b020      	add	sp, #128	; 0x80
 80014fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080014fe <ZbZclAttrDiscoverGetList>:
 80014fe:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001502:	0005      	movs	r5, r0
 8001504:	0016      	movs	r6, r2
 8001506:	001f      	movs	r7, r3
 8001508:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800150c:	f05f 0a00 	movs.w	sl, #0
 8001510:	f05f 0b00 	movs.w	fp, #0
 8001514:	2000      	movs	r0, #0
 8001516:	f807 000b 	strb.w	r0, [r7, fp]
 800151a:	f11b 0b01 	adds.w	fp, fp, #1
 800151e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001520:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8001524:	4288      	cmp	r0, r1
 8001526:	d001      	beq.n	800152c <??ZbZclAttrDiscoverGetList_0>
 8001528:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800152a:	e000      	b.n	800152e <??ZbZclAttrDiscoverGetList_1>

0800152c <??ZbZclAttrDiscoverGetList_0>:
 800152c:	2400      	movs	r4, #0

0800152e <??ZbZclAttrDiscoverGetList_1>:
 800152e:	2c00      	cmp	r4, #0
 8001530:	d030      	beq.n	8001594 <??ZbZclAttrDiscoverGetList_2>
 8001532:	46a1      	mov	r9, r4
 8001534:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001538:	8800      	ldrh	r0, [r0, #0]
 800153a:	f8bd 1000 	ldrh.w	r1, [sp]
 800153e:	4288      	cmp	r0, r1
 8001540:	d31f      	bcc.n	8001582 <??ZbZclAttrDiscoverGetList_3>

08001542 <??ZbZclAttrDiscoverGetList_4>:
 8001542:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001546:	8880      	ldrh	r0, [r0, #4]
 8001548:	0400      	lsls	r0, r0, #16
 800154a:	d41a      	bmi.n	8001582 <??ZbZclAttrDiscoverGetList_3>

0800154c <??ZbZclAttrDiscoverGetList_5>:
 800154c:	4650      	mov	r0, sl
 800154e:	7831      	ldrb	r1, [r6, #0]
 8001550:	b2c0      	uxtb	r0, r0
 8001552:	4288      	cmp	r0, r1
 8001554:	d21e      	bcs.n	8001594 <??ZbZclAttrDiscoverGetList_2>

08001556 <??ZbZclAttrDiscoverGetList_6>:
 8001556:	f11b 0003 	adds.w	r0, fp, #3
 800155a:	4580      	cmp	r8, r0
 800155c:	d31a      	bcc.n	8001594 <??ZbZclAttrDiscoverGetList_2>

0800155e <??ZbZclAttrDiscoverGetList_7>:
 800155e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001562:	8801      	ldrh	r1, [r0, #0]
 8001564:	eb07 000b 	add.w	r0, r7, fp
 8001568:	f7ff fe95 	bl	8001296 <putle16>
 800156c:	f11b 0b02 	adds.w	fp, fp, #2
 8001570:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001574:	7880      	ldrb	r0, [r0, #2]
 8001576:	f807 000b 	strb.w	r0, [r7, fp]
 800157a:	f11b 0b01 	adds.w	fp, fp, #1
 800157e:	f11a 0a01 	adds.w	sl, sl, #1

08001582 <??ZbZclAttrDiscoverGetList_3>:
 8001582:	6820      	ldr	r0, [r4, #0]
 8001584:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8001588:	4288      	cmp	r0, r1
 800158a:	d001      	beq.n	8001590 <??ZbZclAttrDiscoverGetList_8>
 800158c:	6824      	ldr	r4, [r4, #0]
 800158e:	e7ce      	b.n	800152e <??ZbZclAttrDiscoverGetList_1>

08001590 <??ZbZclAttrDiscoverGetList_8>:
 8001590:	2400      	movs	r4, #0
 8001592:	e7cc      	b.n	800152e <??ZbZclAttrDiscoverGetList_1>

08001594 <??ZbZclAttrDiscoverGetList_2>:
 8001594:	2c00      	cmp	r4, #0
 8001596:	d101      	bne.n	800159c <??ZbZclAttrDiscoverGetList_9>
 8001598:	2001      	movs	r0, #1
 800159a:	7038      	strb	r0, [r7, #0]

0800159c <??ZbZclAttrDiscoverGetList_9>:
 800159c:	f886 a000 	strb.w	sl, [r6]
 80015a0:	4658      	mov	r0, fp
 80015a2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015a6 <ZbZclAttrRead>:
 80015a6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	4680      	mov	r8, r0
 80015ae:	0014      	movs	r4, r2
 80015b0:	001d      	movs	r5, r3
 80015b2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80015b4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80015b8:	4640      	mov	r0, r8
 80015ba:	f7ff fef0 	bl	800139e <ZbZclAttrFind>
 80015be:	0007      	movs	r7, r0
 80015c0:	2f00      	cmp	r7, #0
 80015c2:	d101      	bne.n	80015c8 <??ZbZclAttrRead_0>
 80015c4:	2086      	movs	r0, #134	; 0x86
 80015c6:	e03c      	b.n	8001642 <??ZbZclAttrRead_1>

080015c8 <??ZbZclAttrRead_0>:
 80015c8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d005      	beq.n	80015dc <??ZbZclAttrRead_2>
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	7900      	ldrb	r0, [r0, #4]
 80015d4:	0780      	lsls	r0, r0, #30
 80015d6:	d401      	bmi.n	80015dc <??ZbZclAttrRead_2>
 80015d8:	208c      	movs	r0, #140	; 0x8c
 80015da:	e032      	b.n	8001642 <??ZbZclAttrRead_1>

080015dc <??ZbZclAttrRead_2>:
 80015dc:	2c00      	cmp	r4, #0
 80015de:	d002      	beq.n	80015e6 <??ZbZclAttrRead_3>
 80015e0:	68b8      	ldr	r0, [r7, #8]
 80015e2:	7880      	ldrb	r0, [r0, #2]
 80015e4:	7020      	strb	r0, [r4, #0]

080015e6 <??ZbZclAttrRead_3>:
 80015e6:	2d00      	cmp	r5, #0
 80015e8:	d001      	beq.n	80015ee <??ZbZclAttrRead_4>
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d105      	bne.n	80015fa <??ZbZclAttrRead_5>

080015ee <??ZbZclAttrRead_4>:
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d001      	beq.n	80015f6 <??ZbZclAttrRead_6>
 80015f2:	2000      	movs	r0, #0
 80015f4:	e025      	b.n	8001642 <??ZbZclAttrRead_1>

080015f6 <??ZbZclAttrRead_6>:
 80015f6:	2089      	movs	r0, #137	; 0x89
 80015f8:	e023      	b.n	8001642 <??ZbZclAttrRead_1>

080015fa <??ZbZclAttrRead_5>:
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	7900      	ldrb	r0, [r0, #4]
 80015fe:	06c0      	lsls	r0, r0, #27
 8001600:	d519      	bpl.n	8001636 <??ZbZclAttrRead_7>
 8001602:	f05f 0920 	movs.w	r9, #32
 8001606:	f05f 0a00 	movs.w	sl, #0
 800160a:	46eb      	mov	fp, sp
 800160c:	4652      	mov	r2, sl
 800160e:	4649      	mov	r1, r9
 8001610:	4658      	mov	r0, fp
 8001612:	f004 fb3e 	bl	8005c92 <__aeabi_memset>
 8001616:	68b8      	ldr	r0, [r7, #8]
 8001618:	9000      	str	r0, [sp, #0]
 800161a:	2000      	movs	r0, #0
 800161c:	f88d 0004 	strb.w	r0, [sp, #4]
 8001620:	9502      	str	r5, [sp, #8]
 8001622:	9603      	str	r6, [sp, #12]
 8001624:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8001628:	9007      	str	r0, [sp, #28]
 800162a:	466a      	mov	r2, sp
 800162c:	0039      	movs	r1, r7
 800162e:	4640      	mov	r0, r8
 8001630:	f001 fce6 	bl	8003000 <ZbZclAttrCallbackExec>
 8001634:	e005      	b.n	8001642 <??ZbZclAttrRead_1>

08001636 <??ZbZclAttrRead_7>:
 8001636:	0033      	movs	r3, r6
 8001638:	002a      	movs	r2, r5
 800163a:	0039      	movs	r1, r7
 800163c:	4640      	mov	r0, r8
 800163e:	f000 f803 	bl	8001648 <ZbZclAttrDefaultRead>

08001642 <??ZbZclAttrRead_1>:
 8001642:	b009      	add	sp, #36	; 0x24
 8001644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001648 <ZbZclAttrDefaultRead>:
 8001648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800164c:	0005      	movs	r5, r0
 800164e:	000e      	movs	r6, r1
 8001650:	0017      	movs	r7, r2
 8001652:	001c      	movs	r4, r3
 8001654:	f05f 0800 	movs.w	r8, #0
 8001658:	f05f 0900 	movs.w	r9, #0
 800165c:	68b0      	ldr	r0, [r6, #8]
 800165e:	7880      	ldrb	r0, [r0, #2]
 8001660:	2808      	cmp	r0, #8
 8001662:	d065      	beq.n	8001730 <??ZbZclAttrDefaultRead_0>
 8001664:	2809      	cmp	r0, #9
 8001666:	d06b      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 8001668:	280a      	cmp	r0, #10
 800166a:	d071      	beq.n	8001750 <??ZbZclAttrDefaultRead_2>
 800166c:	280b      	cmp	r0, #11
 800166e:	d077      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 8001670:	280c      	cmp	r0, #12
 8001672:	d07d      	beq.n	8001770 <??ZbZclAttrDefaultRead_4>
 8001674:	280d      	cmp	r0, #13
 8001676:	f000 8083 	beq.w	8001780 <??ZbZclAttrDefaultRead_5>
 800167a:	280e      	cmp	r0, #14
 800167c:	f000 8088 	beq.w	8001790 <??ZbZclAttrDefaultRead_6>
 8001680:	280f      	cmp	r0, #15
 8001682:	f000 808d 	beq.w	80017a0 <??ZbZclAttrDefaultRead_7>
 8001686:	2810      	cmp	r0, #16
 8001688:	d052      	beq.n	8001730 <??ZbZclAttrDefaultRead_0>
 800168a:	2818      	cmp	r0, #24
 800168c:	d050      	beq.n	8001730 <??ZbZclAttrDefaultRead_0>
 800168e:	2819      	cmp	r0, #25
 8001690:	d056      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 8001692:	281a      	cmp	r0, #26
 8001694:	d05c      	beq.n	8001750 <??ZbZclAttrDefaultRead_2>
 8001696:	281b      	cmp	r0, #27
 8001698:	d062      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 800169a:	281c      	cmp	r0, #28
 800169c:	d068      	beq.n	8001770 <??ZbZclAttrDefaultRead_4>
 800169e:	281d      	cmp	r0, #29
 80016a0:	d06e      	beq.n	8001780 <??ZbZclAttrDefaultRead_5>
 80016a2:	281e      	cmp	r0, #30
 80016a4:	d074      	beq.n	8001790 <??ZbZclAttrDefaultRead_6>
 80016a6:	281f      	cmp	r0, #31
 80016a8:	d07a      	beq.n	80017a0 <??ZbZclAttrDefaultRead_7>
 80016aa:	2820      	cmp	r0, #32
 80016ac:	d040      	beq.n	8001730 <??ZbZclAttrDefaultRead_0>
 80016ae:	2821      	cmp	r0, #33	; 0x21
 80016b0:	d046      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 80016b2:	2822      	cmp	r0, #34	; 0x22
 80016b4:	d04c      	beq.n	8001750 <??ZbZclAttrDefaultRead_2>
 80016b6:	2823      	cmp	r0, #35	; 0x23
 80016b8:	d052      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 80016ba:	2824      	cmp	r0, #36	; 0x24
 80016bc:	d058      	beq.n	8001770 <??ZbZclAttrDefaultRead_4>
 80016be:	2825      	cmp	r0, #37	; 0x25
 80016c0:	d05e      	beq.n	8001780 <??ZbZclAttrDefaultRead_5>
 80016c2:	2826      	cmp	r0, #38	; 0x26
 80016c4:	d064      	beq.n	8001790 <??ZbZclAttrDefaultRead_6>
 80016c6:	2827      	cmp	r0, #39	; 0x27
 80016c8:	d06a      	beq.n	80017a0 <??ZbZclAttrDefaultRead_7>
 80016ca:	2828      	cmp	r0, #40	; 0x28
 80016cc:	d030      	beq.n	8001730 <??ZbZclAttrDefaultRead_0>
 80016ce:	2829      	cmp	r0, #41	; 0x29
 80016d0:	d036      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 80016d2:	282a      	cmp	r0, #42	; 0x2a
 80016d4:	d03c      	beq.n	8001750 <??ZbZclAttrDefaultRead_2>
 80016d6:	282b      	cmp	r0, #43	; 0x2b
 80016d8:	d042      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 80016da:	282c      	cmp	r0, #44	; 0x2c
 80016dc:	d048      	beq.n	8001770 <??ZbZclAttrDefaultRead_4>
 80016de:	282d      	cmp	r0, #45	; 0x2d
 80016e0:	d04e      	beq.n	8001780 <??ZbZclAttrDefaultRead_5>
 80016e2:	282e      	cmp	r0, #46	; 0x2e
 80016e4:	d054      	beq.n	8001790 <??ZbZclAttrDefaultRead_6>
 80016e6:	282f      	cmp	r0, #47	; 0x2f
 80016e8:	d05a      	beq.n	80017a0 <??ZbZclAttrDefaultRead_7>
 80016ea:	2830      	cmp	r0, #48	; 0x30
 80016ec:	d020      	beq.n	8001730 <??ZbZclAttrDefaultRead_0>
 80016ee:	2831      	cmp	r0, #49	; 0x31
 80016f0:	d026      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 80016f2:	2838      	cmp	r0, #56	; 0x38
 80016f4:	d024      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 80016f6:	2839      	cmp	r0, #57	; 0x39
 80016f8:	d032      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 80016fa:	283a      	cmp	r0, #58	; 0x3a
 80016fc:	d050      	beq.n	80017a0 <??ZbZclAttrDefaultRead_7>
 80016fe:	2841      	cmp	r0, #65	; 0x41
 8001700:	d05e      	beq.n	80017c0 <??ZbZclAttrDefaultRead_8>
 8001702:	2842      	cmp	r0, #66	; 0x42
 8001704:	d05c      	beq.n	80017c0 <??ZbZclAttrDefaultRead_8>
 8001706:	2843      	cmp	r0, #67	; 0x43
 8001708:	d071      	beq.n	80017ee <??ZbZclAttrDefaultRead_9>
 800170a:	2844      	cmp	r0, #68	; 0x44
 800170c:	d06f      	beq.n	80017ee <??ZbZclAttrDefaultRead_9>
 800170e:	28e0      	cmp	r0, #224	; 0xe0
 8001710:	d026      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 8001712:	28e1      	cmp	r0, #225	; 0xe1
 8001714:	d024      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 8001716:	28e2      	cmp	r0, #226	; 0xe2
 8001718:	d022      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 800171a:	28e8      	cmp	r0, #232	; 0xe8
 800171c:	d010      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 800171e:	28e9      	cmp	r0, #233	; 0xe9
 8001720:	d00e      	beq.n	8001740 <??ZbZclAttrDefaultRead_1>
 8001722:	28ea      	cmp	r0, #234	; 0xea
 8001724:	d01c      	beq.n	8001760 <??ZbZclAttrDefaultRead_3>
 8001726:	28f0      	cmp	r0, #240	; 0xf0
 8001728:	d03a      	beq.n	80017a0 <??ZbZclAttrDefaultRead_7>
 800172a:	28f1      	cmp	r0, #241	; 0xf1
 800172c:	d040      	beq.n	80017b0 <??ZbZclAttrDefaultRead_10>
 800172e:	e078      	b.n	8001822 <??ZbZclAttrDefaultRead_11>

08001730 <??ZbZclAttrDefaultRead_0>:
 8001730:	2c00      	cmp	r4, #0
 8001732:	d102      	bne.n	800173a <??ZbZclAttrDefaultRead_12>
 8001734:	2089      	movs	r0, #137	; 0x89
 8001736:	4681      	mov	r9, r0
 8001738:	e075      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800173a <??ZbZclAttrDefaultRead_12>:
 800173a:	2001      	movs	r0, #1
 800173c:	4680      	mov	r8, r0
 800173e:	e072      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001740 <??ZbZclAttrDefaultRead_1>:
 8001740:	2c02      	cmp	r4, #2
 8001742:	d202      	bcs.n	800174a <??ZbZclAttrDefaultRead_14>
 8001744:	2089      	movs	r0, #137	; 0x89
 8001746:	4681      	mov	r9, r0
 8001748:	e06d      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800174a <??ZbZclAttrDefaultRead_14>:
 800174a:	2002      	movs	r0, #2
 800174c:	4680      	mov	r8, r0
 800174e:	e06a      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001750 <??ZbZclAttrDefaultRead_2>:
 8001750:	2c03      	cmp	r4, #3
 8001752:	d202      	bcs.n	800175a <??ZbZclAttrDefaultRead_15>
 8001754:	2089      	movs	r0, #137	; 0x89
 8001756:	4681      	mov	r9, r0
 8001758:	e065      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800175a <??ZbZclAttrDefaultRead_15>:
 800175a:	2003      	movs	r0, #3
 800175c:	4680      	mov	r8, r0
 800175e:	e062      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001760 <??ZbZclAttrDefaultRead_3>:
 8001760:	2c04      	cmp	r4, #4
 8001762:	d202      	bcs.n	800176a <??ZbZclAttrDefaultRead_16>
 8001764:	2089      	movs	r0, #137	; 0x89
 8001766:	4681      	mov	r9, r0
 8001768:	e05d      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800176a <??ZbZclAttrDefaultRead_16>:
 800176a:	2004      	movs	r0, #4
 800176c:	4680      	mov	r8, r0
 800176e:	e05a      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001770 <??ZbZclAttrDefaultRead_4>:
 8001770:	2c05      	cmp	r4, #5
 8001772:	d202      	bcs.n	800177a <??ZbZclAttrDefaultRead_17>
 8001774:	2089      	movs	r0, #137	; 0x89
 8001776:	4681      	mov	r9, r0
 8001778:	e055      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800177a <??ZbZclAttrDefaultRead_17>:
 800177a:	2005      	movs	r0, #5
 800177c:	4680      	mov	r8, r0
 800177e:	e052      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001780 <??ZbZclAttrDefaultRead_5>:
 8001780:	2c06      	cmp	r4, #6
 8001782:	d202      	bcs.n	800178a <??ZbZclAttrDefaultRead_18>
 8001784:	2089      	movs	r0, #137	; 0x89
 8001786:	4681      	mov	r9, r0
 8001788:	e04d      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800178a <??ZbZclAttrDefaultRead_18>:
 800178a:	2006      	movs	r0, #6
 800178c:	4680      	mov	r8, r0
 800178e:	e04a      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001790 <??ZbZclAttrDefaultRead_6>:
 8001790:	2c07      	cmp	r4, #7
 8001792:	d202      	bcs.n	800179a <??ZbZclAttrDefaultRead_19>
 8001794:	2089      	movs	r0, #137	; 0x89
 8001796:	4681      	mov	r9, r0
 8001798:	e045      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

0800179a <??ZbZclAttrDefaultRead_19>:
 800179a:	2007      	movs	r0, #7
 800179c:	4680      	mov	r8, r0
 800179e:	e042      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017a0 <??ZbZclAttrDefaultRead_7>:
 80017a0:	2c08      	cmp	r4, #8
 80017a2:	d202      	bcs.n	80017aa <??ZbZclAttrDefaultRead_20>
 80017a4:	2089      	movs	r0, #137	; 0x89
 80017a6:	4681      	mov	r9, r0
 80017a8:	e03d      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017aa <??ZbZclAttrDefaultRead_20>:
 80017aa:	2008      	movs	r0, #8
 80017ac:	4680      	mov	r8, r0
 80017ae:	e03a      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017b0 <??ZbZclAttrDefaultRead_10>:
 80017b0:	2c10      	cmp	r4, #16
 80017b2:	d202      	bcs.n	80017ba <??ZbZclAttrDefaultRead_21>
 80017b4:	2089      	movs	r0, #137	; 0x89
 80017b6:	4681      	mov	r9, r0
 80017b8:	e035      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017ba <??ZbZclAttrDefaultRead_21>:
 80017ba:	2010      	movs	r0, #16
 80017bc:	4680      	mov	r8, r0
 80017be:	e032      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017c0 <??ZbZclAttrDefaultRead_8>:
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d102      	bne.n	80017ca <??ZbZclAttrDefaultRead_22>
 80017c4:	2089      	movs	r0, #137	; 0x89
 80017c6:	4681      	mov	r9, r0
 80017c8:	e02d      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017ca <??ZbZclAttrDefaultRead_22>:
 80017ca:	68f0      	ldr	r0, [r6, #12]
 80017cc:	7800      	ldrb	r0, [r0, #0]
 80017ce:	0001      	movs	r1, r0
 80017d0:	b2c9      	uxtb	r1, r1
 80017d2:	29ff      	cmp	r1, #255	; 0xff
 80017d4:	d101      	bne.n	80017da <??ZbZclAttrDefaultRead_23>
 80017d6:	2100      	movs	r1, #0
 80017d8:	0008      	movs	r0, r1

080017da <??ZbZclAttrDefaultRead_23>:
 80017da:	0001      	movs	r1, r0
 80017dc:	b2c9      	uxtb	r1, r1
 80017de:	1c49      	adds	r1, r1, #1
 80017e0:	4688      	mov	r8, r1
 80017e2:	4544      	cmp	r4, r8
 80017e4:	d202      	bcs.n	80017ec <??ZbZclAttrDefaultRead_24>
 80017e6:	2189      	movs	r1, #137	; 0x89
 80017e8:	4689      	mov	r9, r1
 80017ea:	e01c      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017ec <??ZbZclAttrDefaultRead_24>:
 80017ec:	e01b      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017ee <??ZbZclAttrDefaultRead_9>:
 80017ee:	2c00      	cmp	r4, #0
 80017f0:	d102      	bne.n	80017f8 <??ZbZclAttrDefaultRead_25>
 80017f2:	2089      	movs	r0, #137	; 0x89
 80017f4:	4681      	mov	r9, r0
 80017f6:	e016      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

080017f8 <??ZbZclAttrDefaultRead_25>:
 80017f8:	68f0      	ldr	r0, [r6, #12]
 80017fa:	f7ff fd00 	bl	80011fe <pletoh16>
 80017fe:	0001      	movs	r1, r0
 8001800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001804:	b289      	uxth	r1, r1
 8001806:	4291      	cmp	r1, r2
 8001808:	d101      	bne.n	800180e <??ZbZclAttrDefaultRead_26>
 800180a:	2100      	movs	r1, #0
 800180c:	0008      	movs	r0, r1

0800180e <??ZbZclAttrDefaultRead_26>:
 800180e:	0001      	movs	r1, r0
 8001810:	b289      	uxth	r1, r1
 8001812:	1c89      	adds	r1, r1, #2
 8001814:	4688      	mov	r8, r1
 8001816:	4544      	cmp	r4, r8
 8001818:	d202      	bcs.n	8001820 <??ZbZclAttrDefaultRead_27>
 800181a:	2189      	movs	r1, #137	; 0x89
 800181c:	4689      	mov	r9, r1
 800181e:	e002      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001820 <??ZbZclAttrDefaultRead_27>:
 8001820:	e001      	b.n	8001826 <??ZbZclAttrDefaultRead_13>

08001822 <??ZbZclAttrDefaultRead_11>:
 8001822:	2086      	movs	r0, #134	; 0x86
 8001824:	4681      	mov	r9, r0

08001826 <??ZbZclAttrDefaultRead_13>:
 8001826:	4648      	mov	r0, r9
 8001828:	b2c0      	uxtb	r0, r0
 800182a:	2800      	cmp	r0, #0
 800182c:	d109      	bne.n	8001842 <??ZbZclAttrDefaultRead_28>
 800182e:	f8cd 8000 	str.w	r8, [sp]
 8001832:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8001836:	46bb      	mov	fp, r7
 8001838:	9a00      	ldr	r2, [sp, #0]
 800183a:	4651      	mov	r1, sl
 800183c:	4658      	mov	r0, fp
 800183e:	f00f fa56 	bl	8010cee <__aeabi_memcpy>

08001842 <??ZbZclAttrDefaultRead_28>:
 8001842:	4648      	mov	r0, r9
 8001844:	b2c0      	uxtb	r0, r0
 8001846:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800184a <ZbZclAttrWrite>:
 800184a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184e:	b096      	sub	sp, #88	; 0x58
 8001850:	4680      	mov	r8, r0
 8001852:	4699      	mov	r9, r3
 8001854:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8001858:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800185a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 800185e:	4640      	mov	r0, r8
 8001860:	f7ff fd9d 	bl	800139e <ZbZclAttrFind>
 8001864:	0006      	movs	r6, r0
 8001866:	2e00      	cmp	r6, #0
 8001868:	d101      	bne.n	800186e <??ZbZclAttrWrite_0>
 800186a:	2086      	movs	r0, #134	; 0x86
 800186c:	e0a2      	b.n	80019b4 <??ZbZclAttrWrite_1>

0800186e <??ZbZclAttrWrite_0>:
 800186e:	68b0      	ldr	r0, [r6, #8]
 8001870:	7900      	ldrb	r0, [r0, #4]
 8001872:	f010 0001 	ands.w	r0, r0, #1
 8001876:	b2c0      	uxtb	r0, r0
 8001878:	2800      	cmp	r0, #0
 800187a:	d105      	bne.n	8001888 <??ZbZclAttrWrite_2>
 800187c:	0038      	movs	r0, r7
 800187e:	b280      	uxth	r0, r0
 8001880:	0780      	lsls	r0, r0, #30
 8001882:	d401      	bmi.n	8001888 <??ZbZclAttrWrite_2>
 8001884:	2088      	movs	r0, #136	; 0x88
 8001886:	e095      	b.n	80019b4 <??ZbZclAttrWrite_1>

08001888 <??ZbZclAttrWrite_2>:
 8001888:	2300      	movs	r3, #0
 800188a:	4652      	mov	r2, sl
 800188c:	4649      	mov	r1, r9
 800188e:	68b0      	ldr	r0, [r6, #8]
 8001890:	7880      	ldrb	r0, [r0, #2]
 8001892:	f000 fcb0 	bl	80021f6 <ZbZclAttrParseLength>
 8001896:	9005      	str	r0, [sp, #20]
 8001898:	9805      	ldr	r0, [sp, #20]
 800189a:	2800      	cmp	r0, #0
 800189c:	d501      	bpl.n	80018a2 <??ZbZclAttrWrite_3>
 800189e:	2087      	movs	r0, #135	; 0x87
 80018a0:	e088      	b.n	80019b4 <??ZbZclAttrWrite_1>

080018a2 <??ZbZclAttrWrite_3>:
 80018a2:	68b0      	ldr	r0, [r6, #8]
 80018a4:	7880      	ldrb	r0, [r0, #2]
 80018a6:	f000 ff83 	bl	80027b0 <ZbZclAttrIsInteger>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d026      	beq.n	80018fc <??ZbZclAttrWrite_4>
 80018ae:	aa04      	add	r2, sp, #16
 80018b0:	4649      	mov	r1, r9
 80018b2:	68b0      	ldr	r0, [r6, #8]
 80018b4:	7880      	ldrb	r0, [r0, #2]
 80018b6:	f000 fe4d 	bl	8002554 <ZbZclParseInteger>
 80018ba:	0004      	movs	r4, r0
 80018bc:	000d      	movs	r5, r1
 80018be:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d002      	beq.n	80018cc <??ZbZclAttrWrite_5>
 80018c6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80018ca:	e073      	b.n	80019b4 <??ZbZclAttrWrite_1>

080018cc <??ZbZclAttrWrite_5>:
 80018cc:	68b0      	ldr	r0, [r6, #8]
 80018ce:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 80018d2:	f004 ff3f 	bl	8006754 <__aeabi_d2lz>
 80018d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018da:	68b0      	ldr	r0, [r6, #8]
 80018dc:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80018e0:	f004 ff38 	bl	8006754 <__aeabi_d2lz>
 80018e4:	e9cd 0100 	strd	r0, r1, [sp]
 80018e8:	68b0      	ldr	r0, [r6, #8]
 80018ea:	7882      	ldrb	r2, [r0, #2]
 80018ec:	0020      	movs	r0, r4
 80018ee:	0029      	movs	r1, r5
 80018f0:	f000 ff74 	bl	80027dc <ZbZclAttrIntegerRangeCheck>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d101      	bne.n	80018fc <??ZbZclAttrWrite_4>
 80018f8:	2087      	movs	r0, #135	; 0x87
 80018fa:	e05b      	b.n	80019b4 <??ZbZclAttrWrite_1>

080018fc <??ZbZclAttrWrite_4>:
 80018fc:	68b0      	ldr	r0, [r6, #8]
 80018fe:	7900      	ldrb	r0, [r0, #4]
 8001900:	0680      	lsls	r0, r0, #26
 8001902:	d522      	bpl.n	800194a <??ZbZclAttrWrite_6>
 8001904:	2420      	movs	r4, #32
 8001906:	2500      	movs	r5, #0
 8001908:	f10d 0b18 	add.w	fp, sp, #24
 800190c:	002a      	movs	r2, r5
 800190e:	0021      	movs	r1, r4
 8001910:	4658      	mov	r0, fp
 8001912:	f004 f9be 	bl	8005c92 <__aeabi_memset>
 8001916:	68b0      	ldr	r0, [r6, #8]
 8001918:	9006      	str	r0, [sp, #24]
 800191a:	2001      	movs	r0, #1
 800191c:	f88d 001c 	strb.w	r0, [sp, #28]
 8001920:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001922:	900c      	str	r0, [sp, #48]	; 0x30
 8001924:	f8cd 9020 	str.w	r9, [sp, #32]
 8001928:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800192c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8001930:	68f0      	ldr	r0, [r6, #12]
 8001932:	900b      	str	r0, [sp, #44]	; 0x2c
 8001934:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8001938:	900d      	str	r0, [sp, #52]	; 0x34
 800193a:	aa06      	add	r2, sp, #24
 800193c:	0031      	movs	r1, r6
 800193e:	4640      	mov	r0, r8
 8001940:	f001 fb5e 	bl	8003000 <ZbZclAttrCallbackExec>
 8001944:	f88d 0010 	strb.w	r0, [sp, #16]
 8001948:	e028      	b.n	800199c <??ZbZclAttrWrite_7>

0800194a <??ZbZclAttrWrite_6>:
 800194a:	003b      	movs	r3, r7
 800194c:	b29b      	uxth	r3, r3
 800194e:	464a      	mov	r2, r9
 8001950:	0031      	movs	r1, r6
 8001952:	4640      	mov	r0, r8
 8001954:	f000 f85e 	bl	8001a14 <ZbZclAttrDefaultWrite>
 8001958:	f88d 0010 	strb.w	r0, [sp, #16]
 800195c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001960:	2800      	cmp	r0, #0
 8001962:	d11b      	bne.n	800199c <??ZbZclAttrWrite_7>
 8001964:	68b0      	ldr	r0, [r6, #8]
 8001966:	7900      	ldrb	r0, [r0, #4]
 8001968:	0640      	lsls	r0, r0, #25
 800196a:	d517      	bpl.n	800199c <??ZbZclAttrWrite_7>
 800196c:	2420      	movs	r4, #32
 800196e:	2500      	movs	r5, #0
 8001970:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8001974:	002a      	movs	r2, r5
 8001976:	0021      	movs	r1, r4
 8001978:	4658      	mov	r0, fp
 800197a:	f004 f98a 	bl	8005c92 <__aeabi_memset>
 800197e:	68b0      	ldr	r0, [r6, #8]
 8001980:	900e      	str	r0, [sp, #56]	; 0x38
 8001982:	2002      	movs	r0, #2
 8001984:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 8001988:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800198a:	9014      	str	r0, [sp, #80]	; 0x50
 800198c:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 8001990:	9015      	str	r0, [sp, #84]	; 0x54
 8001992:	aa0e      	add	r2, sp, #56	; 0x38
 8001994:	0031      	movs	r1, r6
 8001996:	4640      	mov	r0, r8
 8001998:	f001 fb32 	bl	8003000 <ZbZclAttrCallbackExec>

0800199c <??ZbZclAttrWrite_7>:
 800199c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d002      	beq.n	80019aa <??ZbZclAttrWrite_8>
 80019a4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80019a8:	e004      	b.n	80019b4 <??ZbZclAttrWrite_1>

080019aa <??ZbZclAttrWrite_8>:
 80019aa:	0031      	movs	r1, r6
 80019ac:	4640      	mov	r0, r8
 80019ae:	f000 f804 	bl	80019ba <ZbZclAttrPostWrite>
 80019b2:	2000      	movs	r0, #0

080019b4 <??ZbZclAttrWrite_1>:
 80019b4:	b019      	add	sp, #100	; 0x64
 80019b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019ba <ZbZclAttrPostWrite>:
 80019ba:	b538      	push	{r3, r4, r5, lr}
 80019bc:	0005      	movs	r5, r0
 80019be:	000c      	movs	r4, r1
 80019c0:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d004      	beq.n	80019d0 <??ZbZclAttrPostWrite_0>
 80019c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ca:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80019cc:	f00b fde6 	bl	800d59c <ZbTimerReset>

080019d0 <??ZbZclAttrPostWrite_0>:
 80019d0:	2c00      	cmp	r4, #0
 80019d2:	d005      	beq.n	80019e0 <??ZbZclAttrPostWrite_1>
 80019d4:	2200      	movs	r2, #0
 80019d6:	68a0      	ldr	r0, [r4, #8]
 80019d8:	8801      	ldrh	r1, [r0, #0]
 80019da:	0028      	movs	r0, r5
 80019dc:	f001 ffcb 	bl	8003976 <zcl_attr_reporting_check>

080019e0 <??ZbZclAttrPostWrite_1>:
 80019e0:	bd31      	pop	{r0, r4, r5, pc}

080019e2 <ZbZclAttrPersist>:
 80019e2:	b570      	push	{r4, r5, r6, lr}
 80019e4:	0005      	movs	r5, r0
 80019e6:	000e      	movs	r6, r1
 80019e8:	0031      	movs	r1, r6
 80019ea:	b289      	uxth	r1, r1
 80019ec:	0028      	movs	r0, r5
 80019ee:	f7ff fcd6 	bl	800139e <ZbZclAttrFind>
 80019f2:	0004      	movs	r4, r0
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	d101      	bne.n	80019fc <??ZbZclAttrPersist_0>
 80019f8:	2000      	movs	r0, #0
 80019fa:	e00a      	b.n	8001a12 <??ZbZclAttrPersist_1>

080019fc <??ZbZclAttrPersist_0>:
 80019fc:	68a0      	ldr	r0, [r4, #8]
 80019fe:	7900      	ldrb	r0, [r0, #4]
 8001a00:	0740      	lsls	r0, r0, #29
 8001a02:	d401      	bmi.n	8001a08 <??ZbZclAttrPersist_2>
 8001a04:	2000      	movs	r0, #0
 8001a06:	e004      	b.n	8001a12 <??ZbZclAttrPersist_1>

08001a08 <??ZbZclAttrPersist_2>:
 8001a08:	0021      	movs	r1, r4
 8001a0a:	0028      	movs	r0, r5
 8001a0c:	f7ff ffd5 	bl	80019ba <ZbZclAttrPostWrite>
 8001a10:	2001      	movs	r0, #1

08001a12 <??ZbZclAttrPersist_1>:
 8001a12:	bd70      	pop	{r4, r5, r6, pc}

08001a14 <ZbZclAttrDefaultWrite>:
 8001a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a18:	0006      	movs	r6, r0
 8001a1a:	000f      	movs	r7, r1
 8001a1c:	0014      	movs	r4, r2
 8001a1e:	4698      	mov	r8, r3
 8001a20:	2500      	movs	r5, #0
 8001a22:	f05f 0900 	movs.w	r9, #0
 8001a26:	2c00      	cmp	r4, #0
 8001a28:	d101      	bne.n	8001a2e <??ZbZclAttrDefaultWrite_0>
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	e0d6      	b.n	8001bdc <??ZbZclAttrDefaultWrite_1>

08001a2e <??ZbZclAttrDefaultWrite_0>:
 8001a2e:	68b8      	ldr	r0, [r7, #8]
 8001a30:	7880      	ldrb	r0, [r0, #2]
 8001a32:	2808      	cmp	r0, #8
 8001a34:	d062      	beq.n	8001afc <??ZbZclAttrDefaultWrite_2>
 8001a36:	2809      	cmp	r0, #9
 8001a38:	d063      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001a3a:	280a      	cmp	r0, #10
 8001a3c:	d064      	beq.n	8001b08 <??ZbZclAttrDefaultWrite_4>
 8001a3e:	280b      	cmp	r0, #11
 8001a40:	d065      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001a42:	280c      	cmp	r0, #12
 8001a44:	d066      	beq.n	8001b14 <??ZbZclAttrDefaultWrite_6>
 8001a46:	280d      	cmp	r0, #13
 8001a48:	d067      	beq.n	8001b1a <??ZbZclAttrDefaultWrite_7>
 8001a4a:	280e      	cmp	r0, #14
 8001a4c:	d068      	beq.n	8001b20 <??ZbZclAttrDefaultWrite_8>
 8001a4e:	280f      	cmp	r0, #15
 8001a50:	d069      	beq.n	8001b26 <??ZbZclAttrDefaultWrite_9>
 8001a52:	2810      	cmp	r0, #16
 8001a54:	d052      	beq.n	8001afc <??ZbZclAttrDefaultWrite_2>
 8001a56:	2818      	cmp	r0, #24
 8001a58:	d050      	beq.n	8001afc <??ZbZclAttrDefaultWrite_2>
 8001a5a:	2819      	cmp	r0, #25
 8001a5c:	d051      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001a5e:	281a      	cmp	r0, #26
 8001a60:	d052      	beq.n	8001b08 <??ZbZclAttrDefaultWrite_4>
 8001a62:	281b      	cmp	r0, #27
 8001a64:	d053      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001a66:	281c      	cmp	r0, #28
 8001a68:	d054      	beq.n	8001b14 <??ZbZclAttrDefaultWrite_6>
 8001a6a:	281d      	cmp	r0, #29
 8001a6c:	d055      	beq.n	8001b1a <??ZbZclAttrDefaultWrite_7>
 8001a6e:	281e      	cmp	r0, #30
 8001a70:	d056      	beq.n	8001b20 <??ZbZclAttrDefaultWrite_8>
 8001a72:	281f      	cmp	r0, #31
 8001a74:	d057      	beq.n	8001b26 <??ZbZclAttrDefaultWrite_9>
 8001a76:	2820      	cmp	r0, #32
 8001a78:	d040      	beq.n	8001afc <??ZbZclAttrDefaultWrite_2>
 8001a7a:	2821      	cmp	r0, #33	; 0x21
 8001a7c:	d041      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001a7e:	2822      	cmp	r0, #34	; 0x22
 8001a80:	d042      	beq.n	8001b08 <??ZbZclAttrDefaultWrite_4>
 8001a82:	2823      	cmp	r0, #35	; 0x23
 8001a84:	d043      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001a86:	2824      	cmp	r0, #36	; 0x24
 8001a88:	d044      	beq.n	8001b14 <??ZbZclAttrDefaultWrite_6>
 8001a8a:	2825      	cmp	r0, #37	; 0x25
 8001a8c:	d045      	beq.n	8001b1a <??ZbZclAttrDefaultWrite_7>
 8001a8e:	2826      	cmp	r0, #38	; 0x26
 8001a90:	d046      	beq.n	8001b20 <??ZbZclAttrDefaultWrite_8>
 8001a92:	2827      	cmp	r0, #39	; 0x27
 8001a94:	d047      	beq.n	8001b26 <??ZbZclAttrDefaultWrite_9>
 8001a96:	2828      	cmp	r0, #40	; 0x28
 8001a98:	d030      	beq.n	8001afc <??ZbZclAttrDefaultWrite_2>
 8001a9a:	2829      	cmp	r0, #41	; 0x29
 8001a9c:	d031      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001a9e:	282a      	cmp	r0, #42	; 0x2a
 8001aa0:	d032      	beq.n	8001b08 <??ZbZclAttrDefaultWrite_4>
 8001aa2:	282b      	cmp	r0, #43	; 0x2b
 8001aa4:	d033      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001aa6:	282c      	cmp	r0, #44	; 0x2c
 8001aa8:	d034      	beq.n	8001b14 <??ZbZclAttrDefaultWrite_6>
 8001aaa:	282d      	cmp	r0, #45	; 0x2d
 8001aac:	d035      	beq.n	8001b1a <??ZbZclAttrDefaultWrite_7>
 8001aae:	282e      	cmp	r0, #46	; 0x2e
 8001ab0:	d036      	beq.n	8001b20 <??ZbZclAttrDefaultWrite_8>
 8001ab2:	282f      	cmp	r0, #47	; 0x2f
 8001ab4:	d037      	beq.n	8001b26 <??ZbZclAttrDefaultWrite_9>
 8001ab6:	2830      	cmp	r0, #48	; 0x30
 8001ab8:	d020      	beq.n	8001afc <??ZbZclAttrDefaultWrite_2>
 8001aba:	2831      	cmp	r0, #49	; 0x31
 8001abc:	d021      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001abe:	2838      	cmp	r0, #56	; 0x38
 8001ac0:	d01f      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001ac2:	2839      	cmp	r0, #57	; 0x39
 8001ac4:	d023      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001ac6:	283a      	cmp	r0, #58	; 0x3a
 8001ac8:	d02d      	beq.n	8001b26 <??ZbZclAttrDefaultWrite_9>
 8001aca:	2841      	cmp	r0, #65	; 0x41
 8001acc:	d031      	beq.n	8001b32 <??ZbZclAttrDefaultWrite_10>
 8001ace:	2842      	cmp	r0, #66	; 0x42
 8001ad0:	d02f      	beq.n	8001b32 <??ZbZclAttrDefaultWrite_10>
 8001ad2:	2843      	cmp	r0, #67	; 0x43
 8001ad4:	d049      	beq.n	8001b6a <??ZbZclAttrDefaultWrite_11>
 8001ad6:	2844      	cmp	r0, #68	; 0x44
 8001ad8:	d047      	beq.n	8001b6a <??ZbZclAttrDefaultWrite_11>
 8001ada:	28e0      	cmp	r0, #224	; 0xe0
 8001adc:	d017      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001ade:	28e1      	cmp	r0, #225	; 0xe1
 8001ae0:	d015      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001ae2:	28e2      	cmp	r0, #226	; 0xe2
 8001ae4:	d013      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001ae6:	28e8      	cmp	r0, #232	; 0xe8
 8001ae8:	d00b      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001aea:	28e9      	cmp	r0, #233	; 0xe9
 8001aec:	d009      	beq.n	8001b02 <??ZbZclAttrDefaultWrite_3>
 8001aee:	28ea      	cmp	r0, #234	; 0xea
 8001af0:	d00d      	beq.n	8001b0e <??ZbZclAttrDefaultWrite_5>
 8001af2:	28f0      	cmp	r0, #240	; 0xf0
 8001af4:	d017      	beq.n	8001b26 <??ZbZclAttrDefaultWrite_9>
 8001af6:	28f1      	cmp	r0, #241	; 0xf1
 8001af8:	d018      	beq.n	8001b2c <??ZbZclAttrDefaultWrite_12>
 8001afa:	e058      	b.n	8001bae <??ZbZclAttrDefaultWrite_13>

08001afc <??ZbZclAttrDefaultWrite_2>:
 8001afc:	2001      	movs	r0, #1
 8001afe:	0005      	movs	r5, r0
 8001b00:	e057      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b02 <??ZbZclAttrDefaultWrite_3>:
 8001b02:	2002      	movs	r0, #2
 8001b04:	0005      	movs	r5, r0
 8001b06:	e054      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b08 <??ZbZclAttrDefaultWrite_4>:
 8001b08:	2003      	movs	r0, #3
 8001b0a:	0005      	movs	r5, r0
 8001b0c:	e051      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b0e <??ZbZclAttrDefaultWrite_5>:
 8001b0e:	2004      	movs	r0, #4
 8001b10:	0005      	movs	r5, r0
 8001b12:	e04e      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b14 <??ZbZclAttrDefaultWrite_6>:
 8001b14:	2005      	movs	r0, #5
 8001b16:	0005      	movs	r5, r0
 8001b18:	e04b      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b1a <??ZbZclAttrDefaultWrite_7>:
 8001b1a:	2006      	movs	r0, #6
 8001b1c:	0005      	movs	r5, r0
 8001b1e:	e048      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b20 <??ZbZclAttrDefaultWrite_8>:
 8001b20:	2007      	movs	r0, #7
 8001b22:	0005      	movs	r5, r0
 8001b24:	e045      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b26 <??ZbZclAttrDefaultWrite_9>:
 8001b26:	2008      	movs	r0, #8
 8001b28:	0005      	movs	r5, r0
 8001b2a:	e042      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b2c <??ZbZclAttrDefaultWrite_12>:
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	0005      	movs	r5, r0
 8001b30:	e03f      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b32 <??ZbZclAttrDefaultWrite_10>:
 8001b32:	6938      	ldr	r0, [r7, #16]
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d102      	bne.n	8001b3e <??ZbZclAttrDefaultWrite_15>
 8001b38:	2089      	movs	r0, #137	; 0x89
 8001b3a:	4681      	mov	r9, r0
 8001b3c:	e039      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b3e <??ZbZclAttrDefaultWrite_15>:
 8001b3e:	7820      	ldrb	r0, [r4, #0]
 8001b40:	0001      	movs	r1, r0
 8001b42:	b2c9      	uxtb	r1, r1
 8001b44:	29ff      	cmp	r1, #255	; 0xff
 8001b46:	d105      	bne.n	8001b54 <??ZbZclAttrDefaultWrite_16>
 8001b48:	21ff      	movs	r1, #255	; 0xff
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	7011      	strb	r1, [r2, #0]
 8001b4e:	2100      	movs	r1, #0
 8001b50:	000d      	movs	r5, r1
 8001b52:	e02e      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b54 <??ZbZclAttrDefaultWrite_16>:
 8001b54:	0001      	movs	r1, r0
 8001b56:	b2c9      	uxtb	r1, r1
 8001b58:	1c49      	adds	r1, r1, #1
 8001b5a:	000d      	movs	r5, r1
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	42a9      	cmp	r1, r5
 8001b60:	d202      	bcs.n	8001b68 <??ZbZclAttrDefaultWrite_17>
 8001b62:	2189      	movs	r1, #137	; 0x89
 8001b64:	4689      	mov	r9, r1
 8001b66:	e024      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b68 <??ZbZclAttrDefaultWrite_17>:
 8001b68:	e023      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b6a <??ZbZclAttrDefaultWrite_11>:
 8001b6a:	6938      	ldr	r0, [r7, #16]
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d202      	bcs.n	8001b76 <??ZbZclAttrDefaultWrite_18>
 8001b70:	2089      	movs	r0, #137	; 0x89
 8001b72:	4681      	mov	r9, r0
 8001b74:	e01d      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b76 <??ZbZclAttrDefaultWrite_18>:
 8001b76:	0020      	movs	r0, r4
 8001b78:	f7ff fb41 	bl	80011fe <pletoh16>
 8001b7c:	4682      	mov	sl, r0
 8001b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b82:	4650      	mov	r0, sl
 8001b84:	000a      	movs	r2, r1
 8001b86:	b280      	uxth	r0, r0
 8001b88:	4290      	cmp	r0, r2
 8001b8a:	d105      	bne.n	8001b98 <??ZbZclAttrDefaultWrite_19>
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fb82 	bl	8001296 <putle16>
 8001b92:	2000      	movs	r0, #0
 8001b94:	0005      	movs	r5, r0
 8001b96:	e00c      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001b98 <??ZbZclAttrDefaultWrite_19>:
 8001b98:	4650      	mov	r0, sl
 8001b9a:	b280      	uxth	r0, r0
 8001b9c:	1c80      	adds	r0, r0, #2
 8001b9e:	0005      	movs	r5, r0
 8001ba0:	6938      	ldr	r0, [r7, #16]
 8001ba2:	42a8      	cmp	r0, r5
 8001ba4:	d202      	bcs.n	8001bac <??ZbZclAttrDefaultWrite_20>
 8001ba6:	2089      	movs	r0, #137	; 0x89
 8001ba8:	4681      	mov	r9, r0
 8001baa:	e002      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001bac <??ZbZclAttrDefaultWrite_20>:
 8001bac:	e001      	b.n	8001bb2 <??ZbZclAttrDefaultWrite_14>

08001bae <??ZbZclAttrDefaultWrite_13>:
 8001bae:	2086      	movs	r0, #134	; 0x86
 8001bb0:	4681      	mov	r9, r0

08001bb2 <??ZbZclAttrDefaultWrite_14>:
 8001bb2:	4648      	mov	r0, r9
 8001bb4:	b2c0      	uxtb	r0, r0
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d10e      	bne.n	8001bd8 <??ZbZclAttrDefaultWrite_21>
 8001bba:	4640      	mov	r0, r8
 8001bbc:	b280      	uxth	r0, r0
 8001bbe:	07c0      	lsls	r0, r0, #31
 8001bc0:	d40a      	bmi.n	8001bd8 <??ZbZclAttrDefaultWrite_21>
 8001bc2:	2d00      	cmp	r5, #0
 8001bc4:	d008      	beq.n	8001bd8 <??ZbZclAttrDefaultWrite_21>
 8001bc6:	9500      	str	r5, [sp, #0]
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8001bce:	9a00      	ldr	r2, [sp, #0]
 8001bd0:	4651      	mov	r1, sl
 8001bd2:	4658      	mov	r0, fp
 8001bd4:	f00f f88b 	bl	8010cee <__aeabi_memcpy>

08001bd8 <??ZbZclAttrDefaultWrite_21>:
 8001bd8:	4648      	mov	r0, r9
 8001bda:	b2c0      	uxtb	r0, r0

08001bdc <??ZbZclAttrDefaultWrite_1>:
 8001bdc:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001be0 <ZbZclAttrDefaultValue>:
 8001be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	0004      	movs	r4, r0
 8001be6:	4688      	mov	r8, r1
 8001be8:	0015      	movs	r5, r2
 8001bea:	2600      	movs	r6, #0
 8001bec:	f05f 37ff 	movs.w	r7, #4294967295
 8001bf0:	0020      	movs	r0, r4
 8001bf2:	b2c0      	uxtb	r0, r0
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	f000 80a1 	beq.w	8001d3c <??ZbZclAttrDefaultValue_0>
 8001bfa:	2808      	cmp	r0, #8
 8001bfc:	f000 80e7 	beq.w	8001dce <??ZbZclAttrDefaultValue_1>
 8001c00:	2809      	cmp	r0, #9
 8001c02:	f000 80da 	beq.w	8001dba <??ZbZclAttrDefaultValue_2>
 8001c06:	280a      	cmp	r0, #10
 8001c08:	f000 80cd 	beq.w	8001da6 <??ZbZclAttrDefaultValue_3>
 8001c0c:	280b      	cmp	r0, #11
 8001c0e:	f000 80c0 	beq.w	8001d92 <??ZbZclAttrDefaultValue_4>
 8001c12:	280c      	cmp	r0, #12
 8001c14:	f000 80b3 	beq.w	8001d7e <??ZbZclAttrDefaultValue_5>
 8001c18:	280d      	cmp	r0, #13
 8001c1a:	f000 80a6 	beq.w	8001d6a <??ZbZclAttrDefaultValue_6>
 8001c1e:	280e      	cmp	r0, #14
 8001c20:	f000 8099 	beq.w	8001d56 <??ZbZclAttrDefaultValue_7>
 8001c24:	280f      	cmp	r0, #15
 8001c26:	f000 808c 	beq.w	8001d42 <??ZbZclAttrDefaultValue_8>
 8001c2a:	2810      	cmp	r0, #16
 8001c2c:	f000 80db 	beq.w	8001de6 <??ZbZclAttrDefaultValue_9>
 8001c30:	2818      	cmp	r0, #24
 8001c32:	f000 8126 	beq.w	8001e82 <??ZbZclAttrDefaultValue_10>
 8001c36:	2819      	cmp	r0, #25
 8001c38:	f000 8119 	beq.w	8001e6e <??ZbZclAttrDefaultValue_11>
 8001c3c:	281a      	cmp	r0, #26
 8001c3e:	f000 810c 	beq.w	8001e5a <??ZbZclAttrDefaultValue_12>
 8001c42:	281b      	cmp	r0, #27
 8001c44:	f000 80ff 	beq.w	8001e46 <??ZbZclAttrDefaultValue_13>
 8001c48:	281c      	cmp	r0, #28
 8001c4a:	f000 80f2 	beq.w	8001e32 <??ZbZclAttrDefaultValue_14>
 8001c4e:	281d      	cmp	r0, #29
 8001c50:	f000 80e5 	beq.w	8001e1e <??ZbZclAttrDefaultValue_15>
 8001c54:	281e      	cmp	r0, #30
 8001c56:	f000 80d8 	beq.w	8001e0a <??ZbZclAttrDefaultValue_16>
 8001c5a:	281f      	cmp	r0, #31
 8001c5c:	f000 80cb 	beq.w	8001df6 <??ZbZclAttrDefaultValue_17>
 8001c60:	2820      	cmp	r0, #32
 8001c62:	f000 80b4 	beq.w	8001dce <??ZbZclAttrDefaultValue_1>
 8001c66:	2821      	cmp	r0, #33	; 0x21
 8001c68:	f000 80a7 	beq.w	8001dba <??ZbZclAttrDefaultValue_2>
 8001c6c:	2822      	cmp	r0, #34	; 0x22
 8001c6e:	f000 809a 	beq.w	8001da6 <??ZbZclAttrDefaultValue_3>
 8001c72:	2823      	cmp	r0, #35	; 0x23
 8001c74:	f000 808d 	beq.w	8001d92 <??ZbZclAttrDefaultValue_4>
 8001c78:	2824      	cmp	r0, #36	; 0x24
 8001c7a:	f000 8080 	beq.w	8001d7e <??ZbZclAttrDefaultValue_5>
 8001c7e:	2825      	cmp	r0, #37	; 0x25
 8001c80:	d073      	beq.n	8001d6a <??ZbZclAttrDefaultValue_6>
 8001c82:	2826      	cmp	r0, #38	; 0x26
 8001c84:	d067      	beq.n	8001d56 <??ZbZclAttrDefaultValue_7>
 8001c86:	2827      	cmp	r0, #39	; 0x27
 8001c88:	d05b      	beq.n	8001d42 <??ZbZclAttrDefaultValue_8>
 8001c8a:	2828      	cmp	r0, #40	; 0x28
 8001c8c:	f000 814b 	beq.w	8001f26 <??ZbZclAttrDefaultValue_18>
 8001c90:	2829      	cmp	r0, #41	; 0x29
 8001c92:	f000 813e 	beq.w	8001f12 <??ZbZclAttrDefaultValue_19>
 8001c96:	282a      	cmp	r0, #42	; 0x2a
 8001c98:	f000 8131 	beq.w	8001efe <??ZbZclAttrDefaultValue_20>
 8001c9c:	282b      	cmp	r0, #43	; 0x2b
 8001c9e:	f000 8124 	beq.w	8001eea <??ZbZclAttrDefaultValue_21>
 8001ca2:	282c      	cmp	r0, #44	; 0x2c
 8001ca4:	f000 8117 	beq.w	8001ed6 <??ZbZclAttrDefaultValue_22>
 8001ca8:	282d      	cmp	r0, #45	; 0x2d
 8001caa:	f000 810a 	beq.w	8001ec2 <??ZbZclAttrDefaultValue_23>
 8001cae:	282e      	cmp	r0, #46	; 0x2e
 8001cb0:	f000 80fd 	beq.w	8001eae <??ZbZclAttrDefaultValue_24>
 8001cb4:	282f      	cmp	r0, #47	; 0x2f
 8001cb6:	f000 80f0 	beq.w	8001e9a <??ZbZclAttrDefaultValue_25>
 8001cba:	2830      	cmp	r0, #48	; 0x30
 8001cbc:	f000 8087 	beq.w	8001dce <??ZbZclAttrDefaultValue_1>
 8001cc0:	2831      	cmp	r0, #49	; 0x31
 8001cc2:	d07a      	beq.n	8001dba <??ZbZclAttrDefaultValue_2>
 8001cc4:	2838      	cmp	r0, #56	; 0x38
 8001cc6:	f000 813a 	beq.w	8001f3e <??ZbZclAttrDefaultValue_26>
 8001cca:	2839      	cmp	r0, #57	; 0x39
 8001ccc:	f000 8142 	beq.w	8001f54 <??ZbZclAttrDefaultValue_27>
 8001cd0:	283a      	cmp	r0, #58	; 0x3a
 8001cd2:	f000 8149 	beq.w	8001f68 <??ZbZclAttrDefaultValue_28>
 8001cd6:	2841      	cmp	r0, #65	; 0x41
 8001cd8:	f000 8152 	beq.w	8001f80 <??ZbZclAttrDefaultValue_29>
 8001cdc:	2842      	cmp	r0, #66	; 0x42
 8001cde:	f000 8159 	beq.w	8001f94 <??ZbZclAttrDefaultValue_30>
 8001ce2:	2843      	cmp	r0, #67	; 0x43
 8001ce4:	f000 8160 	beq.w	8001fa8 <??ZbZclAttrDefaultValue_31>
 8001ce8:	2844      	cmp	r0, #68	; 0x44
 8001cea:	f000 8168 	beq.w	8001fbe <??ZbZclAttrDefaultValue_32>
 8001cee:	2848      	cmp	r0, #72	; 0x48
 8001cf0:	f000 818b 	beq.w	800200a <??ZbZclAttrDefaultValue_33>
 8001cf4:	284c      	cmp	r0, #76	; 0x4c
 8001cf6:	f000 8192 	beq.w	800201e <??ZbZclAttrDefaultValue_34>
 8001cfa:	2850      	cmp	r0, #80	; 0x50
 8001cfc:	f000 8199 	beq.w	8002032 <??ZbZclAttrDefaultValue_35>
 8001d00:	2851      	cmp	r0, #81	; 0x51
 8001d02:	f000 81a0 	beq.w	8002046 <??ZbZclAttrDefaultValue_36>
 8001d06:	28e0      	cmp	r0, #224	; 0xe0
 8001d08:	f000 81a7 	beq.w	800205a <??ZbZclAttrDefaultValue_37>
 8001d0c:	28e1      	cmp	r0, #225	; 0xe1
 8001d0e:	f000 81ae 	beq.w	800206e <??ZbZclAttrDefaultValue_38>
 8001d12:	28e2      	cmp	r0, #226	; 0xe2
 8001d14:	f000 81b5 	beq.w	8002082 <??ZbZclAttrDefaultValue_39>
 8001d18:	28e8      	cmp	r0, #232	; 0xe8
 8001d1a:	f000 81bc 	beq.w	8002096 <??ZbZclAttrDefaultValue_40>
 8001d1e:	28e9      	cmp	r0, #233	; 0xe9
 8001d20:	f000 81c3 	beq.w	80020aa <??ZbZclAttrDefaultValue_41>
 8001d24:	28ea      	cmp	r0, #234	; 0xea
 8001d26:	f000 81ca 	beq.w	80020be <??ZbZclAttrDefaultValue_42>
 8001d2a:	28f0      	cmp	r0, #240	; 0xf0
 8001d2c:	f000 8152 	beq.w	8001fd4 <??ZbZclAttrDefaultValue_43>
 8001d30:	28f1      	cmp	r0, #241	; 0xf1
 8001d32:	f000 815b 	beq.w	8001fec <??ZbZclAttrDefaultValue_44>
 8001d36:	28ff      	cmp	r0, #255	; 0xff
 8001d38:	f040 81cb 	bne.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001d3c <??ZbZclAttrDefaultValue_0>:
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	0007      	movs	r7, r0
 8001d40:	e1c7      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001d42 <??ZbZclAttrDefaultValue_8>:
 8001d42:	1c70      	adds	r0, r6, #1
 8001d44:	4285      	cmp	r5, r0
 8001d46:	f0c0 81c4 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001d4a <??ZbZclAttrDefaultValue_47>:
 8001d4a:	20ff      	movs	r0, #255	; 0xff
 8001d4c:	f888 0000 	strb.w	r0, [r8]
 8001d50:	f118 0801 	adds.w	r8, r8, #1
 8001d54:	1c76      	adds	r6, r6, #1

08001d56 <??ZbZclAttrDefaultValue_7>:
 8001d56:	1c70      	adds	r0, r6, #1
 8001d58:	4285      	cmp	r5, r0
 8001d5a:	f0c0 81ba 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001d5e <??ZbZclAttrDefaultValue_48>:
 8001d5e:	20ff      	movs	r0, #255	; 0xff
 8001d60:	f888 0000 	strb.w	r0, [r8]
 8001d64:	f118 0801 	adds.w	r8, r8, #1
 8001d68:	1c76      	adds	r6, r6, #1

08001d6a <??ZbZclAttrDefaultValue_6>:
 8001d6a:	1c70      	adds	r0, r6, #1
 8001d6c:	4285      	cmp	r5, r0
 8001d6e:	f0c0 81b0 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001d72 <??ZbZclAttrDefaultValue_49>:
 8001d72:	20ff      	movs	r0, #255	; 0xff
 8001d74:	f888 0000 	strb.w	r0, [r8]
 8001d78:	f118 0801 	adds.w	r8, r8, #1
 8001d7c:	1c76      	adds	r6, r6, #1

08001d7e <??ZbZclAttrDefaultValue_5>:
 8001d7e:	1c70      	adds	r0, r6, #1
 8001d80:	4285      	cmp	r5, r0
 8001d82:	f0c0 81a6 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001d86 <??ZbZclAttrDefaultValue_50>:
 8001d86:	20ff      	movs	r0, #255	; 0xff
 8001d88:	f888 0000 	strb.w	r0, [r8]
 8001d8c:	f118 0801 	adds.w	r8, r8, #1
 8001d90:	1c76      	adds	r6, r6, #1

08001d92 <??ZbZclAttrDefaultValue_4>:
 8001d92:	1c70      	adds	r0, r6, #1
 8001d94:	4285      	cmp	r5, r0
 8001d96:	f0c0 819c 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001d9a <??ZbZclAttrDefaultValue_51>:
 8001d9a:	20ff      	movs	r0, #255	; 0xff
 8001d9c:	f888 0000 	strb.w	r0, [r8]
 8001da0:	f118 0801 	adds.w	r8, r8, #1
 8001da4:	1c76      	adds	r6, r6, #1

08001da6 <??ZbZclAttrDefaultValue_3>:
 8001da6:	1c70      	adds	r0, r6, #1
 8001da8:	4285      	cmp	r5, r0
 8001daa:	f0c0 8192 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001dae <??ZbZclAttrDefaultValue_52>:
 8001dae:	20ff      	movs	r0, #255	; 0xff
 8001db0:	f888 0000 	strb.w	r0, [r8]
 8001db4:	f118 0801 	adds.w	r8, r8, #1
 8001db8:	1c76      	adds	r6, r6, #1

08001dba <??ZbZclAttrDefaultValue_2>:
 8001dba:	1c70      	adds	r0, r6, #1
 8001dbc:	4285      	cmp	r5, r0
 8001dbe:	f0c0 8188 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001dc2 <??ZbZclAttrDefaultValue_53>:
 8001dc2:	20ff      	movs	r0, #255	; 0xff
 8001dc4:	f888 0000 	strb.w	r0, [r8]
 8001dc8:	f118 0801 	adds.w	r8, r8, #1
 8001dcc:	1c76      	adds	r6, r6, #1

08001dce <??ZbZclAttrDefaultValue_1>:
 8001dce:	1c70      	adds	r0, r6, #1
 8001dd0:	4285      	cmp	r5, r0
 8001dd2:	f0c0 817e 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001dd6 <??ZbZclAttrDefaultValue_54>:
 8001dd6:	20ff      	movs	r0, #255	; 0xff
 8001dd8:	f888 0000 	strb.w	r0, [r8]
 8001ddc:	f118 0801 	adds.w	r8, r8, #1
 8001de0:	1c76      	adds	r6, r6, #1
 8001de2:	0037      	movs	r7, r6
 8001de4:	e175      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001de6 <??ZbZclAttrDefaultValue_9>:
 8001de6:	2000      	movs	r0, #0
 8001de8:	f888 0000 	strb.w	r0, [r8]
 8001dec:	f118 0801 	adds.w	r8, r8, #1
 8001df0:	2001      	movs	r0, #1
 8001df2:	0007      	movs	r7, r0
 8001df4:	e16d      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001df6 <??ZbZclAttrDefaultValue_17>:
 8001df6:	1c70      	adds	r0, r6, #1
 8001df8:	4285      	cmp	r5, r0
 8001dfa:	f0c0 816a 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001dfe <??ZbZclAttrDefaultValue_55>:
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f888 0000 	strb.w	r0, [r8]
 8001e04:	f118 0801 	adds.w	r8, r8, #1
 8001e08:	1c76      	adds	r6, r6, #1

08001e0a <??ZbZclAttrDefaultValue_16>:
 8001e0a:	1c70      	adds	r0, r6, #1
 8001e0c:	4285      	cmp	r5, r0
 8001e0e:	f0c0 8160 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e12 <??ZbZclAttrDefaultValue_56>:
 8001e12:	2000      	movs	r0, #0
 8001e14:	f888 0000 	strb.w	r0, [r8]
 8001e18:	f118 0801 	adds.w	r8, r8, #1
 8001e1c:	1c76      	adds	r6, r6, #1

08001e1e <??ZbZclAttrDefaultValue_15>:
 8001e1e:	1c70      	adds	r0, r6, #1
 8001e20:	4285      	cmp	r5, r0
 8001e22:	f0c0 8156 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e26 <??ZbZclAttrDefaultValue_57>:
 8001e26:	2000      	movs	r0, #0
 8001e28:	f888 0000 	strb.w	r0, [r8]
 8001e2c:	f118 0801 	adds.w	r8, r8, #1
 8001e30:	1c76      	adds	r6, r6, #1

08001e32 <??ZbZclAttrDefaultValue_14>:
 8001e32:	1c70      	adds	r0, r6, #1
 8001e34:	4285      	cmp	r5, r0
 8001e36:	f0c0 814c 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e3a <??ZbZclAttrDefaultValue_58>:
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f888 0000 	strb.w	r0, [r8]
 8001e40:	f118 0801 	adds.w	r8, r8, #1
 8001e44:	1c76      	adds	r6, r6, #1

08001e46 <??ZbZclAttrDefaultValue_13>:
 8001e46:	1c70      	adds	r0, r6, #1
 8001e48:	4285      	cmp	r5, r0
 8001e4a:	f0c0 8142 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e4e <??ZbZclAttrDefaultValue_59>:
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f888 0000 	strb.w	r0, [r8]
 8001e54:	f118 0801 	adds.w	r8, r8, #1
 8001e58:	1c76      	adds	r6, r6, #1

08001e5a <??ZbZclAttrDefaultValue_12>:
 8001e5a:	1c70      	adds	r0, r6, #1
 8001e5c:	4285      	cmp	r5, r0
 8001e5e:	f0c0 8138 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e62 <??ZbZclAttrDefaultValue_60>:
 8001e62:	2000      	movs	r0, #0
 8001e64:	f888 0000 	strb.w	r0, [r8]
 8001e68:	f118 0801 	adds.w	r8, r8, #1
 8001e6c:	1c76      	adds	r6, r6, #1

08001e6e <??ZbZclAttrDefaultValue_11>:
 8001e6e:	1c70      	adds	r0, r6, #1
 8001e70:	4285      	cmp	r5, r0
 8001e72:	f0c0 812e 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e76 <??ZbZclAttrDefaultValue_61>:
 8001e76:	2000      	movs	r0, #0
 8001e78:	f888 0000 	strb.w	r0, [r8]
 8001e7c:	f118 0801 	adds.w	r8, r8, #1
 8001e80:	1c76      	adds	r6, r6, #1

08001e82 <??ZbZclAttrDefaultValue_10>:
 8001e82:	1c70      	adds	r0, r6, #1
 8001e84:	4285      	cmp	r5, r0
 8001e86:	f0c0 8124 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001e8a <??ZbZclAttrDefaultValue_62>:
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f888 0000 	strb.w	r0, [r8]
 8001e90:	f118 0801 	adds.w	r8, r8, #1
 8001e94:	1c76      	adds	r6, r6, #1
 8001e96:	0037      	movs	r7, r6
 8001e98:	e11b      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001e9a <??ZbZclAttrDefaultValue_25>:
 8001e9a:	1c70      	adds	r0, r6, #1
 8001e9c:	4285      	cmp	r5, r0
 8001e9e:	f0c0 8118 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001ea2 <??ZbZclAttrDefaultValue_63>:
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f888 0000 	strb.w	r0, [r8]
 8001ea8:	f118 0801 	adds.w	r8, r8, #1
 8001eac:	1c76      	adds	r6, r6, #1

08001eae <??ZbZclAttrDefaultValue_24>:
 8001eae:	1c70      	adds	r0, r6, #1
 8001eb0:	4285      	cmp	r5, r0
 8001eb2:	f0c0 810e 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001eb6 <??ZbZclAttrDefaultValue_64>:
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f888 0000 	strb.w	r0, [r8]
 8001ebc:	f118 0801 	adds.w	r8, r8, #1
 8001ec0:	1c76      	adds	r6, r6, #1

08001ec2 <??ZbZclAttrDefaultValue_23>:
 8001ec2:	1c70      	adds	r0, r6, #1
 8001ec4:	4285      	cmp	r5, r0
 8001ec6:	f0c0 8104 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001eca <??ZbZclAttrDefaultValue_65>:
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f888 0000 	strb.w	r0, [r8]
 8001ed0:	f118 0801 	adds.w	r8, r8, #1
 8001ed4:	1c76      	adds	r6, r6, #1

08001ed6 <??ZbZclAttrDefaultValue_22>:
 8001ed6:	1c70      	adds	r0, r6, #1
 8001ed8:	4285      	cmp	r5, r0
 8001eda:	f0c0 80fa 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001ede <??ZbZclAttrDefaultValue_66>:
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f888 0000 	strb.w	r0, [r8]
 8001ee4:	f118 0801 	adds.w	r8, r8, #1
 8001ee8:	1c76      	adds	r6, r6, #1

08001eea <??ZbZclAttrDefaultValue_21>:
 8001eea:	1c70      	adds	r0, r6, #1
 8001eec:	4285      	cmp	r5, r0
 8001eee:	f0c0 80f0 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001ef2 <??ZbZclAttrDefaultValue_67>:
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f888 0000 	strb.w	r0, [r8]
 8001ef8:	f118 0801 	adds.w	r8, r8, #1
 8001efc:	1c76      	adds	r6, r6, #1

08001efe <??ZbZclAttrDefaultValue_20>:
 8001efe:	1c70      	adds	r0, r6, #1
 8001f00:	4285      	cmp	r5, r0
 8001f02:	f0c0 80e6 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f06 <??ZbZclAttrDefaultValue_68>:
 8001f06:	2000      	movs	r0, #0
 8001f08:	f888 0000 	strb.w	r0, [r8]
 8001f0c:	f118 0801 	adds.w	r8, r8, #1
 8001f10:	1c76      	adds	r6, r6, #1

08001f12 <??ZbZclAttrDefaultValue_19>:
 8001f12:	1c70      	adds	r0, r6, #1
 8001f14:	4285      	cmp	r5, r0
 8001f16:	f0c0 80dc 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f1a <??ZbZclAttrDefaultValue_69>:
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f888 0000 	strb.w	r0, [r8]
 8001f20:	f118 0801 	adds.w	r8, r8, #1
 8001f24:	1c76      	adds	r6, r6, #1

08001f26 <??ZbZclAttrDefaultValue_18>:
 8001f26:	1c70      	adds	r0, r6, #1
 8001f28:	4285      	cmp	r5, r0
 8001f2a:	f0c0 80d2 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f2e <??ZbZclAttrDefaultValue_70>:
 8001f2e:	2080      	movs	r0, #128	; 0x80
 8001f30:	f888 0000 	strb.w	r0, [r8]
 8001f34:	f118 0801 	adds.w	r8, r8, #1
 8001f38:	1c76      	adds	r6, r6, #1
 8001f3a:	0037      	movs	r7, r6
 8001f3c:	e0c9      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001f3e <??ZbZclAttrDefaultValue_26>:
 8001f3e:	2d02      	cmp	r5, #2
 8001f40:	f0c0 80c7 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f44 <??ZbZclAttrDefaultValue_71>:
 8001f44:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001f48:	4640      	mov	r0, r8
 8001f4a:	f7ff f9a4 	bl	8001296 <putle16>
 8001f4e:	2002      	movs	r0, #2
 8001f50:	0007      	movs	r7, r0
 8001f52:	e0be      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001f54 <??ZbZclAttrDefaultValue_27>:
 8001f54:	2d04      	cmp	r5, #4
 8001f56:	f0c0 80bc 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f5a <??ZbZclAttrDefaultValue_72>:
 8001f5a:	495f      	ldr	r1, [pc, #380]	; (80020d8 <??DataTable1>)
 8001f5c:	4640      	mov	r0, r8
 8001f5e:	f7ff f9ac 	bl	80012ba <putle32>
 8001f62:	2004      	movs	r0, #4
 8001f64:	0007      	movs	r7, r0
 8001f66:	e0b4      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001f68 <??ZbZclAttrDefaultValue_28>:
 8001f68:	2d08      	cmp	r5, #8
 8001f6a:	f0c0 80b2 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f6e <??ZbZclAttrDefaultValue_73>:
 8001f6e:	f07f 0201 	mvns.w	r2, #1
 8001f72:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <??DataTable1_1>)
 8001f74:	4640      	mov	r0, r8
 8001f76:	f7ff f9d3 	bl	8001320 <putle64>
 8001f7a:	2008      	movs	r0, #8
 8001f7c:	0007      	movs	r7, r0
 8001f7e:	e0a8      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001f80 <??ZbZclAttrDefaultValue_29>:
 8001f80:	2d02      	cmp	r5, #2
 8001f82:	f0c0 80a6 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f86 <??ZbZclAttrDefaultValue_74>:
 8001f86:	21ff      	movs	r1, #255	; 0xff
 8001f88:	4640      	mov	r0, r8
 8001f8a:	f7ff f984 	bl	8001296 <putle16>
 8001f8e:	2002      	movs	r0, #2
 8001f90:	0007      	movs	r7, r0
 8001f92:	e09e      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001f94 <??ZbZclAttrDefaultValue_30>:
 8001f94:	2d02      	cmp	r5, #2
 8001f96:	f0c0 809c 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001f9a <??ZbZclAttrDefaultValue_75>:
 8001f9a:	21ff      	movs	r1, #255	; 0xff
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	f7ff f97a 	bl	8001296 <putle16>
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	0007      	movs	r7, r0
 8001fa6:	e094      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001fa8 <??ZbZclAttrDefaultValue_31>:
 8001fa8:	2d04      	cmp	r5, #4
 8001faa:	f0c0 8092 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001fae <??ZbZclAttrDefaultValue_76>:
 8001fae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	f7ff f981 	bl	80012ba <putle32>
 8001fb8:	2004      	movs	r0, #4
 8001fba:	0007      	movs	r7, r0
 8001fbc:	e089      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001fbe <??ZbZclAttrDefaultValue_32>:
 8001fbe:	2d04      	cmp	r5, #4
 8001fc0:	f0c0 8087 	bcc.w	80020d2 <??ZbZclAttrDefaultValue_45>

08001fc4 <??ZbZclAttrDefaultValue_77>:
 8001fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fc8:	4640      	mov	r0, r8
 8001fca:	f7ff f976 	bl	80012ba <putle32>
 8001fce:	2004      	movs	r0, #4
 8001fd0:	0007      	movs	r7, r0
 8001fd2:	e07e      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001fd4 <??ZbZclAttrDefaultValue_43>:
 8001fd4:	2d08      	cmp	r5, #8
 8001fd6:	d37c      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001fd8 <??ZbZclAttrDefaultValue_78>:
 8001fd8:	f05f 32ff 	movs.w	r2, #4294967295
 8001fdc:	f05f 33ff 	movs.w	r3, #4294967295
 8001fe0:	4640      	mov	r0, r8
 8001fe2:	f7ff f99d 	bl	8001320 <putle64>
 8001fe6:	2008      	movs	r0, #8
 8001fe8:	0007      	movs	r7, r0
 8001fea:	e072      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001fec <??ZbZclAttrDefaultValue_44>:
 8001fec:	2d10      	cmp	r5, #16
 8001fee:	d370      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

08001ff0 <??ZbZclAttrDefaultValue_79>:
 8001ff0:	f05f 0910 	movs.w	r9, #16
 8001ff4:	f05f 0a00 	movs.w	sl, #0
 8001ff8:	46c3      	mov	fp, r8
 8001ffa:	4652      	mov	r2, sl
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	4658      	mov	r0, fp
 8002000:	f003 fe47 	bl	8005c92 <__aeabi_memset>
 8002004:	2010      	movs	r0, #16
 8002006:	0007      	movs	r7, r0
 8002008:	e063      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800200a <??ZbZclAttrDefaultValue_33>:
 800200a:	2d02      	cmp	r5, #2
 800200c:	d361      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800200e <??ZbZclAttrDefaultValue_80>:
 800200e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002012:	4640      	mov	r0, r8
 8002014:	f7ff f93f 	bl	8001296 <putle16>
 8002018:	2002      	movs	r0, #2
 800201a:	0007      	movs	r7, r0
 800201c:	e059      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800201e <??ZbZclAttrDefaultValue_34>:
 800201e:	2d02      	cmp	r5, #2
 8002020:	d357      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002022 <??ZbZclAttrDefaultValue_81>:
 8002022:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002026:	4640      	mov	r0, r8
 8002028:	f7ff f935 	bl	8001296 <putle16>
 800202c:	2002      	movs	r0, #2
 800202e:	0007      	movs	r7, r0
 8002030:	e04f      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002032 <??ZbZclAttrDefaultValue_35>:
 8002032:	2d02      	cmp	r5, #2
 8002034:	d34d      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002036 <??ZbZclAttrDefaultValue_82>:
 8002036:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff f92b 	bl	8001296 <putle16>
 8002040:	2002      	movs	r0, #2
 8002042:	0007      	movs	r7, r0
 8002044:	e045      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002046 <??ZbZclAttrDefaultValue_36>:
 8002046:	2d02      	cmp	r5, #2
 8002048:	d343      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800204a <??ZbZclAttrDefaultValue_83>:
 800204a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800204e:	4640      	mov	r0, r8
 8002050:	f7ff f921 	bl	8001296 <putle16>
 8002054:	2002      	movs	r0, #2
 8002056:	0007      	movs	r7, r0
 8002058:	e03b      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800205a <??ZbZclAttrDefaultValue_37>:
 800205a:	2d04      	cmp	r5, #4
 800205c:	d339      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800205e <??ZbZclAttrDefaultValue_84>:
 800205e:	f05f 31ff 	movs.w	r1, #4294967295
 8002062:	4640      	mov	r0, r8
 8002064:	f7ff f929 	bl	80012ba <putle32>
 8002068:	2004      	movs	r0, #4
 800206a:	0007      	movs	r7, r0
 800206c:	e031      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800206e <??ZbZclAttrDefaultValue_38>:
 800206e:	2d04      	cmp	r5, #4
 8002070:	d32f      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002072 <??ZbZclAttrDefaultValue_85>:
 8002072:	f05f 31ff 	movs.w	r1, #4294967295
 8002076:	4640      	mov	r0, r8
 8002078:	f7ff f91f 	bl	80012ba <putle32>
 800207c:	2004      	movs	r0, #4
 800207e:	0007      	movs	r7, r0
 8002080:	e027      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002082 <??ZbZclAttrDefaultValue_39>:
 8002082:	2d04      	cmp	r5, #4
 8002084:	d325      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002086 <??ZbZclAttrDefaultValue_86>:
 8002086:	f05f 31ff 	movs.w	r1, #4294967295
 800208a:	4640      	mov	r0, r8
 800208c:	f7ff f915 	bl	80012ba <putle32>
 8002090:	2004      	movs	r0, #4
 8002092:	0007      	movs	r7, r0
 8002094:	e01d      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

08002096 <??ZbZclAttrDefaultValue_40>:
 8002096:	2d02      	cmp	r5, #2
 8002098:	d31b      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

0800209a <??ZbZclAttrDefaultValue_87>:
 800209a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800209e:	4640      	mov	r0, r8
 80020a0:	f7ff f8f9 	bl	8001296 <putle16>
 80020a4:	2002      	movs	r0, #2
 80020a6:	0007      	movs	r7, r0
 80020a8:	e013      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

080020aa <??ZbZclAttrDefaultValue_41>:
 80020aa:	2d02      	cmp	r5, #2
 80020ac:	d311      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

080020ae <??ZbZclAttrDefaultValue_88>:
 80020ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020b2:	4640      	mov	r0, r8
 80020b4:	f7ff f8ef 	bl	8001296 <putle16>
 80020b8:	2002      	movs	r0, #2
 80020ba:	0007      	movs	r7, r0
 80020bc:	e009      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

080020be <??ZbZclAttrDefaultValue_42>:
 80020be:	2d04      	cmp	r5, #4
 80020c0:	d307      	bcc.n	80020d2 <??ZbZclAttrDefaultValue_45>

080020c2 <??ZbZclAttrDefaultValue_89>:
 80020c2:	f05f 31ff 	movs.w	r1, #4294967295
 80020c6:	4640      	mov	r0, r8
 80020c8:	f7ff f8f7 	bl	80012ba <putle32>
 80020cc:	2004      	movs	r0, #4
 80020ce:	0007      	movs	r7, r0
 80020d0:	e7ff      	b.n	80020d2 <??ZbZclAttrDefaultValue_45>

080020d2 <??ZbZclAttrDefaultValue_45>:
 80020d2:	0038      	movs	r0, r7
 80020d4:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020d8 <??DataTable1>:
 80020d8:	fffe 00ff                                   ....

080020dc <??DataTable1_1>:
 80020dc:	ffff 001f                                   ....

080020e0 <ZbZclAttrTypeLength>:
 80020e0:	0001      	movs	r1, r0
 80020e2:	0008      	movs	r0, r1
 80020e4:	b2c0      	uxtb	r0, r0
 80020e6:	2800      	cmp	r0, #0
 80020e8:	f000 8081 	beq.w	80021ee <??ZbZclAttrTypeLength_0>
 80020ec:	2808      	cmp	r0, #8
 80020ee:	d06c      	beq.n	80021ca <??ZbZclAttrTypeLength_1>
 80020f0:	2809      	cmp	r0, #9
 80020f2:	d06c      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 80020f4:	280a      	cmp	r0, #10
 80020f6:	d06c      	beq.n	80021d2 <??ZbZclAttrTypeLength_3>
 80020f8:	280b      	cmp	r0, #11
 80020fa:	d06c      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 80020fc:	280c      	cmp	r0, #12
 80020fe:	d06c      	beq.n	80021da <??ZbZclAttrTypeLength_5>
 8002100:	280d      	cmp	r0, #13
 8002102:	d06c      	beq.n	80021de <??ZbZclAttrTypeLength_6>
 8002104:	280e      	cmp	r0, #14
 8002106:	d06c      	beq.n	80021e2 <??ZbZclAttrTypeLength_7>
 8002108:	280f      	cmp	r0, #15
 800210a:	d06c      	beq.n	80021e6 <??ZbZclAttrTypeLength_8>
 800210c:	2810      	cmp	r0, #16
 800210e:	d05c      	beq.n	80021ca <??ZbZclAttrTypeLength_1>
 8002110:	2818      	cmp	r0, #24
 8002112:	d05a      	beq.n	80021ca <??ZbZclAttrTypeLength_1>
 8002114:	2819      	cmp	r0, #25
 8002116:	d05a      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 8002118:	281a      	cmp	r0, #26
 800211a:	d05a      	beq.n	80021d2 <??ZbZclAttrTypeLength_3>
 800211c:	281b      	cmp	r0, #27
 800211e:	d05a      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 8002120:	281c      	cmp	r0, #28
 8002122:	d05a      	beq.n	80021da <??ZbZclAttrTypeLength_5>
 8002124:	281d      	cmp	r0, #29
 8002126:	d05a      	beq.n	80021de <??ZbZclAttrTypeLength_6>
 8002128:	281e      	cmp	r0, #30
 800212a:	d05a      	beq.n	80021e2 <??ZbZclAttrTypeLength_7>
 800212c:	281f      	cmp	r0, #31
 800212e:	d05a      	beq.n	80021e6 <??ZbZclAttrTypeLength_8>
 8002130:	2820      	cmp	r0, #32
 8002132:	d04a      	beq.n	80021ca <??ZbZclAttrTypeLength_1>
 8002134:	2821      	cmp	r0, #33	; 0x21
 8002136:	d04a      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 8002138:	2822      	cmp	r0, #34	; 0x22
 800213a:	d04a      	beq.n	80021d2 <??ZbZclAttrTypeLength_3>
 800213c:	2823      	cmp	r0, #35	; 0x23
 800213e:	d04a      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 8002140:	2824      	cmp	r0, #36	; 0x24
 8002142:	d04a      	beq.n	80021da <??ZbZclAttrTypeLength_5>
 8002144:	2825      	cmp	r0, #37	; 0x25
 8002146:	d04a      	beq.n	80021de <??ZbZclAttrTypeLength_6>
 8002148:	2826      	cmp	r0, #38	; 0x26
 800214a:	d04a      	beq.n	80021e2 <??ZbZclAttrTypeLength_7>
 800214c:	2827      	cmp	r0, #39	; 0x27
 800214e:	d04a      	beq.n	80021e6 <??ZbZclAttrTypeLength_8>
 8002150:	2828      	cmp	r0, #40	; 0x28
 8002152:	d03a      	beq.n	80021ca <??ZbZclAttrTypeLength_1>
 8002154:	2829      	cmp	r0, #41	; 0x29
 8002156:	d03a      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 8002158:	282a      	cmp	r0, #42	; 0x2a
 800215a:	d03a      	beq.n	80021d2 <??ZbZclAttrTypeLength_3>
 800215c:	282b      	cmp	r0, #43	; 0x2b
 800215e:	d03a      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 8002160:	282c      	cmp	r0, #44	; 0x2c
 8002162:	d03a      	beq.n	80021da <??ZbZclAttrTypeLength_5>
 8002164:	282d      	cmp	r0, #45	; 0x2d
 8002166:	d03a      	beq.n	80021de <??ZbZclAttrTypeLength_6>
 8002168:	282e      	cmp	r0, #46	; 0x2e
 800216a:	d03a      	beq.n	80021e2 <??ZbZclAttrTypeLength_7>
 800216c:	282f      	cmp	r0, #47	; 0x2f
 800216e:	d03a      	beq.n	80021e6 <??ZbZclAttrTypeLength_8>
 8002170:	2830      	cmp	r0, #48	; 0x30
 8002172:	d02a      	beq.n	80021ca <??ZbZclAttrTypeLength_1>
 8002174:	2831      	cmp	r0, #49	; 0x31
 8002176:	d02a      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 8002178:	2838      	cmp	r0, #56	; 0x38
 800217a:	d028      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 800217c:	2839      	cmp	r0, #57	; 0x39
 800217e:	d02a      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 8002180:	283a      	cmp	r0, #58	; 0x3a
 8002182:	d030      	beq.n	80021e6 <??ZbZclAttrTypeLength_8>
 8002184:	2841      	cmp	r0, #65	; 0x41
 8002186:	d032      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 8002188:	2842      	cmp	r0, #66	; 0x42
 800218a:	d030      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 800218c:	2843      	cmp	r0, #67	; 0x43
 800218e:	d02e      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 8002190:	2844      	cmp	r0, #68	; 0x44
 8002192:	d02c      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 8002194:	2848      	cmp	r0, #72	; 0x48
 8002196:	d02a      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 8002198:	284c      	cmp	r0, #76	; 0x4c
 800219a:	d028      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 800219c:	2850      	cmp	r0, #80	; 0x50
 800219e:	d026      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 80021a0:	2851      	cmp	r0, #81	; 0x51
 80021a2:	d024      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 80021a4:	28e0      	cmp	r0, #224	; 0xe0
 80021a6:	d016      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 80021a8:	28e1      	cmp	r0, #225	; 0xe1
 80021aa:	d014      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 80021ac:	28e2      	cmp	r0, #226	; 0xe2
 80021ae:	d012      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 80021b0:	28e8      	cmp	r0, #232	; 0xe8
 80021b2:	d00c      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 80021b4:	28e9      	cmp	r0, #233	; 0xe9
 80021b6:	d00a      	beq.n	80021ce <??ZbZclAttrTypeLength_2>
 80021b8:	28ea      	cmp	r0, #234	; 0xea
 80021ba:	d00c      	beq.n	80021d6 <??ZbZclAttrTypeLength_4>
 80021bc:	28f0      	cmp	r0, #240	; 0xf0
 80021be:	d012      	beq.n	80021e6 <??ZbZclAttrTypeLength_8>
 80021c0:	28f1      	cmp	r0, #241	; 0xf1
 80021c2:	d012      	beq.n	80021ea <??ZbZclAttrTypeLength_9>
 80021c4:	28ff      	cmp	r0, #255	; 0xff
 80021c6:	d012      	beq.n	80021ee <??ZbZclAttrTypeLength_0>
 80021c8:	e013      	b.n	80021f2 <??ZbZclAttrTypeLength_10>

080021ca <??ZbZclAttrTypeLength_1>:
 80021ca:	2001      	movs	r0, #1
 80021cc:	e012      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021ce <??ZbZclAttrTypeLength_2>:
 80021ce:	2002      	movs	r0, #2
 80021d0:	e010      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021d2 <??ZbZclAttrTypeLength_3>:
 80021d2:	2003      	movs	r0, #3
 80021d4:	e00e      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021d6 <??ZbZclAttrTypeLength_4>:
 80021d6:	2004      	movs	r0, #4
 80021d8:	e00c      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021da <??ZbZclAttrTypeLength_5>:
 80021da:	2005      	movs	r0, #5
 80021dc:	e00a      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021de <??ZbZclAttrTypeLength_6>:
 80021de:	2006      	movs	r0, #6
 80021e0:	e008      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021e2 <??ZbZclAttrTypeLength_7>:
 80021e2:	2007      	movs	r0, #7
 80021e4:	e006      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021e6 <??ZbZclAttrTypeLength_8>:
 80021e6:	2008      	movs	r0, #8
 80021e8:	e004      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021ea <??ZbZclAttrTypeLength_9>:
 80021ea:	2010      	movs	r0, #16
 80021ec:	e002      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021ee <??ZbZclAttrTypeLength_0>:
 80021ee:	2000      	movs	r0, #0
 80021f0:	e000      	b.n	80021f4 <??ZbZclAttrTypeLength_11>

080021f2 <??ZbZclAttrTypeLength_10>:
 80021f2:	2000      	movs	r0, #0

080021f4 <??ZbZclAttrTypeLength_11>:
 80021f4:	4770      	bx	lr

080021f6 <ZbZclAttrParseLength>:
 80021f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021fa:	0006      	movs	r6, r0
 80021fc:	000c      	movs	r4, r1
 80021fe:	0015      	movs	r5, r2
 8002200:	001f      	movs	r7, r3
 8002202:	0038      	movs	r0, r7
 8002204:	b2c0      	uxtb	r0, r0
 8002206:	280f      	cmp	r0, #15
 8002208:	d302      	bcc.n	8002210 <??ZbZclAttrParseLength_0>
 800220a:	f05f 30ff 	movs.w	r0, #4294967295
 800220e:	e0a1      	b.n	8002354 <??ZbZclAttrParseLength_1>

08002210 <??ZbZclAttrParseLength_0>:
 8002210:	0030      	movs	r0, r6
 8002212:	b2c0      	uxtb	r0, r0
 8002214:	f7ff ff64 	bl	80020e0 <ZbZclAttrTypeLength>
 8002218:	0001      	movs	r1, r0
 800221a:	2901      	cmp	r1, #1
 800221c:	db06      	blt.n	800222c <??ZbZclAttrParseLength_2>
 800221e:	428d      	cmp	r5, r1
 8002220:	d202      	bcs.n	8002228 <??ZbZclAttrParseLength_3>
 8002222:	f05f 30ff 	movs.w	r0, #4294967295
 8002226:	e095      	b.n	8002354 <??ZbZclAttrParseLength_1>

08002228 <??ZbZclAttrParseLength_3>:
 8002228:	0008      	movs	r0, r1
 800222a:	e093      	b.n	8002354 <??ZbZclAttrParseLength_1>

0800222c <??ZbZclAttrParseLength_2>:
 800222c:	2c00      	cmp	r4, #0
 800222e:	d101      	bne.n	8002234 <??ZbZclAttrParseLength_4>
 8002230:	0028      	movs	r0, r5
 8002232:	e08f      	b.n	8002354 <??ZbZclAttrParseLength_1>

08002234 <??ZbZclAttrParseLength_4>:
 8002234:	f05f 39ff 	movs.w	r9, #4294967295
 8002238:	0030      	movs	r0, r6
 800223a:	b2c0      	uxtb	r0, r0
 800223c:	3841      	subs	r0, #65	; 0x41
 800223e:	2801      	cmp	r0, #1
 8002240:	d90a      	bls.n	8002258 <??ZbZclAttrParseLength_5>
 8002242:	1e80      	subs	r0, r0, #2
 8002244:	2801      	cmp	r0, #1
 8002246:	d914      	bls.n	8002272 <??ZbZclAttrParseLength_6>
 8002248:	1f40      	subs	r0, r0, #5
 800224a:	d027      	beq.n	800229c <??ZbZclAttrParseLength_7>
 800224c:	1f00      	subs	r0, r0, #4
 800224e:	d04b      	beq.n	80022e8 <??ZbZclAttrParseLength_8>
 8002250:	1f00      	subs	r0, r0, #4
 8002252:	2801      	cmp	r0, #1
 8002254:	d922      	bls.n	800229c <??ZbZclAttrParseLength_7>
 8002256:	e074      	b.n	8002342 <??ZbZclAttrParseLength_10>

08002258 <??ZbZclAttrParseLength_5>:
 8002258:	2d00      	cmp	r5, #0
 800225a:	d072      	beq.n	8002342 <??ZbZclAttrParseLength_10>

0800225c <??ZbZclAttrParseLength_11>:
 800225c:	7820      	ldrb	r0, [r4, #0]
 800225e:	28ff      	cmp	r0, #255	; 0xff
 8002260:	d102      	bne.n	8002268 <??ZbZclAttrParseLength_12>
 8002262:	f05f 0901 	movs.w	r9, #1
 8002266:	e003      	b.n	8002270 <??ZbZclAttrParseLength_13>

08002268 <??ZbZclAttrParseLength_12>:
 8002268:	f894 9000 	ldrb.w	r9, [r4]
 800226c:	f119 0901 	adds.w	r9, r9, #1

08002270 <??ZbZclAttrParseLength_13>:
 8002270:	e067      	b.n	8002342 <??ZbZclAttrParseLength_10>

08002272 <??ZbZclAttrParseLength_6>:
 8002272:	2d02      	cmp	r5, #2
 8002274:	d365      	bcc.n	8002342 <??ZbZclAttrParseLength_10>

08002276 <??ZbZclAttrParseLength_14>:
 8002276:	0020      	movs	r0, r4
 8002278:	f7fe ffc1 	bl	80011fe <pletoh16>
 800227c:	4680      	mov	r8, r0
 800227e:	4640      	mov	r0, r8
 8002280:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002284:	b280      	uxth	r0, r0
 8002286:	4288      	cmp	r0, r1
 8002288:	d102      	bne.n	8002290 <??ZbZclAttrParseLength_15>
 800228a:	f05f 0902 	movs.w	r9, #2
 800228e:	e004      	b.n	800229a <??ZbZclAttrParseLength_16>

08002290 <??ZbZclAttrParseLength_15>:
 8002290:	46c1      	mov	r9, r8
 8002292:	fa1f f989 	uxth.w	r9, r9
 8002296:	f119 0902 	adds.w	r9, r9, #2

0800229a <??ZbZclAttrParseLength_16>:
 800229a:	e052      	b.n	8002342 <??ZbZclAttrParseLength_10>

0800229c <??ZbZclAttrParseLength_7>:
 800229c:	2d03      	cmp	r5, #3
 800229e:	d350      	bcc.n	8002342 <??ZbZclAttrParseLength_10>

080022a0 <??ZbZclAttrParseLength_17>:
 80022a0:	7820      	ldrb	r0, [r4, #0]
 80022a2:	4683      	mov	fp, r0
 80022a4:	1c60      	adds	r0, r4, #1
 80022a6:	f7fe ffaa 	bl	80011fe <pletoh16>
 80022aa:	4680      	mov	r8, r0
 80022ac:	2003      	movs	r0, #3
 80022ae:	4681      	mov	r9, r0

080022b0 <??ZbZclAttrParseLength_18>:
 80022b0:	4640      	mov	r0, r8
 80022b2:	b280      	uxth	r0, r0
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d016      	beq.n	80022e6 <??ZbZclAttrParseLength_19>
 80022b8:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80022bc:	4640      	mov	r0, r8
 80022be:	b280      	uxth	r0, r0
 80022c0:	4550      	cmp	r0, sl
 80022c2:	d010      	beq.n	80022e6 <??ZbZclAttrParseLength_19>
 80022c4:	1c7b      	adds	r3, r7, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	ebb5 0209 	subs.w	r2, r5, r9
 80022cc:	eb04 0109 	add.w	r1, r4, r9
 80022d0:	4658      	mov	r0, fp
 80022d2:	b2c0      	uxtb	r0, r0
 80022d4:	f7ff ff8f 	bl	80021f6 <ZbZclAttrParseLength>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d43b      	bmi.n	8002354 <??ZbZclAttrParseLength_1>

080022dc <??ZbZclAttrParseLength_20>:
 80022dc:	eb10 0909 	adds.w	r9, r0, r9
 80022e0:	eb1a 0808 	adds.w	r8, sl, r8
 80022e4:	e7e4      	b.n	80022b0 <??ZbZclAttrParseLength_18>

080022e6 <??ZbZclAttrParseLength_19>:
 80022e6:	e02c      	b.n	8002342 <??ZbZclAttrParseLength_10>

080022e8 <??ZbZclAttrParseLength_8>:
 80022e8:	2d02      	cmp	r5, #2
 80022ea:	d32a      	bcc.n	8002342 <??ZbZclAttrParseLength_10>

080022ec <??ZbZclAttrParseLength_21>:
 80022ec:	0020      	movs	r0, r4
 80022ee:	f7fe ff86 	bl	80011fe <pletoh16>
 80022f2:	4680      	mov	r8, r0
 80022f4:	2002      	movs	r0, #2
 80022f6:	4681      	mov	r9, r0

080022f8 <??ZbZclAttrParseLength_22>:
 80022f8:	4640      	mov	r0, r8
 80022fa:	b280      	uxth	r0, r0
 80022fc:	2800      	cmp	r0, #0
 80022fe:	d01f      	beq.n	8002340 <??ZbZclAttrParseLength_23>
 8002300:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8002304:	4640      	mov	r0, r8
 8002306:	b280      	uxth	r0, r0
 8002308:	4550      	cmp	r0, sl
 800230a:	d019      	beq.n	8002340 <??ZbZclAttrParseLength_23>
 800230c:	f119 0001 	adds.w	r0, r9, #1
 8002310:	4285      	cmp	r5, r0
 8002312:	d315      	bcc.n	8002340 <??ZbZclAttrParseLength_23>

08002314 <??ZbZclAttrParseLength_24>:
 8002314:	f814 0009 	ldrb.w	r0, [r4, r9]
 8002318:	4683      	mov	fp, r0
 800231a:	f119 0901 	adds.w	r9, r9, #1
 800231e:	1c7b      	adds	r3, r7, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	ebb5 0209 	subs.w	r2, r5, r9
 8002326:	eb04 0109 	add.w	r1, r4, r9
 800232a:	4658      	mov	r0, fp
 800232c:	b2c0      	uxtb	r0, r0
 800232e:	f7ff ff62 	bl	80021f6 <ZbZclAttrParseLength>
 8002332:	2800      	cmp	r0, #0
 8002334:	d404      	bmi.n	8002340 <??ZbZclAttrParseLength_23>

08002336 <??ZbZclAttrParseLength_25>:
 8002336:	eb10 0909 	adds.w	r9, r0, r9
 800233a:	eb1a 0808 	adds.w	r8, sl, r8
 800233e:	e7db      	b.n	80022f8 <??ZbZclAttrParseLength_22>

08002340 <??ZbZclAttrParseLength_23>:
 8002340:	e7ff      	b.n	8002342 <??ZbZclAttrParseLength_10>

08002342 <??ZbZclAttrParseLength_10>:
 8002342:	f1b9 0f00 	cmp.w	r9, #0
 8002346:	d401      	bmi.n	800234c <??ZbZclAttrParseLength_26>
 8002348:	454d      	cmp	r5, r9
 800234a:	d202      	bcs.n	8002352 <??ZbZclAttrParseLength_27>

0800234c <??ZbZclAttrParseLength_26>:
 800234c:	f05f 30ff 	movs.w	r0, #4294967295
 8002350:	e000      	b.n	8002354 <??ZbZclAttrParseLength_1>

08002352 <??ZbZclAttrParseLength_27>:
 8002352:	4648      	mov	r0, r9

08002354 <??ZbZclAttrParseLength_1>:
 8002354:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002358 <ZbZclAttrIsAnalog>:
 8002358:	0001      	movs	r1, r0
 800235a:	0008      	movs	r0, r1
 800235c:	b2c0      	uxtb	r0, r0
 800235e:	2820      	cmp	r0, #32
 8002360:	db05      	blt.n	800236e <??ZbZclAttrIsAnalog_0>
 8002362:	0008      	movs	r0, r1
 8002364:	b2c0      	uxtb	r0, r0
 8002366:	2828      	cmp	r0, #40	; 0x28
 8002368:	da01      	bge.n	800236e <??ZbZclAttrIsAnalog_0>
 800236a:	2001      	movs	r0, #1
 800236c:	e026      	b.n	80023bc <??ZbZclAttrIsAnalog_1>

0800236e <??ZbZclAttrIsAnalog_0>:
 800236e:	0008      	movs	r0, r1
 8002370:	b2c0      	uxtb	r0, r0
 8002372:	2828      	cmp	r0, #40	; 0x28
 8002374:	db05      	blt.n	8002382 <??ZbZclAttrIsAnalog_2>
 8002376:	0008      	movs	r0, r1
 8002378:	b2c0      	uxtb	r0, r0
 800237a:	2830      	cmp	r0, #48	; 0x30
 800237c:	da01      	bge.n	8002382 <??ZbZclAttrIsAnalog_2>
 800237e:	2001      	movs	r0, #1
 8002380:	e01c      	b.n	80023bc <??ZbZclAttrIsAnalog_1>

08002382 <??ZbZclAttrIsAnalog_2>:
 8002382:	0008      	movs	r0, r1
 8002384:	b2c0      	uxtb	r0, r0
 8002386:	2838      	cmp	r0, #56	; 0x38
 8002388:	d007      	beq.n	800239a <??ZbZclAttrIsAnalog_3>
 800238a:	0008      	movs	r0, r1
 800238c:	b2c0      	uxtb	r0, r0
 800238e:	2839      	cmp	r0, #57	; 0x39
 8002390:	d003      	beq.n	800239a <??ZbZclAttrIsAnalog_3>
 8002392:	0008      	movs	r0, r1
 8002394:	b2c0      	uxtb	r0, r0
 8002396:	283a      	cmp	r0, #58	; 0x3a
 8002398:	d101      	bne.n	800239e <??ZbZclAttrIsAnalog_4>

0800239a <??ZbZclAttrIsAnalog_3>:
 800239a:	2001      	movs	r0, #1
 800239c:	e00e      	b.n	80023bc <??ZbZclAttrIsAnalog_1>

0800239e <??ZbZclAttrIsAnalog_4>:
 800239e:	0008      	movs	r0, r1
 80023a0:	b2c0      	uxtb	r0, r0
 80023a2:	28e0      	cmp	r0, #224	; 0xe0
 80023a4:	d007      	beq.n	80023b6 <??ZbZclAttrIsAnalog_5>
 80023a6:	0008      	movs	r0, r1
 80023a8:	b2c0      	uxtb	r0, r0
 80023aa:	28e1      	cmp	r0, #225	; 0xe1
 80023ac:	d003      	beq.n	80023b6 <??ZbZclAttrIsAnalog_5>
 80023ae:	0008      	movs	r0, r1
 80023b0:	b2c0      	uxtb	r0, r0
 80023b2:	28e2      	cmp	r0, #226	; 0xe2
 80023b4:	d101      	bne.n	80023ba <??ZbZclAttrIsAnalog_6>

080023b6 <??ZbZclAttrIsAnalog_5>:
 80023b6:	2001      	movs	r0, #1
 80023b8:	e000      	b.n	80023bc <??ZbZclAttrIsAnalog_1>

080023ba <??ZbZclAttrIsAnalog_6>:
 80023ba:	2000      	movs	r0, #0

080023bc <??ZbZclAttrIsAnalog_1>:
 80023bc:	4770      	bx	lr
	...

080023c0 <ZbZclAppendInteger>:
 80023c0:	b4f0      	push	{r4, r5, r6, r7}
 80023c2:	0004      	movs	r4, r0
 80023c4:	000d      	movs	r5, r1
 80023c6:	9904      	ldr	r1, [sp, #16]
 80023c8:	2700      	movs	r7, #0
 80023ca:	2600      	movs	r6, #0
 80023cc:	0010      	movs	r0, r2
 80023ce:	b2c0      	uxtb	r0, r0
 80023d0:	2808      	cmp	r0, #8
 80023d2:	f000 80b2 	beq.w	800253a <??ZbZclAppendInteger_0>
 80023d6:	2809      	cmp	r0, #9
 80023d8:	f000 80a4 	beq.w	8002524 <??ZbZclAppendInteger_1>
 80023dc:	280a      	cmp	r0, #10
 80023de:	f000 8096 	beq.w	800250e <??ZbZclAppendInteger_2>
 80023e2:	280b      	cmp	r0, #11
 80023e4:	f000 8088 	beq.w	80024f8 <??ZbZclAppendInteger_3>
 80023e8:	280c      	cmp	r0, #12
 80023ea:	d07a      	beq.n	80024e2 <??ZbZclAppendInteger_4>
 80023ec:	280d      	cmp	r0, #13
 80023ee:	d06d      	beq.n	80024cc <??ZbZclAppendInteger_5>
 80023f0:	280e      	cmp	r0, #14
 80023f2:	d060      	beq.n	80024b6 <??ZbZclAppendInteger_6>
 80023f4:	280f      	cmp	r0, #15
 80023f6:	d053      	beq.n	80024a0 <??ZbZclAppendInteger_7>
 80023f8:	2810      	cmp	r0, #16
 80023fa:	d042      	beq.n	8002482 <??ZbZclAppendInteger_8>
 80023fc:	2818      	cmp	r0, #24
 80023fe:	f000 809c 	beq.w	800253a <??ZbZclAppendInteger_0>
 8002402:	2819      	cmp	r0, #25
 8002404:	f000 808e 	beq.w	8002524 <??ZbZclAppendInteger_1>
 8002408:	281a      	cmp	r0, #26
 800240a:	f000 8080 	beq.w	800250e <??ZbZclAppendInteger_2>
 800240e:	281b      	cmp	r0, #27
 8002410:	d072      	beq.n	80024f8 <??ZbZclAppendInteger_3>
 8002412:	281c      	cmp	r0, #28
 8002414:	d065      	beq.n	80024e2 <??ZbZclAppendInteger_4>
 8002416:	281d      	cmp	r0, #29
 8002418:	d058      	beq.n	80024cc <??ZbZclAppendInteger_5>
 800241a:	281e      	cmp	r0, #30
 800241c:	d04b      	beq.n	80024b6 <??ZbZclAppendInteger_6>
 800241e:	281f      	cmp	r0, #31
 8002420:	d03e      	beq.n	80024a0 <??ZbZclAppendInteger_7>
 8002422:	2820      	cmp	r0, #32
 8002424:	f000 8089 	beq.w	800253a <??ZbZclAppendInteger_0>
 8002428:	2821      	cmp	r0, #33	; 0x21
 800242a:	d07b      	beq.n	8002524 <??ZbZclAppendInteger_1>
 800242c:	2822      	cmp	r0, #34	; 0x22
 800242e:	d06e      	beq.n	800250e <??ZbZclAppendInteger_2>
 8002430:	2823      	cmp	r0, #35	; 0x23
 8002432:	d061      	beq.n	80024f8 <??ZbZclAppendInteger_3>
 8002434:	2824      	cmp	r0, #36	; 0x24
 8002436:	d054      	beq.n	80024e2 <??ZbZclAppendInteger_4>
 8002438:	2825      	cmp	r0, #37	; 0x25
 800243a:	d047      	beq.n	80024cc <??ZbZclAppendInteger_5>
 800243c:	2826      	cmp	r0, #38	; 0x26
 800243e:	d03a      	beq.n	80024b6 <??ZbZclAppendInteger_6>
 8002440:	2827      	cmp	r0, #39	; 0x27
 8002442:	d02d      	beq.n	80024a0 <??ZbZclAppendInteger_7>
 8002444:	2828      	cmp	r0, #40	; 0x28
 8002446:	d078      	beq.n	800253a <??ZbZclAppendInteger_0>
 8002448:	2829      	cmp	r0, #41	; 0x29
 800244a:	d06b      	beq.n	8002524 <??ZbZclAppendInteger_1>
 800244c:	282a      	cmp	r0, #42	; 0x2a
 800244e:	d05e      	beq.n	800250e <??ZbZclAppendInteger_2>
 8002450:	282b      	cmp	r0, #43	; 0x2b
 8002452:	d051      	beq.n	80024f8 <??ZbZclAppendInteger_3>
 8002454:	282c      	cmp	r0, #44	; 0x2c
 8002456:	d044      	beq.n	80024e2 <??ZbZclAppendInteger_4>
 8002458:	282d      	cmp	r0, #45	; 0x2d
 800245a:	d037      	beq.n	80024cc <??ZbZclAppendInteger_5>
 800245c:	282e      	cmp	r0, #46	; 0x2e
 800245e:	d02a      	beq.n	80024b6 <??ZbZclAppendInteger_6>
 8002460:	282f      	cmp	r0, #47	; 0x2f
 8002462:	d01d      	beq.n	80024a0 <??ZbZclAppendInteger_7>
 8002464:	2830      	cmp	r0, #48	; 0x30
 8002466:	d068      	beq.n	800253a <??ZbZclAppendInteger_0>
 8002468:	2831      	cmp	r0, #49	; 0x31
 800246a:	d05b      	beq.n	8002524 <??ZbZclAppendInteger_1>
 800246c:	28e2      	cmp	r0, #226	; 0xe2
 800246e:	d043      	beq.n	80024f8 <??ZbZclAppendInteger_3>
 8002470:	28e8      	cmp	r0, #232	; 0xe8
 8002472:	d057      	beq.n	8002524 <??ZbZclAppendInteger_1>
 8002474:	28e9      	cmp	r0, #233	; 0xe9
 8002476:	d055      	beq.n	8002524 <??ZbZclAppendInteger_1>
 8002478:	28ea      	cmp	r0, #234	; 0xea
 800247a:	d03d      	beq.n	80024f8 <??ZbZclAppendInteger_3>
 800247c:	28f0      	cmp	r0, #240	; 0xf0
 800247e:	d00f      	beq.n	80024a0 <??ZbZclAppendInteger_7>
 8002480:	e064      	b.n	800254c <??ZbZclAppendInteger_9>

08002482 <??ZbZclAppendInteger_8>:
 8002482:	2900      	cmp	r1, #0
 8002484:	d102      	bne.n	800248c <??ZbZclAppendInteger_10>
 8002486:	f05f 30ff 	movs.w	r0, #4294967295
 800248a:	e061      	b.n	8002550 <??ZbZclAppendInteger_11>

0800248c <??ZbZclAppendInteger_10>:
 800248c:	2d00      	cmp	r5, #0
 800248e:	d101      	bne.n	8002494 <??ZbZclAppendInteger_12>
 8002490:	2c00      	cmp	r4, #0
 8002492:	d001      	beq.n	8002498 <??ZbZclAppendInteger_13>

08002494 <??ZbZclAppendInteger_12>:
 8002494:	2001      	movs	r0, #1
 8002496:	e000      	b.n	800249a <??ZbZclAppendInteger_14>

08002498 <??ZbZclAppendInteger_13>:
 8002498:	2000      	movs	r0, #0

0800249a <??ZbZclAppendInteger_14>:
 800249a:	7018      	strb	r0, [r3, #0]
 800249c:	2001      	movs	r0, #1
 800249e:	e057      	b.n	8002550 <??ZbZclAppendInteger_11>

080024a0 <??ZbZclAppendInteger_7>:
 80024a0:	428f      	cmp	r7, r1
 80024a2:	d302      	bcc.n	80024aa <??ZbZclAppendInteger_15>
 80024a4:	f05f 30ff 	movs.w	r0, #4294967295
 80024a8:	e052      	b.n	8002550 <??ZbZclAppendInteger_11>

080024aa <??ZbZclAppendInteger_15>:
 80024aa:	55dc      	strb	r4, [r3, r7]
 80024ac:	1c7f      	adds	r7, r7, #1
 80024ae:	0a24      	lsrs	r4, r4, #8
 80024b0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80024b4:	0a2d      	lsrs	r5, r5, #8

080024b6 <??ZbZclAppendInteger_6>:
 80024b6:	428f      	cmp	r7, r1
 80024b8:	d302      	bcc.n	80024c0 <??ZbZclAppendInteger_16>
 80024ba:	f05f 30ff 	movs.w	r0, #4294967295
 80024be:	e047      	b.n	8002550 <??ZbZclAppendInteger_11>

080024c0 <??ZbZclAppendInteger_16>:
 80024c0:	55dc      	strb	r4, [r3, r7]
 80024c2:	1c7f      	adds	r7, r7, #1
 80024c4:	0a24      	lsrs	r4, r4, #8
 80024c6:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80024ca:	0a2d      	lsrs	r5, r5, #8

080024cc <??ZbZclAppendInteger_5>:
 80024cc:	428f      	cmp	r7, r1
 80024ce:	d302      	bcc.n	80024d6 <??ZbZclAppendInteger_17>
 80024d0:	f05f 30ff 	movs.w	r0, #4294967295
 80024d4:	e03c      	b.n	8002550 <??ZbZclAppendInteger_11>

080024d6 <??ZbZclAppendInteger_17>:
 80024d6:	55dc      	strb	r4, [r3, r7]
 80024d8:	1c7f      	adds	r7, r7, #1
 80024da:	0a24      	lsrs	r4, r4, #8
 80024dc:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80024e0:	0a2d      	lsrs	r5, r5, #8

080024e2 <??ZbZclAppendInteger_4>:
 80024e2:	428f      	cmp	r7, r1
 80024e4:	d302      	bcc.n	80024ec <??ZbZclAppendInteger_18>
 80024e6:	f05f 30ff 	movs.w	r0, #4294967295
 80024ea:	e031      	b.n	8002550 <??ZbZclAppendInteger_11>

080024ec <??ZbZclAppendInteger_18>:
 80024ec:	55dc      	strb	r4, [r3, r7]
 80024ee:	1c7f      	adds	r7, r7, #1
 80024f0:	0a24      	lsrs	r4, r4, #8
 80024f2:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80024f6:	0a2d      	lsrs	r5, r5, #8

080024f8 <??ZbZclAppendInteger_3>:
 80024f8:	428f      	cmp	r7, r1
 80024fa:	d302      	bcc.n	8002502 <??ZbZclAppendInteger_19>
 80024fc:	f05f 30ff 	movs.w	r0, #4294967295
 8002500:	e026      	b.n	8002550 <??ZbZclAppendInteger_11>

08002502 <??ZbZclAppendInteger_19>:
 8002502:	55dc      	strb	r4, [r3, r7]
 8002504:	1c7f      	adds	r7, r7, #1
 8002506:	0a24      	lsrs	r4, r4, #8
 8002508:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800250c:	0a2d      	lsrs	r5, r5, #8

0800250e <??ZbZclAppendInteger_2>:
 800250e:	428f      	cmp	r7, r1
 8002510:	d302      	bcc.n	8002518 <??ZbZclAppendInteger_20>
 8002512:	f05f 30ff 	movs.w	r0, #4294967295
 8002516:	e01b      	b.n	8002550 <??ZbZclAppendInteger_11>

08002518 <??ZbZclAppendInteger_20>:
 8002518:	55dc      	strb	r4, [r3, r7]
 800251a:	1c7f      	adds	r7, r7, #1
 800251c:	0a24      	lsrs	r4, r4, #8
 800251e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002522:	0a2d      	lsrs	r5, r5, #8

08002524 <??ZbZclAppendInteger_1>:
 8002524:	428f      	cmp	r7, r1
 8002526:	d302      	bcc.n	800252e <??ZbZclAppendInteger_21>
 8002528:	f05f 30ff 	movs.w	r0, #4294967295
 800252c:	e010      	b.n	8002550 <??ZbZclAppendInteger_11>

0800252e <??ZbZclAppendInteger_21>:
 800252e:	55dc      	strb	r4, [r3, r7]
 8002530:	1c7f      	adds	r7, r7, #1
 8002532:	0a24      	lsrs	r4, r4, #8
 8002534:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002538:	0a2d      	lsrs	r5, r5, #8

0800253a <??ZbZclAppendInteger_0>:
 800253a:	428f      	cmp	r7, r1
 800253c:	d302      	bcc.n	8002544 <??ZbZclAppendInteger_22>
 800253e:	f05f 30ff 	movs.w	r0, #4294967295
 8002542:	e005      	b.n	8002550 <??ZbZclAppendInteger_11>

08002544 <??ZbZclAppendInteger_22>:
 8002544:	55dc      	strb	r4, [r3, r7]
 8002546:	1c7f      	adds	r7, r7, #1
 8002548:	0038      	movs	r0, r7
 800254a:	e001      	b.n	8002550 <??ZbZclAppendInteger_11>

0800254c <??ZbZclAppendInteger_9>:
 800254c:	f05f 30ff 	movs.w	r0, #4294967295

08002550 <??ZbZclAppendInteger_11>:
 8002550:	bcf0      	pop	{r4, r5, r6, r7}
 8002552:	4770      	bx	lr

08002554 <ZbZclParseInteger>:
 8002554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	4683      	mov	fp, r0
 800255a:	000e      	movs	r6, r1
 800255c:	4692      	mov	sl, r2
 800255e:	2700      	movs	r7, #0
 8002560:	2400      	movs	r4, #0
 8002562:	2500      	movs	r5, #0
 8002564:	f05f 0800 	movs.w	r8, #0
 8002568:	f05f 0900 	movs.w	r9, #0
 800256c:	4658      	mov	r0, fp
 800256e:	b2c0      	uxtb	r0, r0
 8002570:	f000 f91e 	bl	80027b0 <ZbZclAttrIsInteger>
 8002574:	2800      	cmp	r0, #0
 8002576:	d105      	bne.n	8002584 <??ZbZclParseInteger_0>
 8002578:	208d      	movs	r0, #141	; 0x8d
 800257a:	f88a 0000 	strb.w	r0, [sl]
 800257e:	2000      	movs	r0, #0
 8002580:	2100      	movs	r1, #0
 8002582:	e113      	b.n	80027ac <??ZbZclParseInteger_1>

08002584 <??ZbZclParseInteger_0>:
 8002584:	2000      	movs	r0, #0
 8002586:	f88a 0000 	strb.w	r0, [sl]
 800258a:	4658      	mov	r0, fp
 800258c:	b2c0      	uxtb	r0, r0
 800258e:	2808      	cmp	r0, #8
 8002590:	f000 8097 	beq.w	80026c2 <??ZbZclParseInteger_2>
 8002594:	2809      	cmp	r0, #9
 8002596:	f000 808a 	beq.w	80026ae <??ZbZclParseInteger_3>
 800259a:	280a      	cmp	r0, #10
 800259c:	d07d      	beq.n	800269a <??ZbZclParseInteger_4>
 800259e:	280b      	cmp	r0, #11
 80025a0:	d071      	beq.n	8002686 <??ZbZclParseInteger_5>
 80025a2:	280c      	cmp	r0, #12
 80025a4:	d065      	beq.n	8002672 <??ZbZclParseInteger_6>
 80025a6:	280d      	cmp	r0, #13
 80025a8:	d059      	beq.n	800265e <??ZbZclParseInteger_7>
 80025aa:	280e      	cmp	r0, #14
 80025ac:	d04d      	beq.n	800264a <??ZbZclParseInteger_8>
 80025ae:	280f      	cmp	r0, #15
 80025b0:	d046      	beq.n	8002640 <??ZbZclParseInteger_9>
 80025b2:	2810      	cmp	r0, #16
 80025b4:	f000 8085 	beq.w	80026c2 <??ZbZclParseInteger_2>
 80025b8:	2818      	cmp	r0, #24
 80025ba:	f000 8082 	beq.w	80026c2 <??ZbZclParseInteger_2>
 80025be:	2819      	cmp	r0, #25
 80025c0:	d075      	beq.n	80026ae <??ZbZclParseInteger_3>
 80025c2:	281a      	cmp	r0, #26
 80025c4:	d069      	beq.n	800269a <??ZbZclParseInteger_4>
 80025c6:	281b      	cmp	r0, #27
 80025c8:	d05d      	beq.n	8002686 <??ZbZclParseInteger_5>
 80025ca:	281c      	cmp	r0, #28
 80025cc:	d051      	beq.n	8002672 <??ZbZclParseInteger_6>
 80025ce:	281d      	cmp	r0, #29
 80025d0:	d045      	beq.n	800265e <??ZbZclParseInteger_7>
 80025d2:	281e      	cmp	r0, #30
 80025d4:	d039      	beq.n	800264a <??ZbZclParseInteger_8>
 80025d6:	281f      	cmp	r0, #31
 80025d8:	d032      	beq.n	8002640 <??ZbZclParseInteger_9>
 80025da:	2820      	cmp	r0, #32
 80025dc:	d071      	beq.n	80026c2 <??ZbZclParseInteger_2>
 80025de:	2821      	cmp	r0, #33	; 0x21
 80025e0:	d065      	beq.n	80026ae <??ZbZclParseInteger_3>
 80025e2:	2822      	cmp	r0, #34	; 0x22
 80025e4:	d059      	beq.n	800269a <??ZbZclParseInteger_4>
 80025e6:	2823      	cmp	r0, #35	; 0x23
 80025e8:	d04d      	beq.n	8002686 <??ZbZclParseInteger_5>
 80025ea:	2824      	cmp	r0, #36	; 0x24
 80025ec:	d041      	beq.n	8002672 <??ZbZclParseInteger_6>
 80025ee:	2825      	cmp	r0, #37	; 0x25
 80025f0:	d035      	beq.n	800265e <??ZbZclParseInteger_7>
 80025f2:	2826      	cmp	r0, #38	; 0x26
 80025f4:	d029      	beq.n	800264a <??ZbZclParseInteger_8>
 80025f6:	2827      	cmp	r0, #39	; 0x27
 80025f8:	d022      	beq.n	8002640 <??ZbZclParseInteger_9>
 80025fa:	2828      	cmp	r0, #40	; 0x28
 80025fc:	f000 80ac 	beq.w	8002758 <??ZbZclParseInteger_10>
 8002600:	2829      	cmp	r0, #41	; 0x29
 8002602:	f000 809f 	beq.w	8002744 <??ZbZclParseInteger_11>
 8002606:	282a      	cmp	r0, #42	; 0x2a
 8002608:	f000 8092 	beq.w	8002730 <??ZbZclParseInteger_12>
 800260c:	282b      	cmp	r0, #43	; 0x2b
 800260e:	f000 8085 	beq.w	800271c <??ZbZclParseInteger_13>
 8002612:	282c      	cmp	r0, #44	; 0x2c
 8002614:	d078      	beq.n	8002708 <??ZbZclParseInteger_14>
 8002616:	282d      	cmp	r0, #45	; 0x2d
 8002618:	d06c      	beq.n	80026f4 <??ZbZclParseInteger_15>
 800261a:	282e      	cmp	r0, #46	; 0x2e
 800261c:	d060      	beq.n	80026e0 <??ZbZclParseInteger_16>
 800261e:	282f      	cmp	r0, #47	; 0x2f
 8002620:	d059      	beq.n	80026d6 <??ZbZclParseInteger_17>
 8002622:	2830      	cmp	r0, #48	; 0x30
 8002624:	d04d      	beq.n	80026c2 <??ZbZclParseInteger_2>
 8002626:	2831      	cmp	r0, #49	; 0x31
 8002628:	d041      	beq.n	80026ae <??ZbZclParseInteger_3>
 800262a:	28e2      	cmp	r0, #226	; 0xe2
 800262c:	d02b      	beq.n	8002686 <??ZbZclParseInteger_5>
 800262e:	28e8      	cmp	r0, #232	; 0xe8
 8002630:	d03d      	beq.n	80026ae <??ZbZclParseInteger_3>
 8002632:	28e9      	cmp	r0, #233	; 0xe9
 8002634:	d03b      	beq.n	80026ae <??ZbZclParseInteger_3>
 8002636:	28ea      	cmp	r0, #234	; 0xea
 8002638:	d025      	beq.n	8002686 <??ZbZclParseInteger_5>
 800263a:	28f0      	cmp	r0, #240	; 0xf0
 800263c:	f040 80b1 	bne.w	80027a2 <??ZbZclParseInteger_18>

08002640 <??ZbZclParseInteger_9>:
 8002640:	5df0      	ldrb	r0, [r6, r7]
 8002642:	2100      	movs	r1, #0
 8002644:	4304      	orrs	r4, r0
 8002646:	430d      	orrs	r5, r1
 8002648:	1c7f      	adds	r7, r7, #1

0800264a <??ZbZclParseInteger_8>:
 800264a:	5df0      	ldrb	r0, [r6, r7]
 800264c:	2100      	movs	r1, #0
 800264e:	003a      	movs	r2, r7
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	00d2      	lsls	r2, r2, #3
 8002654:	f003 fbbc 	bl	8005dd0 <__aeabi_llsl>
 8002658:	4304      	orrs	r4, r0
 800265a:	430d      	orrs	r5, r1
 800265c:	1c7f      	adds	r7, r7, #1

0800265e <??ZbZclParseInteger_7>:
 800265e:	5df0      	ldrb	r0, [r6, r7]
 8002660:	2100      	movs	r1, #0
 8002662:	003a      	movs	r2, r7
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	00d2      	lsls	r2, r2, #3
 8002668:	f003 fbb2 	bl	8005dd0 <__aeabi_llsl>
 800266c:	4304      	orrs	r4, r0
 800266e:	430d      	orrs	r5, r1
 8002670:	1c7f      	adds	r7, r7, #1

08002672 <??ZbZclParseInteger_6>:
 8002672:	5df0      	ldrb	r0, [r6, r7]
 8002674:	2100      	movs	r1, #0
 8002676:	003a      	movs	r2, r7
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	00d2      	lsls	r2, r2, #3
 800267c:	f003 fba8 	bl	8005dd0 <__aeabi_llsl>
 8002680:	4304      	orrs	r4, r0
 8002682:	430d      	orrs	r5, r1
 8002684:	1c7f      	adds	r7, r7, #1

08002686 <??ZbZclParseInteger_5>:
 8002686:	5df0      	ldrb	r0, [r6, r7]
 8002688:	2100      	movs	r1, #0
 800268a:	003a      	movs	r2, r7
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	00d2      	lsls	r2, r2, #3
 8002690:	f003 fb9e 	bl	8005dd0 <__aeabi_llsl>
 8002694:	4304      	orrs	r4, r0
 8002696:	430d      	orrs	r5, r1
 8002698:	1c7f      	adds	r7, r7, #1

0800269a <??ZbZclParseInteger_4>:
 800269a:	5df0      	ldrb	r0, [r6, r7]
 800269c:	2100      	movs	r1, #0
 800269e:	003a      	movs	r2, r7
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	00d2      	lsls	r2, r2, #3
 80026a4:	f003 fb94 	bl	8005dd0 <__aeabi_llsl>
 80026a8:	4304      	orrs	r4, r0
 80026aa:	430d      	orrs	r5, r1
 80026ac:	1c7f      	adds	r7, r7, #1

080026ae <??ZbZclParseInteger_3>:
 80026ae:	5df0      	ldrb	r0, [r6, r7]
 80026b0:	2100      	movs	r1, #0
 80026b2:	003a      	movs	r2, r7
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	00d2      	lsls	r2, r2, #3
 80026b8:	f003 fb8a 	bl	8005dd0 <__aeabi_llsl>
 80026bc:	4304      	orrs	r4, r0
 80026be:	430d      	orrs	r5, r1
 80026c0:	1c7f      	adds	r7, r7, #1

080026c2 <??ZbZclParseInteger_2>:
 80026c2:	5df0      	ldrb	r0, [r6, r7]
 80026c4:	2100      	movs	r1, #0
 80026c6:	003a      	movs	r2, r7
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	00d2      	lsls	r2, r2, #3
 80026cc:	f003 fb80 	bl	8005dd0 <__aeabi_llsl>
 80026d0:	4320      	orrs	r0, r4
 80026d2:	4329      	orrs	r1, r5
 80026d4:	e06a      	b.n	80027ac <??ZbZclParseInteger_1>

080026d6 <??ZbZclParseInteger_17>:
 80026d6:	5df0      	ldrb	r0, [r6, r7]
 80026d8:	2100      	movs	r1, #0
 80026da:	4304      	orrs	r4, r0
 80026dc:	430d      	orrs	r5, r1
 80026de:	1c7f      	adds	r7, r7, #1

080026e0 <??ZbZclParseInteger_16>:
 80026e0:	5df0      	ldrb	r0, [r6, r7]
 80026e2:	2100      	movs	r1, #0
 80026e4:	003a      	movs	r2, r7
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	00d2      	lsls	r2, r2, #3
 80026ea:	f003 fb71 	bl	8005dd0 <__aeabi_llsl>
 80026ee:	4304      	orrs	r4, r0
 80026f0:	430d      	orrs	r5, r1
 80026f2:	1c7f      	adds	r7, r7, #1

080026f4 <??ZbZclParseInteger_15>:
 80026f4:	5df0      	ldrb	r0, [r6, r7]
 80026f6:	2100      	movs	r1, #0
 80026f8:	003a      	movs	r2, r7
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	00d2      	lsls	r2, r2, #3
 80026fe:	f003 fb67 	bl	8005dd0 <__aeabi_llsl>
 8002702:	4304      	orrs	r4, r0
 8002704:	430d      	orrs	r5, r1
 8002706:	1c7f      	adds	r7, r7, #1

08002708 <??ZbZclParseInteger_14>:
 8002708:	5df0      	ldrb	r0, [r6, r7]
 800270a:	2100      	movs	r1, #0
 800270c:	003a      	movs	r2, r7
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	00d2      	lsls	r2, r2, #3
 8002712:	f003 fb5d 	bl	8005dd0 <__aeabi_llsl>
 8002716:	4304      	orrs	r4, r0
 8002718:	430d      	orrs	r5, r1
 800271a:	1c7f      	adds	r7, r7, #1

0800271c <??ZbZclParseInteger_13>:
 800271c:	5df0      	ldrb	r0, [r6, r7]
 800271e:	2100      	movs	r1, #0
 8002720:	003a      	movs	r2, r7
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	00d2      	lsls	r2, r2, #3
 8002726:	f003 fb53 	bl	8005dd0 <__aeabi_llsl>
 800272a:	4304      	orrs	r4, r0
 800272c:	430d      	orrs	r5, r1
 800272e:	1c7f      	adds	r7, r7, #1

08002730 <??ZbZclParseInteger_12>:
 8002730:	5df0      	ldrb	r0, [r6, r7]
 8002732:	2100      	movs	r1, #0
 8002734:	003a      	movs	r2, r7
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	00d2      	lsls	r2, r2, #3
 800273a:	f003 fb49 	bl	8005dd0 <__aeabi_llsl>
 800273e:	4304      	orrs	r4, r0
 8002740:	430d      	orrs	r5, r1
 8002742:	1c7f      	adds	r7, r7, #1

08002744 <??ZbZclParseInteger_11>:
 8002744:	5df0      	ldrb	r0, [r6, r7]
 8002746:	2100      	movs	r1, #0
 8002748:	003a      	movs	r2, r7
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	00d2      	lsls	r2, r2, #3
 800274e:	f003 fb3f 	bl	8005dd0 <__aeabi_llsl>
 8002752:	4304      	orrs	r4, r0
 8002754:	430d      	orrs	r5, r1
 8002756:	1c7f      	adds	r7, r7, #1

08002758 <??ZbZclParseInteger_10>:
 8002758:	5df0      	ldrb	r0, [r6, r7]
 800275a:	2100      	movs	r1, #0
 800275c:	003a      	movs	r2, r7
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	00d2      	lsls	r2, r2, #3
 8002762:	f003 fb35 	bl	8005dd0 <__aeabi_llsl>
 8002766:	4320      	orrs	r0, r4
 8002768:	4329      	orrs	r1, r5
 800276a:	003a      	movs	r2, r7
 800276c:	1c57      	adds	r7, r2, #1
 800276e:	5cb2      	ldrb	r2, [r6, r2]
 8002770:	0612      	lsls	r2, r2, #24
 8002772:	d515      	bpl.n	80027a0 <??ZbZclParseInteger_19>
 8002774:	2f08      	cmp	r7, #8
 8002776:	d213      	bcs.n	80027a0 <??ZbZclParseInteger_19>
 8002778:	0004      	movs	r4, r0
 800277a:	000d      	movs	r5, r1
 800277c:	2001      	movs	r0, #1
 800277e:	2100      	movs	r1, #0
 8002780:	f1d7 0208 	rsbs	r2, r7, #8
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	00d2      	lsls	r2, r2, #3
 8002788:	f003 fb22 	bl	8005dd0 <__aeabi_llsl>
 800278c:	1e40      	subs	r0, r0, #1
 800278e:	f171 0100 	sbcs.w	r1, r1, #0
 8002792:	003a      	movs	r2, r7
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	00d2      	lsls	r2, r2, #3
 8002798:	f003 fb1a 	bl	8005dd0 <__aeabi_llsl>
 800279c:	4320      	orrs	r0, r4
 800279e:	4329      	orrs	r1, r5

080027a0 <??ZbZclParseInteger_19>:
 80027a0:	e004      	b.n	80027ac <??ZbZclParseInteger_1>

080027a2 <??ZbZclParseInteger_18>:
 80027a2:	208d      	movs	r0, #141	; 0x8d
 80027a4:	f88a 0000 	strb.w	r0, [sl]
 80027a8:	2000      	movs	r0, #0
 80027aa:	2100      	movs	r1, #0

080027ac <??ZbZclParseInteger_1>:
 80027ac:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027b0 <ZbZclAttrIsInteger>:
 80027b0:	0001      	movs	r1, r0
 80027b2:	2200      	movs	r2, #0
 80027b4:	0008      	movs	r0, r1
 80027b6:	b2c0      	uxtb	r0, r0
 80027b8:	3808      	subs	r0, #8
 80027ba:	2808      	cmp	r0, #8
 80027bc:	d909      	bls.n	80027d2 <??ZbZclAttrIsInteger_0>
 80027be:	3810      	subs	r0, #16
 80027c0:	2819      	cmp	r0, #25
 80027c2:	d906      	bls.n	80027d2 <??ZbZclAttrIsInteger_0>
 80027c4:	38ca      	subs	r0, #202	; 0xca
 80027c6:	d004      	beq.n	80027d2 <??ZbZclAttrIsInteger_0>
 80027c8:	1f80      	subs	r0, r0, #6
 80027ca:	2802      	cmp	r0, #2
 80027cc:	d901      	bls.n	80027d2 <??ZbZclAttrIsInteger_0>
 80027ce:	3808      	subs	r0, #8
 80027d0:	d101      	bne.n	80027d6 <??ZbZclAttrIsInteger_1>

080027d2 <??ZbZclAttrIsInteger_0>:
 80027d2:	2001      	movs	r0, #1
 80027d4:	e000      	b.n	80027d8 <??ZbZclAttrIsInteger_2>

080027d6 <??ZbZclAttrIsInteger_1>:
 80027d6:	2000      	movs	r0, #0

080027d8 <??ZbZclAttrIsInteger_2>:
 80027d8:	b2c0      	uxtb	r0, r0
 80027da:	4770      	bx	lr

080027dc <ZbZclAttrIntegerRangeCheck>:
 80027dc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80027e0:	0004      	movs	r4, r0
 80027e2:	000d      	movs	r5, r1
 80027e4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80027e8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80027ec:	0010      	movs	r0, r2
 80027ee:	b2c0      	uxtb	r0, r0
 80027f0:	2810      	cmp	r0, #16
 80027f2:	d045      	beq.n	8002880 <??ZbZclAttrIntegerRangeCheck_0>
 80027f4:	2818      	cmp	r0, #24
 80027f6:	d051      	beq.n	800289c <??ZbZclAttrIntegerRangeCheck_1>
 80027f8:	2819      	cmp	r0, #25
 80027fa:	d060      	beq.n	80028be <??ZbZclAttrIntegerRangeCheck_2>
 80027fc:	281a      	cmp	r0, #26
 80027fe:	d072      	beq.n	80028e6 <??ZbZclAttrIntegerRangeCheck_3>
 8002800:	281b      	cmp	r0, #27
 8002802:	f000 8086 	beq.w	8002912 <??ZbZclAttrIntegerRangeCheck_4>
 8002806:	281c      	cmp	r0, #28
 8002808:	f000 8098 	beq.w	800293c <??ZbZclAttrIntegerRangeCheck_5>
 800280c:	281d      	cmp	r0, #29
 800280e:	f000 80a7 	beq.w	8002960 <??ZbZclAttrIntegerRangeCheck_6>
 8002812:	281e      	cmp	r0, #30
 8002814:	f000 80b9 	beq.w	800298a <??ZbZclAttrIntegerRangeCheck_7>
 8002818:	281f      	cmp	r0, #31
 800281a:	f000 80cd 	beq.w	80029b8 <??ZbZclAttrIntegerRangeCheck_8>
 800281e:	2820      	cmp	r0, #32
 8002820:	d03c      	beq.n	800289c <??ZbZclAttrIntegerRangeCheck_1>
 8002822:	2821      	cmp	r0, #33	; 0x21
 8002824:	d04b      	beq.n	80028be <??ZbZclAttrIntegerRangeCheck_2>
 8002826:	2822      	cmp	r0, #34	; 0x22
 8002828:	d05d      	beq.n	80028e6 <??ZbZclAttrIntegerRangeCheck_3>
 800282a:	2823      	cmp	r0, #35	; 0x23
 800282c:	d071      	beq.n	8002912 <??ZbZclAttrIntegerRangeCheck_4>
 800282e:	2824      	cmp	r0, #36	; 0x24
 8002830:	f000 8084 	beq.w	800293c <??ZbZclAttrIntegerRangeCheck_5>
 8002834:	2825      	cmp	r0, #37	; 0x25
 8002836:	f000 8093 	beq.w	8002960 <??ZbZclAttrIntegerRangeCheck_6>
 800283a:	2826      	cmp	r0, #38	; 0x26
 800283c:	f000 80a5 	beq.w	800298a <??ZbZclAttrIntegerRangeCheck_7>
 8002840:	2827      	cmp	r0, #39	; 0x27
 8002842:	f000 80b9 	beq.w	80029b8 <??ZbZclAttrIntegerRangeCheck_8>
 8002846:	2828      	cmp	r0, #40	; 0x28
 8002848:	f000 80c1 	beq.w	80029ce <??ZbZclAttrIntegerRangeCheck_9>
 800284c:	2829      	cmp	r0, #41	; 0x29
 800284e:	f000 80d9 	beq.w	8002a04 <??ZbZclAttrIntegerRangeCheck_10>
 8002852:	282a      	cmp	r0, #42	; 0x2a
 8002854:	f000 80f0 	beq.w	8002a38 <??ZbZclAttrIntegerRangeCheck_11>
 8002858:	282b      	cmp	r0, #43	; 0x2b
 800285a:	f000 8107 	beq.w	8002a6c <??ZbZclAttrIntegerRangeCheck_12>
 800285e:	282c      	cmp	r0, #44	; 0x2c
 8002860:	f000 8120 	beq.w	8002aa4 <??ZbZclAttrIntegerRangeCheck_13>
 8002864:	282d      	cmp	r0, #45	; 0x2d
 8002866:	f000 8136 	beq.w	8002ad6 <??ZbZclAttrIntegerRangeCheck_14>
 800286a:	282e      	cmp	r0, #46	; 0x2e
 800286c:	f000 814b 	beq.w	8002b06 <??ZbZclAttrIntegerRangeCheck_15>
 8002870:	282f      	cmp	r0, #47	; 0x2f
 8002872:	f000 8160 	beq.w	8002b36 <??ZbZclAttrIntegerRangeCheck_16>
 8002876:	2830      	cmp	r0, #48	; 0x30
 8002878:	d010      	beq.n	800289c <??ZbZclAttrIntegerRangeCheck_1>
 800287a:	2831      	cmp	r0, #49	; 0x31
 800287c:	d01f      	beq.n	80028be <??ZbZclAttrIntegerRangeCheck_2>
 800287e:	e164      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002880 <??ZbZclAttrIntegerRangeCheck_0>:
 8002880:	2d00      	cmp	r5, #0
 8002882:	d103      	bne.n	800288c <??ZbZclAttrIntegerRangeCheck_18>
 8002884:	2cff      	cmp	r4, #255	; 0xff
 8002886:	d101      	bne.n	800288c <??ZbZclAttrIntegerRangeCheck_18>
 8002888:	2001      	movs	r0, #1
 800288a:	e176      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

0800288c <??ZbZclAttrIntegerRangeCheck_18>:
 800288c:	2d00      	cmp	r5, #0
 800288e:	db04      	blt.n	800289a <??ZbZclAttrIntegerRangeCheck_20>
 8002890:	dc01      	bgt.n	8002896 <??ZbZclAttrIntegerRangeCheck_21>
 8002892:	2c02      	cmp	r4, #2
 8002894:	d301      	bcc.n	800289a <??ZbZclAttrIntegerRangeCheck_20>

08002896 <??ZbZclAttrIntegerRangeCheck_21>:
 8002896:	2000      	movs	r0, #0
 8002898:	e16f      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

0800289a <??ZbZclAttrIntegerRangeCheck_20>:
 800289a:	e156      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

0800289c <??ZbZclAttrIntegerRangeCheck_1>:
 800289c:	2d00      	cmp	r5, #0
 800289e:	d103      	bne.n	80028a8 <??ZbZclAttrIntegerRangeCheck_23>
 80028a0:	2cff      	cmp	r4, #255	; 0xff
 80028a2:	d101      	bne.n	80028a8 <??ZbZclAttrIntegerRangeCheck_23>
 80028a4:	2001      	movs	r0, #1
 80028a6:	e168      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080028a8 <??ZbZclAttrIntegerRangeCheck_23>:
 80028a8:	2d00      	cmp	r5, #0
 80028aa:	d405      	bmi.n	80028b8 <??ZbZclAttrIntegerRangeCheck_24>
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	db05      	blt.n	80028bc <??ZbZclAttrIntegerRangeCheck_25>
 80028b0:	dc02      	bgt.n	80028b8 <??ZbZclAttrIntegerRangeCheck_24>
 80028b2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80028b6:	d301      	bcc.n	80028bc <??ZbZclAttrIntegerRangeCheck_25>

080028b8 <??ZbZclAttrIntegerRangeCheck_24>:
 80028b8:	2000      	movs	r0, #0
 80028ba:	e15e      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080028bc <??ZbZclAttrIntegerRangeCheck_25>:
 80028bc:	e145      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

080028be <??ZbZclAttrIntegerRangeCheck_2>:
 80028be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028c2:	2100      	movs	r1, #0
 80028c4:	428d      	cmp	r5, r1
 80028c6:	d103      	bne.n	80028d0 <??ZbZclAttrIntegerRangeCheck_27>
 80028c8:	4284      	cmp	r4, r0
 80028ca:	d101      	bne.n	80028d0 <??ZbZclAttrIntegerRangeCheck_27>
 80028cc:	2001      	movs	r0, #1
 80028ce:	e154      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080028d0 <??ZbZclAttrIntegerRangeCheck_27>:
 80028d0:	2d00      	cmp	r5, #0
 80028d2:	d405      	bmi.n	80028e0 <??ZbZclAttrIntegerRangeCheck_28>
 80028d4:	2d00      	cmp	r5, #0
 80028d6:	db05      	blt.n	80028e4 <??ZbZclAttrIntegerRangeCheck_29>
 80028d8:	dc02      	bgt.n	80028e0 <??ZbZclAttrIntegerRangeCheck_28>
 80028da:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80028de:	d301      	bcc.n	80028e4 <??ZbZclAttrIntegerRangeCheck_29>

080028e0 <??ZbZclAttrIntegerRangeCheck_28>:
 80028e0:	2000      	movs	r0, #0
 80028e2:	e14a      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080028e4 <??ZbZclAttrIntegerRangeCheck_29>:
 80028e4:	e131      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

080028e6 <??ZbZclAttrIntegerRangeCheck_3>:
 80028e6:	f07f 407f 	mvns.w	r0, #4278190080	; 0xff000000
 80028ea:	2100      	movs	r1, #0
 80028ec:	428d      	cmp	r5, r1
 80028ee:	d103      	bne.n	80028f8 <??ZbZclAttrIntegerRangeCheck_31>
 80028f0:	4284      	cmp	r4, r0
 80028f2:	d101      	bne.n	80028f8 <??ZbZclAttrIntegerRangeCheck_31>
 80028f4:	2001      	movs	r0, #1
 80028f6:	e140      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080028f8 <??ZbZclAttrIntegerRangeCheck_31>:
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	d407      	bmi.n	800290c <??ZbZclAttrIntegerRangeCheck_32>
 80028fc:	f05f 7080 	movs.w	r0, #16777216	; 0x1000000
 8002900:	2100      	movs	r1, #0
 8002902:	428d      	cmp	r5, r1
 8002904:	db04      	blt.n	8002910 <??ZbZclAttrIntegerRangeCheck_33>
 8002906:	dc01      	bgt.n	800290c <??ZbZclAttrIntegerRangeCheck_32>
 8002908:	4284      	cmp	r4, r0
 800290a:	d301      	bcc.n	8002910 <??ZbZclAttrIntegerRangeCheck_33>

0800290c <??ZbZclAttrIntegerRangeCheck_32>:
 800290c:	2000      	movs	r0, #0
 800290e:	e134      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002910 <??ZbZclAttrIntegerRangeCheck_33>:
 8002910:	e11b      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002912 <??ZbZclAttrIntegerRangeCheck_4>:
 8002912:	f05f 30ff 	movs.w	r0, #4294967295
 8002916:	2100      	movs	r1, #0
 8002918:	428d      	cmp	r5, r1
 800291a:	d103      	bne.n	8002924 <??ZbZclAttrIntegerRangeCheck_35>
 800291c:	4284      	cmp	r4, r0
 800291e:	d101      	bne.n	8002924 <??ZbZclAttrIntegerRangeCheck_35>
 8002920:	2001      	movs	r0, #1
 8002922:	e12a      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002924 <??ZbZclAttrIntegerRangeCheck_35>:
 8002924:	2d00      	cmp	r5, #0
 8002926:	d406      	bmi.n	8002936 <??ZbZclAttrIntegerRangeCheck_36>
 8002928:	2000      	movs	r0, #0
 800292a:	2101      	movs	r1, #1
 800292c:	428d      	cmp	r5, r1
 800292e:	db04      	blt.n	800293a <??ZbZclAttrIntegerRangeCheck_37>
 8002930:	dc01      	bgt.n	8002936 <??ZbZclAttrIntegerRangeCheck_36>
 8002932:	4284      	cmp	r4, r0
 8002934:	d301      	bcc.n	800293a <??ZbZclAttrIntegerRangeCheck_37>

08002936 <??ZbZclAttrIntegerRangeCheck_36>:
 8002936:	2000      	movs	r0, #0
 8002938:	e11f      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

0800293a <??ZbZclAttrIntegerRangeCheck_37>:
 800293a:	e106      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

0800293c <??ZbZclAttrIntegerRangeCheck_5>:
 800293c:	2dff      	cmp	r5, #255	; 0xff
 800293e:	d104      	bne.n	800294a <??ZbZclAttrIntegerRangeCheck_39>
 8002940:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002944:	d101      	bne.n	800294a <??ZbZclAttrIntegerRangeCheck_39>
 8002946:	2001      	movs	r0, #1
 8002948:	e117      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

0800294a <??ZbZclAttrIntegerRangeCheck_39>:
 800294a:	2d00      	cmp	r5, #0
 800294c:	d405      	bmi.n	800295a <??ZbZclAttrIntegerRangeCheck_40>
 800294e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002952:	db04      	blt.n	800295e <??ZbZclAttrIntegerRangeCheck_41>
 8002954:	dc01      	bgt.n	800295a <??ZbZclAttrIntegerRangeCheck_40>
 8002956:	2c00      	cmp	r4, #0
 8002958:	d301      	bcc.n	800295e <??ZbZclAttrIntegerRangeCheck_41>

0800295a <??ZbZclAttrIntegerRangeCheck_40>:
 800295a:	2000      	movs	r0, #0
 800295c:	e10d      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

0800295e <??ZbZclAttrIntegerRangeCheck_41>:
 800295e:	e0f4      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002960 <??ZbZclAttrIntegerRangeCheck_6>:
 8002960:	f05f 30ff 	movs.w	r0, #4294967295
 8002964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002968:	428d      	cmp	r5, r1
 800296a:	d103      	bne.n	8002974 <??ZbZclAttrIntegerRangeCheck_43>
 800296c:	4284      	cmp	r4, r0
 800296e:	d101      	bne.n	8002974 <??ZbZclAttrIntegerRangeCheck_43>
 8002970:	2001      	movs	r0, #1
 8002972:	e102      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002974 <??ZbZclAttrIntegerRangeCheck_43>:
 8002974:	2d00      	cmp	r5, #0
 8002976:	d405      	bmi.n	8002984 <??ZbZclAttrIntegerRangeCheck_44>
 8002978:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800297c:	db04      	blt.n	8002988 <??ZbZclAttrIntegerRangeCheck_45>
 800297e:	dc01      	bgt.n	8002984 <??ZbZclAttrIntegerRangeCheck_44>
 8002980:	2c00      	cmp	r4, #0
 8002982:	d301      	bcc.n	8002988 <??ZbZclAttrIntegerRangeCheck_45>

08002984 <??ZbZclAttrIntegerRangeCheck_44>:
 8002984:	2000      	movs	r0, #0
 8002986:	e0f8      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002988 <??ZbZclAttrIntegerRangeCheck_45>:
 8002988:	e0df      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

0800298a <??ZbZclAttrIntegerRangeCheck_7>:
 800298a:	f05f 30ff 	movs.w	r0, #4294967295
 800298e:	f07f 417f 	mvns.w	r1, #4278190080	; 0xff000000
 8002992:	428d      	cmp	r5, r1
 8002994:	d103      	bne.n	800299e <??ZbZclAttrIntegerRangeCheck_47>
 8002996:	4284      	cmp	r4, r0
 8002998:	d101      	bne.n	800299e <??ZbZclAttrIntegerRangeCheck_47>
 800299a:	2001      	movs	r0, #1
 800299c:	e0ed      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

0800299e <??ZbZclAttrIntegerRangeCheck_47>:
 800299e:	2d00      	cmp	r5, #0
 80029a0:	d407      	bmi.n	80029b2 <??ZbZclAttrIntegerRangeCheck_48>
 80029a2:	2000      	movs	r0, #0
 80029a4:	f05f 7180 	movs.w	r1, #16777216	; 0x1000000
 80029a8:	428d      	cmp	r5, r1
 80029aa:	db04      	blt.n	80029b6 <??ZbZclAttrIntegerRangeCheck_49>
 80029ac:	dc01      	bgt.n	80029b2 <??ZbZclAttrIntegerRangeCheck_48>
 80029ae:	4284      	cmp	r4, r0
 80029b0:	d301      	bcc.n	80029b6 <??ZbZclAttrIntegerRangeCheck_49>

080029b2 <??ZbZclAttrIntegerRangeCheck_48>:
 80029b2:	2000      	movs	r0, #0
 80029b4:	e0e1      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080029b6 <??ZbZclAttrIntegerRangeCheck_49>:
 80029b6:	e0c8      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

080029b8 <??ZbZclAttrIntegerRangeCheck_8>:
 80029b8:	f05f 30ff 	movs.w	r0, #4294967295
 80029bc:	f05f 31ff 	movs.w	r1, #4294967295
 80029c0:	428d      	cmp	r5, r1
 80029c2:	d103      	bne.n	80029cc <??ZbZclAttrIntegerRangeCheck_51>
 80029c4:	4284      	cmp	r4, r0
 80029c6:	d101      	bne.n	80029cc <??ZbZclAttrIntegerRangeCheck_51>
 80029c8:	2001      	movs	r0, #1
 80029ca:	e0d6      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080029cc <??ZbZclAttrIntegerRangeCheck_51>:
 80029cc:	e0bd      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

080029ce <??ZbZclAttrIntegerRangeCheck_9>:
 80029ce:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 80029d2:	f05f 31ff 	movs.w	r1, #4294967295
 80029d6:	428d      	cmp	r5, r1
 80029d8:	d103      	bne.n	80029e2 <??ZbZclAttrIntegerRangeCheck_52>
 80029da:	4284      	cmp	r4, r0
 80029dc:	d101      	bne.n	80029e2 <??ZbZclAttrIntegerRangeCheck_52>
 80029de:	2001      	movs	r0, #1
 80029e0:	e0cb      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

080029e2 <??ZbZclAttrIntegerRangeCheck_52>:
 80029e2:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 80029e6:	f05f 31ff 	movs.w	r1, #4294967295
 80029ea:	428d      	cmp	r5, r1
 80029ec:	db07      	blt.n	80029fe <??ZbZclAttrIntegerRangeCheck_53>
 80029ee:	dc01      	bgt.n	80029f4 <??ZbZclAttrIntegerRangeCheck_54>
 80029f0:	4284      	cmp	r4, r0
 80029f2:	d304      	bcc.n	80029fe <??ZbZclAttrIntegerRangeCheck_53>

080029f4 <??ZbZclAttrIntegerRangeCheck_54>:
 80029f4:	2d00      	cmp	r5, #0
 80029f6:	db04      	blt.n	8002a02 <??ZbZclAttrIntegerRangeCheck_55>
 80029f8:	dc01      	bgt.n	80029fe <??ZbZclAttrIntegerRangeCheck_53>
 80029fa:	2c80      	cmp	r4, #128	; 0x80
 80029fc:	d301      	bcc.n	8002a02 <??ZbZclAttrIntegerRangeCheck_55>

080029fe <??ZbZclAttrIntegerRangeCheck_53>:
 80029fe:	2000      	movs	r0, #0
 8002a00:	e0bb      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002a02 <??ZbZclAttrIntegerRangeCheck_55>:
 8002a02:	e0a2      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002a04 <??ZbZclAttrIntegerRangeCheck_10>:
 8002a04:	485e      	ldr	r0, [pc, #376]	; (8002b80 <??DataTable1>)
 8002a06:	f05f 31ff 	movs.w	r1, #4294967295
 8002a0a:	428d      	cmp	r5, r1
 8002a0c:	d103      	bne.n	8002a16 <??ZbZclAttrIntegerRangeCheck_57>
 8002a0e:	4284      	cmp	r4, r0
 8002a10:	d101      	bne.n	8002a16 <??ZbZclAttrIntegerRangeCheck_57>
 8002a12:	2001      	movs	r0, #1
 8002a14:	e0b1      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002a16 <??ZbZclAttrIntegerRangeCheck_57>:
 8002a16:	485a      	ldr	r0, [pc, #360]	; (8002b80 <??DataTable1>)
 8002a18:	f05f 31ff 	movs.w	r1, #4294967295
 8002a1c:	428d      	cmp	r5, r1
 8002a1e:	db08      	blt.n	8002a32 <??ZbZclAttrIntegerRangeCheck_58>
 8002a20:	dc01      	bgt.n	8002a26 <??ZbZclAttrIntegerRangeCheck_59>
 8002a22:	4284      	cmp	r4, r0
 8002a24:	d305      	bcc.n	8002a32 <??ZbZclAttrIntegerRangeCheck_58>

08002a26 <??ZbZclAttrIntegerRangeCheck_59>:
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	db05      	blt.n	8002a36 <??ZbZclAttrIntegerRangeCheck_60>
 8002a2a:	dc02      	bgt.n	8002a32 <??ZbZclAttrIntegerRangeCheck_58>
 8002a2c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002a30:	d301      	bcc.n	8002a36 <??ZbZclAttrIntegerRangeCheck_60>

08002a32 <??ZbZclAttrIntegerRangeCheck_58>:
 8002a32:	2000      	movs	r0, #0
 8002a34:	e0a1      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002a36 <??ZbZclAttrIntegerRangeCheck_60>:
 8002a36:	e088      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002a38 <??ZbZclAttrIntegerRangeCheck_11>:
 8002a38:	4852      	ldr	r0, [pc, #328]	; (8002b84 <??DataTable1_1>)
 8002a3a:	f05f 31ff 	movs.w	r1, #4294967295
 8002a3e:	428d      	cmp	r5, r1
 8002a40:	d103      	bne.n	8002a4a <??ZbZclAttrIntegerRangeCheck_62>
 8002a42:	4284      	cmp	r4, r0
 8002a44:	d101      	bne.n	8002a4a <??ZbZclAttrIntegerRangeCheck_62>
 8002a46:	2001      	movs	r0, #1
 8002a48:	e097      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002a4a <??ZbZclAttrIntegerRangeCheck_62>:
 8002a4a:	484e      	ldr	r0, [pc, #312]	; (8002b84 <??DataTable1_1>)
 8002a4c:	f05f 31ff 	movs.w	r1, #4294967295
 8002a50:	428d      	cmp	r5, r1
 8002a52:	db08      	blt.n	8002a66 <??ZbZclAttrIntegerRangeCheck_63>
 8002a54:	dc01      	bgt.n	8002a5a <??ZbZclAttrIntegerRangeCheck_64>
 8002a56:	4284      	cmp	r4, r0
 8002a58:	d305      	bcc.n	8002a66 <??ZbZclAttrIntegerRangeCheck_63>

08002a5a <??ZbZclAttrIntegerRangeCheck_64>:
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	db05      	blt.n	8002a6a <??ZbZclAttrIntegerRangeCheck_65>
 8002a5e:	dc02      	bgt.n	8002a66 <??ZbZclAttrIntegerRangeCheck_63>
 8002a60:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8002a64:	d301      	bcc.n	8002a6a <??ZbZclAttrIntegerRangeCheck_65>

08002a66 <??ZbZclAttrIntegerRangeCheck_63>:
 8002a66:	2000      	movs	r0, #0
 8002a68:	e087      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002a6a <??ZbZclAttrIntegerRangeCheck_65>:
 8002a6a:	e06e      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002a6c <??ZbZclAttrIntegerRangeCheck_12>:
 8002a6c:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8002a70:	f05f 31ff 	movs.w	r1, #4294967295
 8002a74:	428d      	cmp	r5, r1
 8002a76:	d103      	bne.n	8002a80 <??ZbZclAttrIntegerRangeCheck_67>
 8002a78:	4284      	cmp	r4, r0
 8002a7a:	d101      	bne.n	8002a80 <??ZbZclAttrIntegerRangeCheck_67>
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	e07c      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002a80 <??ZbZclAttrIntegerRangeCheck_67>:
 8002a80:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8002a84:	f05f 31ff 	movs.w	r1, #4294967295
 8002a88:	428d      	cmp	r5, r1
 8002a8a:	db08      	blt.n	8002a9e <??ZbZclAttrIntegerRangeCheck_68>
 8002a8c:	dc01      	bgt.n	8002a92 <??ZbZclAttrIntegerRangeCheck_69>
 8002a8e:	4284      	cmp	r4, r0
 8002a90:	d305      	bcc.n	8002a9e <??ZbZclAttrIntegerRangeCheck_68>

08002a92 <??ZbZclAttrIntegerRangeCheck_69>:
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	db05      	blt.n	8002aa2 <??ZbZclAttrIntegerRangeCheck_70>
 8002a96:	dc02      	bgt.n	8002a9e <??ZbZclAttrIntegerRangeCheck_68>
 8002a98:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002a9c:	d301      	bcc.n	8002aa2 <??ZbZclAttrIntegerRangeCheck_70>

08002a9e <??ZbZclAttrIntegerRangeCheck_68>:
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e06b      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002aa2 <??ZbZclAttrIntegerRangeCheck_70>:
 8002aa2:	e052      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002aa4 <??ZbZclAttrIntegerRangeCheck_13>:
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 8002aaa:	428d      	cmp	r5, r1
 8002aac:	d103      	bne.n	8002ab6 <??ZbZclAttrIntegerRangeCheck_72>
 8002aae:	4284      	cmp	r4, r0
 8002ab0:	d101      	bne.n	8002ab6 <??ZbZclAttrIntegerRangeCheck_72>
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	e061      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002ab6 <??ZbZclAttrIntegerRangeCheck_72>:
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 8002abc:	428d      	cmp	r5, r1
 8002abe:	db07      	blt.n	8002ad0 <??ZbZclAttrIntegerRangeCheck_73>
 8002ac0:	dc01      	bgt.n	8002ac6 <??ZbZclAttrIntegerRangeCheck_74>
 8002ac2:	4284      	cmp	r4, r0
 8002ac4:	d304      	bcc.n	8002ad0 <??ZbZclAttrIntegerRangeCheck_73>

08002ac6 <??ZbZclAttrIntegerRangeCheck_74>:
 8002ac6:	2d80      	cmp	r5, #128	; 0x80
 8002ac8:	db04      	blt.n	8002ad4 <??ZbZclAttrIntegerRangeCheck_75>
 8002aca:	dc01      	bgt.n	8002ad0 <??ZbZclAttrIntegerRangeCheck_73>
 8002acc:	2c00      	cmp	r4, #0
 8002ace:	d301      	bcc.n	8002ad4 <??ZbZclAttrIntegerRangeCheck_75>

08002ad0 <??ZbZclAttrIntegerRangeCheck_73>:
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e052      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002ad4 <??ZbZclAttrIntegerRangeCheck_75>:
 8002ad4:	e039      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002ad6 <??ZbZclAttrIntegerRangeCheck_14>:
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	4929      	ldr	r1, [pc, #164]	; (8002b80 <??DataTable1>)
 8002ada:	428d      	cmp	r5, r1
 8002adc:	d103      	bne.n	8002ae6 <??ZbZclAttrIntegerRangeCheck_77>
 8002ade:	4284      	cmp	r4, r0
 8002ae0:	d101      	bne.n	8002ae6 <??ZbZclAttrIntegerRangeCheck_77>
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	e049      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002ae6 <??ZbZclAttrIntegerRangeCheck_77>:
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	4925      	ldr	r1, [pc, #148]	; (8002b80 <??DataTable1>)
 8002aea:	428d      	cmp	r5, r1
 8002aec:	db08      	blt.n	8002b00 <??ZbZclAttrIntegerRangeCheck_78>
 8002aee:	dc01      	bgt.n	8002af4 <??ZbZclAttrIntegerRangeCheck_79>
 8002af0:	4284      	cmp	r4, r0
 8002af2:	d305      	bcc.n	8002b00 <??ZbZclAttrIntegerRangeCheck_78>

08002af4 <??ZbZclAttrIntegerRangeCheck_79>:
 8002af4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8002af8:	db04      	blt.n	8002b04 <??ZbZclAttrIntegerRangeCheck_80>
 8002afa:	dc01      	bgt.n	8002b00 <??ZbZclAttrIntegerRangeCheck_78>
 8002afc:	2c00      	cmp	r4, #0
 8002afe:	d301      	bcc.n	8002b04 <??ZbZclAttrIntegerRangeCheck_80>

08002b00 <??ZbZclAttrIntegerRangeCheck_78>:
 8002b00:	2000      	movs	r0, #0
 8002b02:	e03a      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002b04 <??ZbZclAttrIntegerRangeCheck_80>:
 8002b04:	e021      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002b06 <??ZbZclAttrIntegerRangeCheck_15>:
 8002b06:	2000      	movs	r0, #0
 8002b08:	491e      	ldr	r1, [pc, #120]	; (8002b84 <??DataTable1_1>)
 8002b0a:	428d      	cmp	r5, r1
 8002b0c:	d103      	bne.n	8002b16 <??ZbZclAttrIntegerRangeCheck_82>
 8002b0e:	4284      	cmp	r4, r0
 8002b10:	d101      	bne.n	8002b16 <??ZbZclAttrIntegerRangeCheck_82>
 8002b12:	2001      	movs	r0, #1
 8002b14:	e031      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002b16 <??ZbZclAttrIntegerRangeCheck_82>:
 8002b16:	2000      	movs	r0, #0
 8002b18:	491a      	ldr	r1, [pc, #104]	; (8002b84 <??DataTable1_1>)
 8002b1a:	428d      	cmp	r5, r1
 8002b1c:	db08      	blt.n	8002b30 <??ZbZclAttrIntegerRangeCheck_83>
 8002b1e:	dc01      	bgt.n	8002b24 <??ZbZclAttrIntegerRangeCheck_84>
 8002b20:	4284      	cmp	r4, r0
 8002b22:	d305      	bcc.n	8002b30 <??ZbZclAttrIntegerRangeCheck_83>

08002b24 <??ZbZclAttrIntegerRangeCheck_84>:
 8002b24:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 8002b28:	db04      	blt.n	8002b34 <??ZbZclAttrIntegerRangeCheck_85>
 8002b2a:	dc01      	bgt.n	8002b30 <??ZbZclAttrIntegerRangeCheck_83>
 8002b2c:	2c00      	cmp	r4, #0
 8002b2e:	d301      	bcc.n	8002b34 <??ZbZclAttrIntegerRangeCheck_85>

08002b30 <??ZbZclAttrIntegerRangeCheck_83>:
 8002b30:	2000      	movs	r0, #0
 8002b32:	e022      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002b34 <??ZbZclAttrIntegerRangeCheck_85>:
 8002b34:	e009      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002b36 <??ZbZclAttrIntegerRangeCheck_16>:
 8002b36:	2000      	movs	r0, #0
 8002b38:	f05f 4100 	movs.w	r1, #2147483648	; 0x80000000
 8002b3c:	428d      	cmp	r5, r1
 8002b3e:	d103      	bne.n	8002b48 <??ZbZclAttrIntegerRangeCheck_87>
 8002b40:	4284      	cmp	r4, r0
 8002b42:	d101      	bne.n	8002b48 <??ZbZclAttrIntegerRangeCheck_87>
 8002b44:	2001      	movs	r0, #1
 8002b46:	e018      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002b48 <??ZbZclAttrIntegerRangeCheck_87>:
 8002b48:	e7ff      	b.n	8002b4a <??ZbZclAttrIntegerRangeCheck_17>

08002b4a <??ZbZclAttrIntegerRangeCheck_17>:
 8002b4a:	ea56 0008 	orrs.w	r0, r6, r8
 8002b4e:	ea57 0109 	orrs.w	r1, r7, r9
 8002b52:	2900      	cmp	r1, #0
 8002b54:	d103      	bne.n	8002b5e <??ZbZclAttrIntegerRangeCheck_88>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d101      	bne.n	8002b5e <??ZbZclAttrIntegerRangeCheck_88>
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	e00d      	b.n	8002b7a <??ZbZclAttrIntegerRangeCheck_19>

08002b5e <??ZbZclAttrIntegerRangeCheck_88>:
 8002b5e:	42bd      	cmp	r5, r7
 8002b60:	db09      	blt.n	8002b76 <??ZbZclAttrIntegerRangeCheck_89>
 8002b62:	dc01      	bgt.n	8002b68 <??ZbZclAttrIntegerRangeCheck_90>
 8002b64:	42b4      	cmp	r4, r6
 8002b66:	d306      	bcc.n	8002b76 <??ZbZclAttrIntegerRangeCheck_89>

08002b68 <??ZbZclAttrIntegerRangeCheck_90>:
 8002b68:	45a9      	cmp	r9, r5
 8002b6a:	db04      	blt.n	8002b76 <??ZbZclAttrIntegerRangeCheck_89>
 8002b6c:	dc01      	bgt.n	8002b72 <??ZbZclAttrIntegerRangeCheck_91>
 8002b6e:	45a0      	cmp	r8, r4
 8002b70:	d301      	bcc.n	8002b76 <??ZbZclAttrIntegerRangeCheck_89>

08002b72 <??ZbZclAttrIntegerRangeCheck_91>:
 8002b72:	2001      	movs	r0, #1
 8002b74:	e000      	b.n	8002b78 <??ZbZclAttrIntegerRangeCheck_92>

08002b76 <??ZbZclAttrIntegerRangeCheck_89>:
 8002b76:	2000      	movs	r0, #0

08002b78 <??ZbZclAttrIntegerRangeCheck_92>:
 8002b78:	b2c0      	uxtb	r0, r0

08002b7a <??ZbZclAttrIntegerRangeCheck_19>:
 8002b7a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002b7e:	4770      	bx	lr

08002b80 <??DataTable1>:
 8002b80:	8000 ffff                                   ....

08002b84 <??DataTable1_1>:
 8002b84:	0000 ff80                                   ....

08002b88 <ZbZclAttrIntegerRead>:
 8002b88:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	0006      	movs	r6, r0
 8002b90:	000f      	movs	r7, r1
 8002b92:	0015      	movs	r5, r2
 8002b94:	001c      	movs	r4, r3
 8002b96:	2000      	movs	r0, #0
 8002b98:	f88d 0009 	strb.w	r0, [sp, #9]
 8002b9c:	f05f 0808 	movs.w	r8, #8
 8002ba0:	f05f 0900 	movs.w	r9, #0
 8002ba4:	f10d 0a0c 	add.w	sl, sp, #12
 8002ba8:	464a      	mov	r2, r9
 8002baa:	4641      	mov	r1, r8
 8002bac:	4650      	mov	r0, sl
 8002bae:	f003 f870 	bl	8005c92 <__aeabi_memset>
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	9001      	str	r0, [sp, #4]
 8002bb6:	2008      	movs	r0, #8
 8002bb8:	9000      	str	r0, [sp, #0]
 8002bba:	ab03      	add	r3, sp, #12
 8002bbc:	f10d 0209 	add.w	r2, sp, #9
 8002bc0:	0039      	movs	r1, r7
 8002bc2:	b289      	uxth	r1, r1
 8002bc4:	0030      	movs	r0, r6
 8002bc6:	f7fe fcee 	bl	80015a6 <ZbZclAttrRead>
 8002bca:	f88d 0008 	strb.w	r0, [sp, #8]
 8002bce:	2c00      	cmp	r4, #0
 8002bd0:	d002      	beq.n	8002bd8 <??ZbZclAttrIntegerRead_0>
 8002bd2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002bd6:	7020      	strb	r0, [r4, #0]

08002bd8 <??ZbZclAttrIntegerRead_0>:
 8002bd8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d002      	beq.n	8002be6 <??ZbZclAttrIntegerRead_1>
 8002be0:	2000      	movs	r0, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	e01a      	b.n	8002c1c <??ZbZclAttrIntegerRead_2>

08002be6 <??ZbZclAttrIntegerRead_1>:
 8002be6:	aa02      	add	r2, sp, #8
 8002be8:	a903      	add	r1, sp, #12
 8002bea:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002bee:	f7ff fcb1 	bl	8002554 <ZbZclParseInteger>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	000b      	movs	r3, r1
 8002bf6:	2c00      	cmp	r4, #0
 8002bf8:	d002      	beq.n	8002c00 <??ZbZclAttrIntegerRead_3>
 8002bfa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002bfe:	7020      	strb	r0, [r4, #0]

08002c00 <??ZbZclAttrIntegerRead_3>:
 8002c00:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d002      	beq.n	8002c0e <??ZbZclAttrIntegerRead_4>
 8002c08:	2000      	movs	r0, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	e006      	b.n	8002c1c <??ZbZclAttrIntegerRead_2>

08002c0e <??ZbZclAttrIntegerRead_4>:
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	d002      	beq.n	8002c18 <??ZbZclAttrIntegerRead_5>
 8002c12:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002c16:	7028      	strb	r0, [r5, #0]

08002c18 <??ZbZclAttrIntegerRead_5>:
 8002c18:	0010      	movs	r0, r2
 8002c1a:	0019      	movs	r1, r3

08002c1c <??ZbZclAttrIntegerRead_2>:
 8002c1c:	b006      	add	sp, #24
 8002c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002c22 <ZbZclAttrIntegerWrite>:
 8002c22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c26:	b087      	sub	sp, #28
 8002c28:	4680      	mov	r8, r0
 8002c2a:	4689      	mov	r9, r1
 8002c2c:	0014      	movs	r4, r2
 8002c2e:	001d      	movs	r5, r3
 8002c30:	f1b8 0f00 	cmp.w	r8, #0
 8002c34:	d101      	bne.n	8002c3a <??ZbZclAttrIntegerWrite_0>
 8002c36:	2087      	movs	r0, #135	; 0x87
 8002c38:	e042      	b.n	8002cc0 <??ZbZclAttrIntegerWrite_1>

08002c3a <??ZbZclAttrIntegerWrite_0>:
 8002c3a:	ab04      	add	r3, sp, #16
 8002c3c:	f10d 0211 	add.w	r2, sp, #17
 8002c40:	4649      	mov	r1, r9
 8002c42:	b289      	uxth	r1, r1
 8002c44:	4640      	mov	r0, r8
 8002c46:	f7ff ff9f 	bl	8002b88 <ZbZclAttrIntegerRead>
 8002c4a:	0006      	movs	r6, r0
 8002c4c:	000f      	movs	r7, r1
 8002c4e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d002      	beq.n	8002c5c <??ZbZclAttrIntegerWrite_2>
 8002c56:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002c5a:	e031      	b.n	8002cc0 <??ZbZclAttrIntegerWrite_1>

08002c5c <??ZbZclAttrIntegerWrite_2>:
 8002c5c:	42af      	cmp	r7, r5
 8002c5e:	d103      	bne.n	8002c68 <??ZbZclAttrIntegerWrite_3>
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d101      	bne.n	8002c68 <??ZbZclAttrIntegerWrite_3>
 8002c64:	2000      	movs	r0, #0
 8002c66:	e02b      	b.n	8002cc0 <??ZbZclAttrIntegerWrite_1>

08002c68 <??ZbZclAttrIntegerWrite_3>:
 8002c68:	2000      	movs	r0, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c70:	2000      	movs	r0, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	e9cd 0100 	strd	r0, r1, [sp]
 8002c78:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002c7c:	0020      	movs	r0, r4
 8002c7e:	0029      	movs	r1, r5
 8002c80:	f7ff fdac 	bl	80027dc <ZbZclAttrIntegerRangeCheck>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d101      	bne.n	8002c8c <??ZbZclAttrIntegerWrite_4>
 8002c88:	2087      	movs	r0, #135	; 0x87
 8002c8a:	e019      	b.n	8002cc0 <??ZbZclAttrIntegerWrite_1>

08002c8c <??ZbZclAttrIntegerWrite_4>:
 8002c8c:	0022      	movs	r2, r4
 8002c8e:	002b      	movs	r3, r5
 8002c90:	a805      	add	r0, sp, #20
 8002c92:	f7fe fb45 	bl	8001320 <putle64>
 8002c96:	2002      	movs	r0, #2
 8002c98:	9001      	str	r0, [sp, #4]
 8002c9a:	2008      	movs	r0, #8
 8002c9c:	9000      	str	r0, [sp, #0]
 8002c9e:	ab05      	add	r3, sp, #20
 8002ca0:	464a      	mov	r2, r9
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4640      	mov	r0, r8
 8002ca8:	f7fe fdcf 	bl	800184a <ZbZclAttrWrite>
 8002cac:	f88d 0010 	strb.w	r0, [sp, #16]
 8002cb0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d002      	beq.n	8002cbe <??ZbZclAttrIntegerWrite_5>
 8002cb8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002cbc:	e000      	b.n	8002cc0 <??ZbZclAttrIntegerWrite_1>

08002cbe <??ZbZclAttrIntegerWrite_5>:
 8002cbe:	2000      	movs	r0, #0

08002cc0 <??ZbZclAttrIntegerWrite_1>:
 8002cc0:	b007      	add	sp, #28
 8002cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002cc6 <ZbZclAttrIntegerIncrement>:
 8002cc6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	468b      	mov	fp, r1
 8002cce:	0016      	movs	r6, r2
 8002cd0:	001f      	movs	r7, r3
 8002cd2:	f05f 0a00 	movs.w	sl, #0
 8002cd6:	466b      	mov	r3, sp
 8002cd8:	f10d 0201 	add.w	r2, sp, #1
 8002cdc:	4659      	mov	r1, fp
 8002cde:	b289      	uxth	r1, r1
 8002ce0:	9804      	ldr	r0, [sp, #16]
 8002ce2:	f7ff ff51 	bl	8002b88 <ZbZclAttrIntegerRead>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	000b      	movs	r3, r1
 8002cea:	f89d 0000 	ldrb.w	r0, [sp]
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d002      	beq.n	8002cf8 <??ZbZclAttrIntegerIncrement_0>
 8002cf2:	f89d 0000 	ldrb.w	r0, [sp]
 8002cf6:	e03e      	b.n	8002d76 <??ZbZclAttrIntegerIncrement_1>

08002cf8 <??ZbZclAttrIntegerIncrement_0>:
 8002cf8:	eb12 0806 	adds.w	r8, r2, r6
 8002cfc:	eb53 0907 	adcs.w	r9, r3, r7
 8002d00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d04:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002d08:	f7ff f9ea 	bl	80020e0 <ZbZclAttrTypeLength>
 8002d0c:	9001      	str	r0, [sp, #4]
 8002d0e:	9801      	ldr	r0, [sp, #4]
 8002d10:	2801      	cmp	r0, #1
 8002d12:	d017      	beq.n	8002d44 <??ZbZclAttrIntegerIncrement_2>
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d00b      	beq.n	8002d30 <??ZbZclAttrIntegerIncrement_3>
 8002d18:	2804      	cmp	r0, #4
 8002d1a:	d002      	beq.n	8002d22 <??ZbZclAttrIntegerIncrement_4>
 8002d1c:	2808      	cmp	r0, #8
 8002d1e:	d118      	bne.n	8002d52 <??ZbZclAttrIntegerIncrement_5>

08002d20 <??ZbZclAttrIntegerIncrement_6>:
 8002d20:	e019      	b.n	8002d56 <??ZbZclAttrIntegerIncrement_7>

08002d22 <??ZbZclAttrIntegerIncrement_4>:
 8002d22:	f038 0000 	bics.w	r0, r8, #0
 8002d26:	f039 31ff 	bics.w	r1, r9, #4294967295
 8002d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d2e:	e012      	b.n	8002d56 <??ZbZclAttrIntegerIncrement_7>

08002d30 <??ZbZclAttrIntegerIncrement_3>:
 8002d30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d34:	2100      	movs	r1, #0
 8002d36:	ea18 0000 	ands.w	r0, r8, r0
 8002d3a:	ea19 0101 	ands.w	r1, r9, r1
 8002d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d42:	e008      	b.n	8002d56 <??ZbZclAttrIntegerIncrement_7>

08002d44 <??ZbZclAttrIntegerIncrement_2>:
 8002d44:	f018 00ff 	ands.w	r0, r8, #255	; 0xff
 8002d48:	f019 0100 	ands.w	r1, r9, #0
 8002d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d50:	e001      	b.n	8002d56 <??ZbZclAttrIntegerIncrement_7>

08002d52 <??ZbZclAttrIntegerIncrement_5>:
 8002d52:	2001      	movs	r0, #1
 8002d54:	4682      	mov	sl, r0

08002d56 <??ZbZclAttrIntegerIncrement_7>:
 8002d56:	4650      	mov	r0, sl
 8002d58:	b2c0      	uxtb	r0, r0
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d001      	beq.n	8002d62 <??ZbZclAttrIntegerIncrement_8>
 8002d5e:	2086      	movs	r0, #134	; 0x86
 8002d60:	e009      	b.n	8002d76 <??ZbZclAttrIntegerIncrement_1>

08002d62 <??ZbZclAttrIntegerIncrement_8>:
 8002d62:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002d66:	0022      	movs	r2, r4
 8002d68:	002b      	movs	r3, r5
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	b289      	uxth	r1, r1
 8002d6e:	9804      	ldr	r0, [sp, #16]
 8002d70:	f7ff ff57 	bl	8002c22 <ZbZclAttrIntegerWrite>
 8002d74:	2000      	movs	r0, #0

08002d76 <??ZbZclAttrIntegerIncrement_1>:
 8002d76:	b005      	add	sp, #20
 8002d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d7c <ZbZclAttrEuiRead>:
 8002d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	0005      	movs	r5, r0
 8002d84:	000e      	movs	r6, r1
 8002d86:	0014      	movs	r4, r2
 8002d88:	f05f 0808 	movs.w	r8, #8
 8002d8c:	f05f 0900 	movs.w	r9, #0
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	464a      	mov	r2, r9
 8002d94:	4641      	mov	r1, r8
 8002d96:	0038      	movs	r0, r7
 8002d98:	f002 ff7b 	bl	8005c92 <__aeabi_memset>
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	9001      	str	r0, [sp, #4]
 8002da0:	2008      	movs	r0, #8
 8002da2:	9000      	str	r0, [sp, #0]
 8002da4:	ab02      	add	r3, sp, #8
 8002da6:	2200      	movs	r2, #0
 8002da8:	0031      	movs	r1, r6
 8002daa:	b289      	uxth	r1, r1
 8002dac:	0028      	movs	r0, r5
 8002dae:	f7fe fbfa 	bl	80015a6 <ZbZclAttrRead>
 8002db2:	0007      	movs	r7, r0
 8002db4:	2c00      	cmp	r4, #0
 8002db6:	d000      	beq.n	8002dba <??ZbZclAttrEuiRead_0>
 8002db8:	7027      	strb	r7, [r4, #0]

08002dba <??ZbZclAttrEuiRead_0>:
 8002dba:	0038      	movs	r0, r7
 8002dbc:	b2c0      	uxtb	r0, r0
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d002      	beq.n	8002dc8 <??ZbZclAttrEuiRead_1>
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	e002      	b.n	8002dce <??ZbZclAttrEuiRead_2>

08002dc8 <??ZbZclAttrEuiRead_1>:
 8002dc8:	a802      	add	r0, sp, #8
 8002dca:	f7fe fa56 	bl	800127a <pletoh64>

08002dce <??ZbZclAttrEuiRead_2>:
 8002dce:	b005      	add	sp, #20
 8002dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002dd4 <ZbZclAttrEuiWrite>:
 8002dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	4680      	mov	r8, r0
 8002ddc:	4689      	mov	r9, r1
 8002dde:	0014      	movs	r4, r2
 8002de0:	001d      	movs	r5, r3
 8002de2:	f1b8 0f00 	cmp.w	r8, #0
 8002de6:	d101      	bne.n	8002dec <??ZbZclAttrEuiWrite_0>
 8002de8:	2087      	movs	r0, #135	; 0x87
 8002dea:	e02e      	b.n	8002e4a <??ZbZclAttrEuiWrite_1>

08002dec <??ZbZclAttrEuiWrite_0>:
 8002dec:	aa02      	add	r2, sp, #8
 8002dee:	4649      	mov	r1, r9
 8002df0:	b289      	uxth	r1, r1
 8002df2:	4640      	mov	r0, r8
 8002df4:	f7ff ffc2 	bl	8002d7c <ZbZclAttrEuiRead>
 8002df8:	0006      	movs	r6, r0
 8002dfa:	000f      	movs	r7, r1
 8002dfc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d002      	beq.n	8002e0a <??ZbZclAttrEuiWrite_2>
 8002e04:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002e08:	e01f      	b.n	8002e4a <??ZbZclAttrEuiWrite_1>

08002e0a <??ZbZclAttrEuiWrite_2>:
 8002e0a:	42af      	cmp	r7, r5
 8002e0c:	d103      	bne.n	8002e16 <??ZbZclAttrEuiWrite_3>
 8002e0e:	42a6      	cmp	r6, r4
 8002e10:	d101      	bne.n	8002e16 <??ZbZclAttrEuiWrite_3>
 8002e12:	2000      	movs	r0, #0
 8002e14:	e019      	b.n	8002e4a <??ZbZclAttrEuiWrite_1>

08002e16 <??ZbZclAttrEuiWrite_3>:
 8002e16:	0022      	movs	r2, r4
 8002e18:	002b      	movs	r3, r5
 8002e1a:	a803      	add	r0, sp, #12
 8002e1c:	f7fe fa80 	bl	8001320 <putle64>
 8002e20:	2002      	movs	r0, #2
 8002e22:	9001      	str	r0, [sp, #4]
 8002e24:	2008      	movs	r0, #8
 8002e26:	9000      	str	r0, [sp, #0]
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	464a      	mov	r2, r9
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4640      	mov	r0, r8
 8002e32:	f7fe fd0a 	bl	800184a <ZbZclAttrWrite>
 8002e36:	f88d 0008 	strb.w	r0, [sp, #8]
 8002e3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d002      	beq.n	8002e48 <??ZbZclAttrEuiWrite_4>
 8002e42:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002e46:	e000      	b.n	8002e4a <??ZbZclAttrEuiWrite_1>

08002e48 <??ZbZclAttrEuiWrite_4>:
 8002e48:	2000      	movs	r0, #0

08002e4a <??ZbZclAttrEuiWrite_1>:
 8002e4a:	b005      	add	sp, #20
 8002e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002e50 <ZbZclAttrAppendList>:
 8002e50:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e54:	b089      	sub	sp, #36	; 0x24
 8002e56:	0007      	movs	r7, r0
 8002e58:	000e      	movs	r6, r1
 8002e5a:	68b8      	ldr	r0, [r7, #8]
 8002e5c:	9008      	str	r0, [sp, #32]
 8002e5e:	2e00      	cmp	r6, #0
 8002e60:	d002      	beq.n	8002e68 <??ZbZclAttrAppendList_0>
 8002e62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d101      	bne.n	8002e6c <??ZbZclAttrAppendList_1>

08002e68 <??ZbZclAttrAppendList_0>:
 8002e68:	2000      	movs	r0, #0
 8002e6a:	e0c6      	b.n	8002ffa <??ZbZclAttrAppendList_2>

08002e6c <??ZbZclAttrAppendList_1>:
 8002e6c:	f05f 0800 	movs.w	r8, #0

08002e70 <??ZbZclAttrAppendList_3>:
 8002e70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e72:	4580      	cmp	r8, r0
 8002e74:	f080 80bd 	bcs.w	8002ff2 <??ZbZclAttrAppendList_4>
 8002e78:	f05f 0928 	movs.w	r9, #40	; 0x28
 8002e7c:	fb09 f008 	mul.w	r0, r9, r8
 8002e80:	4430      	add	r0, r6
 8002e82:	7900      	ldrb	r0, [r0, #4]
 8002e84:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8002e88:	d007      	beq.n	8002e9a <??ZbZclAttrAppendList_5>
 8002e8a:	fb09 f008 	mul.w	r0, r9, r8
 8002e8e:	4430      	add	r0, r6
 8002e90:	68c0      	ldr	r0, [r0, #12]
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d101      	bne.n	8002e9a <??ZbZclAttrAppendList_5>
 8002e96:	2001      	movs	r0, #1
 8002e98:	e0af      	b.n	8002ffa <??ZbZclAttrAppendList_2>

08002e9a <??ZbZclAttrAppendList_5>:
 8002e9a:	fb09 f008 	mul.w	r0, r9, r8
 8002e9e:	5a31      	ldrh	r1, [r6, r0]
 8002ea0:	0038      	movs	r0, r7
 8002ea2:	f7fe fa7c 	bl	800139e <ZbZclAttrFind>
 8002ea6:	0005      	movs	r5, r0
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	d003      	beq.n	8002eb4 <??ZbZclAttrAppendList_6>
 8002eac:	0029      	movs	r1, r5
 8002eae:	0038      	movs	r0, r7
 8002eb0:	f000 f8b6 	bl	8003020 <ZbZclAttrFreeAttr>

08002eb4 <??ZbZclAttrAppendList_6>:
 8002eb4:	2418      	movs	r4, #24
 8002eb6:	f05f 0a00 	movs.w	sl, #0
 8002eba:	f10d 0b04 	add.w	fp, sp, #4
 8002ebe:	4652      	mov	r2, sl
 8002ec0:	0021      	movs	r1, r4
 8002ec2:	4658      	mov	r0, fp
 8002ec4:	f002 fee5 	bl	8005c92 <__aeabi_memset>
 8002ec8:	a801      	add	r0, sp, #4
 8002eca:	9001      	str	r0, [sp, #4]
 8002ecc:	a801      	add	r0, sp, #4
 8002ece:	9002      	str	r0, [sp, #8]
 8002ed0:	fb09 f008 	mul.w	r0, r9, r8
 8002ed4:	4430      	add	r0, r6
 8002ed6:	9003      	str	r0, [sp, #12]
 8002ed8:	fb09 f008 	mul.w	r0, r9, r8
 8002edc:	4430      	add	r0, r6
 8002ede:	7900      	ldrb	r0, [r0, #4]
 8002ee0:	0780      	lsls	r0, r0, #30
 8002ee2:	d50b      	bpl.n	8002efc <??ZbZclAttrAppendList_7>
 8002ee4:	fb09 f008 	mul.w	r0, r9, r8
 8002ee8:	4430      	add	r0, r6
 8002eea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8002eec:	f8ad 001a 	strh.w	r0, [sp, #26]
 8002ef0:	fb09 f008 	mul.w	r0, r9, r8
 8002ef4:	4430      	add	r0, r6
 8002ef6:	8c00      	ldrh	r0, [r0, #32]
 8002ef8:	f8ad 0018 	strh.w	r0, [sp, #24]

08002efc <??ZbZclAttrAppendList_7>:
 8002efc:	fb09 f008 	mul.w	r0, r9, r8
 8002f00:	4430      	add	r0, r6
 8002f02:	7900      	ldrb	r0, [r0, #4]
 8002f04:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 8002f08:	2830      	cmp	r0, #48	; 0x30
 8002f0a:	d108      	bne.n	8002f1e <??ZbZclAttrAppendList_8>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	9000      	str	r0, [sp, #0]
 8002f10:	fb09 f908 	mul.w	r9, r9, r8
 8002f14:	eb06 0009 	add.w	r0, r6, r9
 8002f18:	6880      	ldr	r0, [r0, #8]
 8002f1a:	9005      	str	r0, [sp, #20]
 8002f1c:	e034      	b.n	8002f88 <??ZbZclAttrAppendList_9>

08002f1e <??ZbZclAttrAppendList_8>:
 8002f1e:	fb09 f008 	mul.w	r0, r9, r8
 8002f22:	4430      	add	r0, r6
 8002f24:	6880      	ldr	r0, [r0, #8]
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d01f      	beq.n	8002f6a <??ZbZclAttrAppendList_10>
 8002f2a:	fb09 f908 	mul.w	r9, r9, r8
 8002f2e:	eb06 0009 	add.w	r0, r6, r9
 8002f32:	6880      	ldr	r0, [r0, #8]
 8002f34:	9005      	str	r0, [sp, #20]
 8002f36:	9803      	ldr	r0, [sp, #12]
 8002f38:	7880      	ldrb	r0, [r0, #2]
 8002f3a:	2841      	cmp	r0, #65	; 0x41
 8002f3c:	d003      	beq.n	8002f46 <??ZbZclAttrAppendList_11>
 8002f3e:	9803      	ldr	r0, [sp, #12]
 8002f40:	7880      	ldrb	r0, [r0, #2]
 8002f42:	2842      	cmp	r0, #66	; 0x42
 8002f44:	d103      	bne.n	8002f4e <??ZbZclAttrAppendList_12>

08002f46 <??ZbZclAttrAppendList_11>:
 8002f46:	9805      	ldr	r0, [sp, #20]
 8002f48:	1c40      	adds	r0, r0, #1
 8002f4a:	9005      	str	r0, [sp, #20]
 8002f4c:	e00a      	b.n	8002f64 <??ZbZclAttrAppendList_13>

08002f4e <??ZbZclAttrAppendList_12>:
 8002f4e:	9803      	ldr	r0, [sp, #12]
 8002f50:	7880      	ldrb	r0, [r0, #2]
 8002f52:	2843      	cmp	r0, #67	; 0x43
 8002f54:	d003      	beq.n	8002f5e <??ZbZclAttrAppendList_14>
 8002f56:	9803      	ldr	r0, [sp, #12]
 8002f58:	7880      	ldrb	r0, [r0, #2]
 8002f5a:	2844      	cmp	r0, #68	; 0x44
 8002f5c:	d102      	bne.n	8002f64 <??ZbZclAttrAppendList_13>

08002f5e <??ZbZclAttrAppendList_14>:
 8002f5e:	9805      	ldr	r0, [sp, #20]
 8002f60:	1c80      	adds	r0, r0, #2
 8002f62:	9005      	str	r0, [sp, #20]

08002f64 <??ZbZclAttrAppendList_13>:
 8002f64:	9805      	ldr	r0, [sp, #20]
 8002f66:	9000      	str	r0, [sp, #0]
 8002f68:	e00e      	b.n	8002f88 <??ZbZclAttrAppendList_9>

08002f6a <??ZbZclAttrAppendList_10>:
 8002f6a:	fb09 f908 	mul.w	r9, r9, r8
 8002f6e:	eb06 0009 	add.w	r0, r6, r9
 8002f72:	7880      	ldrb	r0, [r0, #2]
 8002f74:	f7ff f8b4 	bl	80020e0 <ZbZclAttrTypeLength>
 8002f78:	9005      	str	r0, [sp, #20]
 8002f7a:	9805      	ldr	r0, [sp, #20]
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d101      	bne.n	8002f84 <??ZbZclAttrAppendList_15>
 8002f80:	208d      	movs	r0, #141	; 0x8d
 8002f82:	e03a      	b.n	8002ffa <??ZbZclAttrAppendList_2>

08002f84 <??ZbZclAttrAppendList_15>:
 8002f84:	9805      	ldr	r0, [sp, #20]
 8002f86:	9000      	str	r0, [sp, #0]

08002f88 <??ZbZclAttrAppendList_9>:
 8002f88:	2300      	movs	r3, #0
 8002f8a:	a236      	add	r2, pc, #216	; (adr r2, 8003064 <??DataTable1>)
 8002f8c:	9900      	ldr	r1, [sp, #0]
 8002f8e:	3118      	adds	r1, #24
 8002f90:	9808      	ldr	r0, [sp, #32]
 8002f92:	f00a fe39 	bl	800dc08 <zb_heap_alloc>
 8002f96:	0004      	movs	r4, r0
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	d101      	bne.n	8002fa0 <??ZbZclAttrAppendList_16>
 8002f9c:	2089      	movs	r0, #137	; 0x89
 8002f9e:	e02c      	b.n	8002ffa <??ZbZclAttrAppendList_2>

08002fa0 <??ZbZclAttrAppendList_16>:
 8002fa0:	2518      	movs	r5, #24
 8002fa2:	f10d 0904 	add.w	r9, sp, #4
 8002fa6:	46a2      	mov	sl, r4
 8002fa8:	002a      	movs	r2, r5
 8002faa:	4649      	mov	r1, r9
 8002fac:	4650      	mov	r0, sl
 8002fae:	f00d fe9e 	bl	8010cee <__aeabi_memcpy>
 8002fb2:	9800      	ldr	r0, [sp, #0]
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d00c      	beq.n	8002fd2 <??ZbZclAttrAppendList_17>
 8002fb8:	f114 0018 	adds.w	r0, r4, #24
 8002fbc:	60e0      	str	r0, [r4, #12]
 8002fbe:	9800      	ldr	r0, [sp, #0]
 8002fc0:	9007      	str	r0, [sp, #28]
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8002fc8:	002a      	movs	r2, r5
 8002fca:	9907      	ldr	r1, [sp, #28]
 8002fcc:	4648      	mov	r0, r9
 8002fce:	f002 fe60 	bl	8005c92 <__aeabi_memset>

08002fd2 <??ZbZclAttrAppendList_17>:
 8002fd2:	0021      	movs	r1, r4
 8002fd4:	0038      	movs	r0, r7
 8002fd6:	f7fe f9b3 	bl	8001340 <ZbZclAttrAddSorted>
 8002fda:	68e0      	ldr	r0, [r4, #12]
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d005      	beq.n	8002fec <??ZbZclAttrAppendList_18>
 8002fe0:	6922      	ldr	r2, [r4, #16]
 8002fe2:	68e1      	ldr	r1, [r4, #12]
 8002fe4:	68a0      	ldr	r0, [r4, #8]
 8002fe6:	7880      	ldrb	r0, [r0, #2]
 8002fe8:	f7fe fdfa 	bl	8001be0 <ZbZclAttrDefaultValue>

08002fec <??ZbZclAttrAppendList_18>:
 8002fec:	f118 0801 	adds.w	r8, r8, #1
 8002ff0:	e73e      	b.n	8002e70 <??ZbZclAttrAppendList_3>

08002ff2 <??ZbZclAttrAppendList_4>:
 8002ff2:	0038      	movs	r0, r7
 8002ff4:	f000 ff3a 	bl	8003e6c <zcl_reporting_create_default_reports>
 8002ff8:	2000      	movs	r0, #0

08002ffa <??ZbZclAttrAppendList_2>:
 8002ffa:	b00b      	add	sp, #44	; 0x2c
 8002ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003000 <ZbZclAttrCallbackExec>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	0004      	movs	r4, r0
 8003004:	000d      	movs	r5, r1
 8003006:	0016      	movs	r6, r2
 8003008:	68a8      	ldr	r0, [r5, #8]
 800300a:	68c0      	ldr	r0, [r0, #12]
 800300c:	2800      	cmp	r0, #0
 800300e:	d005      	beq.n	800301c <??ZbZclAttrCallbackExec_0>
 8003010:	0031      	movs	r1, r6
 8003012:	0020      	movs	r0, r4
 8003014:	68aa      	ldr	r2, [r5, #8]
 8003016:	68d2      	ldr	r2, [r2, #12]
 8003018:	4790      	blx	r2
 800301a:	e000      	b.n	800301e <??ZbZclAttrCallbackExec_1>

0800301c <??ZbZclAttrCallbackExec_0>:
 800301c:	2001      	movs	r0, #1

0800301e <??ZbZclAttrCallbackExec_1>:
 800301e:	bd70      	pop	{r4, r5, r6, pc}

08003020 <ZbZclAttrFreeAttr>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	0004      	movs	r4, r0
 8003024:	000d      	movs	r5, r1
 8003026:	68a8      	ldr	r0, [r5, #8]
 8003028:	7900      	ldrb	r0, [r0, #4]
 800302a:	0780      	lsls	r0, r0, #30
 800302c:	d50b      	bpl.n	8003046 <??ZbZclAttrFreeAttr_0>
 800302e:	2200      	movs	r2, #0
 8003030:	68a8      	ldr	r0, [r5, #8]
 8003032:	8801      	ldrh	r1, [r0, #0]
 8003034:	0020      	movs	r0, r4
 8003036:	f000 fdfd 	bl	8003c34 <zcl_cluster_attr_report_delete>
 800303a:	2201      	movs	r2, #1
 800303c:	68a8      	ldr	r0, [r5, #8]
 800303e:	8801      	ldrh	r1, [r0, #0]
 8003040:	0020      	movs	r0, r4
 8003042:	f000 fdf7 	bl	8003c34 <zcl_cluster_attr_report_delete>

08003046 <??ZbZclAttrFreeAttr_0>:
 8003046:	6868      	ldr	r0, [r5, #4]
 8003048:	6829      	ldr	r1, [r5, #0]
 800304a:	6048      	str	r0, [r1, #4]
 800304c:	6828      	ldr	r0, [r5, #0]
 800304e:	6869      	ldr	r1, [r5, #4]
 8003050:	6008      	str	r0, [r1, #0]
 8003052:	602d      	str	r5, [r5, #0]
 8003054:	606d      	str	r5, [r5, #4]
 8003056:	2300      	movs	r3, #0
 8003058:	a202      	add	r2, pc, #8	; (adr r2, 8003064 <??DataTable1>)
 800305a:	0029      	movs	r1, r5
 800305c:	68a0      	ldr	r0, [r4, #8]
 800305e:	f00a fde2 	bl	800dc26 <zb_heap_free>
 8003062:	bd31      	pop	{r0, r4, r5, pc}

08003064 <??DataTable1>:
 8003064:	0000 0000                                   ....

08003068 <ZbZclAttrFreeList>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	0005      	movs	r5, r0

0800306c <??ZbZclAttrFreeList_0>:
 800306c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800306e:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003072:	4288      	cmp	r0, r1
 8003074:	d001      	beq.n	800307a <??ZbZclAttrFreeList_1>
 8003076:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003078:	e000      	b.n	800307c <??ZbZclAttrFreeList_2>

0800307a <??ZbZclAttrFreeList_1>:
 800307a:	2400      	movs	r4, #0

0800307c <??ZbZclAttrFreeList_2>:
 800307c:	2c00      	cmp	r4, #0
 800307e:	d005      	beq.n	800308c <??ZbZclAttrFreeList_3>

08003080 <??ZbZclAttrFreeList_4>:
 8003080:	0026      	movs	r6, r4
 8003082:	0031      	movs	r1, r6
 8003084:	0028      	movs	r0, r5
 8003086:	f7ff ffcb 	bl	8003020 <ZbZclAttrFreeAttr>
 800308a:	e7ef      	b.n	800306c <??ZbZclAttrFreeList_0>

0800308c <??ZbZclAttrFreeList_3>:
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <zcl_reporting_send_conf>:
 8003090:	000b      	movs	r3, r1
 8003092:	7e02      	ldrb	r2, [r0, #24]
 8003094:	2a00      	cmp	r2, #0
 8003096:	d004      	beq.n	80030a2 <??zcl_reporting_send_conf_0>
 8003098:	7e02      	ldrb	r2, [r0, #24]
 800309a:	2aa4      	cmp	r2, #164	; 0xa4
 800309c:	d001      	beq.n	80030a2 <??zcl_reporting_send_conf_0>
 800309e:	7e02      	ldrb	r2, [r0, #24]
 80030a0:	2aa3      	cmp	r2, #163	; 0xa3

080030a2 <??zcl_reporting_send_conf_0>:
 80030a2:	4770      	bx	lr

080030a4 <report_command_timer>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	0004      	movs	r4, r0
 80030a8:	000d      	movs	r5, r1
 80030aa:	002e      	movs	r6, r5
 80030ac:	f116 0108 	adds.w	r1, r6, #8
 80030b0:	6830      	ldr	r0, [r6, #0]
 80030b2:	f000 f852 	bl	800315a <zcl_reporting_send_report>
 80030b6:	6870      	ldr	r0, [r6, #4]
 80030b8:	f00a fa3c 	bl	800d534 <ZbTimerFree>
 80030bc:	2300      	movs	r3, #0
 80030be:	a2cf      	add	r2, pc, #828	; (adr r2, 80033fc <??DataTable4>)
 80030c0:	0031      	movs	r1, r6
 80030c2:	6830      	ldr	r0, [r6, #0]
 80030c4:	6880      	ldr	r0, [r0, #8]
 80030c6:	f00a fdae 	bl	800dc26 <zb_heap_free>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}

080030cc <zcl_reporting_queue_report>:
 80030cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	0006      	movs	r6, r0
 80030d2:	000f      	movs	r7, r1
 80030d4:	0014      	movs	r4, r2
 80030d6:	2c00      	cmp	r4, #0
 80030d8:	d104      	bne.n	80030e4 <??zcl_reporting_queue_report_0>
 80030da:	0039      	movs	r1, r7
 80030dc:	0030      	movs	r0, r6
 80030de:	f000 f83c 	bl	800315a <zcl_reporting_send_report>
 80030e2:	e037      	b.n	8003154 <??zcl_reporting_queue_report_1>

080030e4 <??zcl_reporting_queue_report_0>:
 80030e4:	f20f 3814 	addw	r8, pc, #788	; 0x314
 80030e8:	2300      	movs	r3, #0
 80030ea:	4642      	mov	r2, r8
 80030ec:	2198      	movs	r1, #152	; 0x98
 80030ee:	68b0      	ldr	r0, [r6, #8]
 80030f0:	f00a fd8a 	bl	800dc08 <zb_heap_alloc>
 80030f4:	0005      	movs	r5, r0
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	d101      	bne.n	80030fe <??zcl_reporting_queue_report_2>
 80030fa:	2000      	movs	r0, #0
 80030fc:	e02b      	b.n	8003156 <??zcl_reporting_queue_report_3>

080030fe <??zcl_reporting_queue_report_2>:
 80030fe:	f05f 0998 	movs.w	r9, #152	; 0x98
 8003102:	f05f 0a00 	movs.w	sl, #0
 8003106:	46ab      	mov	fp, r5
 8003108:	4652      	mov	r2, sl
 800310a:	4649      	mov	r1, r9
 800310c:	4658      	mov	r0, fp
 800310e:	f002 fdc0 	bl	8005c92 <__aeabi_memset>
 8003112:	002a      	movs	r2, r5
 8003114:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 8003db0 <??DataTable9>
 8003118:	68b0      	ldr	r0, [r6, #8]
 800311a:	f00a f9b9 	bl	800d490 <ZbTimerAlloc>
 800311e:	6068      	str	r0, [r5, #4]
 8003120:	6868      	ldr	r0, [r5, #4]
 8003122:	2800      	cmp	r0, #0
 8003124:	d107      	bne.n	8003136 <??zcl_reporting_queue_report_4>
 8003126:	2300      	movs	r3, #0
 8003128:	4642      	mov	r2, r8
 800312a:	0029      	movs	r1, r5
 800312c:	68b0      	ldr	r0, [r6, #8]
 800312e:	f00a fd7a 	bl	800dc26 <zb_heap_free>
 8003132:	2000      	movs	r0, #0
 8003134:	e00f      	b.n	8003156 <??zcl_reporting_queue_report_3>

08003136 <??zcl_reporting_queue_report_4>:
 8003136:	602e      	str	r6, [r5, #0]
 8003138:	f05f 0890 	movs.w	r8, #144	; 0x90
 800313c:	46b9      	mov	r9, r7
 800313e:	f115 0a08 	adds.w	sl, r5, #8
 8003142:	4642      	mov	r2, r8
 8003144:	4649      	mov	r1, r9
 8003146:	4650      	mov	r0, sl
 8003148:	f00d fdd1 	bl	8010cee <__aeabi_memcpy>
 800314c:	0021      	movs	r1, r4
 800314e:	6868      	ldr	r0, [r5, #4]
 8003150:	f00a fa24 	bl	800d59c <ZbTimerReset>

08003154 <??zcl_reporting_queue_report_1>:
 8003154:	2001      	movs	r0, #1

08003156 <??zcl_reporting_queue_report_3>:
 8003156:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800315a <zcl_reporting_send_report>:
 800315a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315e:	b0cc      	sub	sp, #304	; 0x130
 8003160:	0005      	movs	r5, r0
 8003162:	000e      	movs	r6, r1
 8003164:	2400      	movs	r4, #0
 8003166:	2000      	movs	r0, #0
 8003168:	f88d 0004 	strb.w	r0, [sp, #4]
 800316c:	8a28      	ldrh	r0, [r5, #16]
 800316e:	2800      	cmp	r0, #0
 8003170:	d001      	beq.n	8003176 <??zcl_reporting_send_report_0>
 8003172:	2001      	movs	r0, #1
 8003174:	e000      	b.n	8003178 <??zcl_reporting_send_report_1>

08003176 <??zcl_reporting_send_report_0>:
 8003176:	2000      	movs	r0, #0

08003178 <??zcl_reporting_send_report_1>:
 8003178:	f88d 0005 	strb.w	r0, [sp, #5]
 800317c:	8a28      	ldrh	r0, [r5, #16]
 800317e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8003182:	7f28      	ldrb	r0, [r5, #28]
 8003184:	2800      	cmp	r0, #0
 8003186:	d103      	bne.n	8003190 <??zcl_reporting_send_report_2>
 8003188:	2001      	movs	r0, #1
 800318a:	f88d 0006 	strb.w	r0, [sp, #6]
 800318e:	e002      	b.n	8003196 <??zcl_reporting_send_report_3>

08003190 <??zcl_reporting_send_report_2>:
 8003190:	2000      	movs	r0, #0
 8003192:	f88d 0006 	strb.w	r0, [sp, #6]

08003196 <??zcl_reporting_send_report_3>:
 8003196:	2001      	movs	r0, #1
 8003198:	f88d 0007 	strb.w	r0, [sp, #7]
 800319c:	f00a fb2f 	bl	800d7fe <ZbZclGetNextSeqnum>
 80031a0:	f88d 000a 	strb.w	r0, [sp, #10]
 80031a4:	200a      	movs	r0, #10
 80031a6:	f88d 000b 	strb.w	r0, [sp, #11]
 80031aa:	2205      	movs	r2, #5
 80031ac:	a903      	add	r1, sp, #12
 80031ae:	a801      	add	r0, sp, #4
 80031b0:	f7fd ff41 	bl	8001036 <ZbZclAppendHeader>
 80031b4:	0007      	movs	r7, r0
 80031b6:	2f01      	cmp	r7, #1
 80031b8:	f2c0 8093 	blt.w	80032e2 <??zcl_reporting_send_report_4>

080031bc <??zcl_reporting_send_report_5>:
 80031bc:	a91a      	add	r1, sp, #104	; 0x68
 80031be:	a803      	add	r0, sp, #12
 80031c0:	0022      	movs	r2, r4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 80031c8:	0038      	movs	r0, r7
 80031ca:	b2c0      	uxtb	r0, r0
 80031cc:	aa1a      	add	r2, sp, #104	; 0x68
 80031ce:	0023      	movs	r3, r4
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80031d6:	6050      	str	r0, [r2, #4]
 80031d8:	1c64      	adds	r4, r4, #1
 80031da:	2000      	movs	r0, #0
 80031dc:	4680      	mov	r8, r0

080031de <??zcl_reporting_send_report_6>:
 80031de:	f1b8 0f0c 	cmp.w	r8, #12
 80031e2:	d22e      	bcs.n	8003242 <??zcl_reporting_send_report_7>
 80031e4:	220c      	movs	r2, #12
 80031e6:	fb02 f008 	mul.w	r0, r2, r8
 80031ea:	4430      	add	r0, r6
 80031ec:	7a00      	ldrb	r0, [r0, #8]
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d027      	beq.n	8003242 <??zcl_reporting_send_report_7>

080031f2 <??zcl_reporting_send_report_8>:
 80031f2:	fb02 f008 	mul.w	r0, r2, r8
 80031f6:	4430      	add	r0, r6
 80031f8:	3009      	adds	r0, #9
 80031fa:	0023      	movs	r3, r4
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8003202:	2003      	movs	r0, #3
 8003204:	ab1a      	add	r3, sp, #104	; 0x68
 8003206:	46a4      	mov	ip, r4
 8003208:	fa5f fc8c 	uxtb.w	ip, ip
 800320c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003210:	6058      	str	r0, [r3, #4]
 8003212:	1c64      	adds	r4, r4, #1
 8003214:	fb02 f008 	mul.w	r0, r2, r8
 8003218:	4430      	add	r0, r6
 800321a:	6840      	ldr	r0, [r0, #4]
 800321c:	0023      	movs	r3, r4
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8003224:	fb02 f208 	mul.w	r2, r2, r8
 8003228:	eb06 0002 	add.w	r0, r6, r2
 800322c:	7a00      	ldrb	r0, [r0, #8]
 800322e:	aa1a      	add	r2, sp, #104	; 0x68
 8003230:	0023      	movs	r3, r4
 8003232:	b2db      	uxtb	r3, r3
 8003234:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003238:	6050      	str	r0, [r2, #4]
 800323a:	1c64      	adds	r4, r4, #1
 800323c:	f118 0801 	adds.w	r8, r8, #1
 8003240:	e7cd      	b.n	80031de <??zcl_reporting_send_report_6>

08003242 <??zcl_reporting_send_report_7>:
 8003242:	2200      	movs	r2, #0
 8003244:	a906      	add	r1, sp, #24
 8003246:	0028      	movs	r0, r5
 8003248:	f7fd f8f9 	bl	800043e <ZbZclClusterInitApsdeReq>
 800324c:	a806      	add	r0, sp, #24
 800324e:	f8df 1b68 	ldr.w	r1, [pc, #2920]	; 8003db8 <??DataTable9_2>
 8003252:	6809      	ldr	r1, [r1, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	f00d fd4a 	bl	8010cee <__aeabi_memcpy>
 800325a:	2001      	movs	r0, #1
 800325c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8003260:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8003264:	f050 0004 	orrs.w	r0, r0, #4
 8003268:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800326c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8003270:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8003274:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8003278:	7ca8      	ldrb	r0, [r5, #18]
 800327a:	28ab      	cmp	r0, #171	; 0xab
 800327c:	d005      	beq.n	800328a <??zcl_reporting_send_report_9>
 800327e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8003282:	f050 0002 	orrs.w	r0, r0, #2
 8003286:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c

0800328a <??zcl_reporting_send_report_9>:
 800328a:	2001      	movs	r0, #1
 800328c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8003290:	2000      	movs	r0, #0
 8003292:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8003296:	a81a      	add	r0, sp, #104	; 0x68
 8003298:	900c      	str	r0, [sp, #48]	; 0x30
 800329a:	0020      	movs	r0, r4
 800329c:	b2c0      	uxtb	r0, r0
 800329e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80032a2:	68ab      	ldr	r3, [r5, #8]
 80032a4:	f8df 2b14 	ldr.w	r2, [pc, #2836]	; 8003dbc <??DataTable9_3>
 80032a8:	a906      	add	r1, sp, #24
 80032aa:	68a8      	ldr	r0, [r5, #8]
 80032ac:	f009 fea2 	bl	800cff4 <ZbApsdeDataReqCallback>
 80032b0:	f88d 0000 	strb.w	r0, [sp]
 80032b4:	f89d 0000 	ldrb.w	r0, [sp]
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d012      	beq.n	80032e2 <??zcl_reporting_send_report_4>
 80032bc:	f05f 0920 	movs.w	r9, #32
 80032c0:	f05f 0a00 	movs.w	sl, #0
 80032c4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80032c8:	4652      	mov	r2, sl
 80032ca:	4649      	mov	r1, r9
 80032cc:	4658      	mov	r0, fp
 80032ce:	f002 fce0 	bl	8005c92 <__aeabi_memset>
 80032d2:	f89d 0000 	ldrb.w	r0, [sp]
 80032d6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80032da:	68a9      	ldr	r1, [r5, #8]
 80032dc:	a812      	add	r0, sp, #72	; 0x48
 80032de:	f7ff fed7 	bl	8003090 <zcl_reporting_send_conf>

080032e2 <??zcl_reporting_send_report_4>:
 80032e2:	f05f 0900 	movs.w	r9, #0

080032e6 <??zcl_reporting_send_report_10>:
 80032e6:	f1b9 0f0c 	cmp.w	r9, #12
 80032ea:	d21e      	bcs.n	800332a <??zcl_reporting_send_report_11>
 80032ec:	f05f 080c 	movs.w	r8, #12
 80032f0:	fb08 f009 	mul.w	r0, r8, r9
 80032f4:	4430      	add	r0, r6
 80032f6:	6840      	ldr	r0, [r0, #4]
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d016      	beq.n	800332a <??zcl_reporting_send_report_11>

080032fc <??zcl_reporting_send_report_12>:
 80032fc:	2300      	movs	r3, #0
 80032fe:	a23f      	add	r2, pc, #252	; (adr r2, 80033fc <??DataTable4>)
 8003300:	fb08 f009 	mul.w	r0, r8, r9
 8003304:	4430      	add	r0, r6
 8003306:	6841      	ldr	r1, [r0, #4]
 8003308:	68a8      	ldr	r0, [r5, #8]
 800330a:	f00a fc8c 	bl	800dc26 <zb_heap_free>
 800330e:	2000      	movs	r0, #0
 8003310:	fb08 f109 	mul.w	r1, r8, r9
 8003314:	4431      	add	r1, r6
 8003316:	6048      	str	r0, [r1, #4]
 8003318:	2000      	movs	r0, #0
 800331a:	fb08 f809 	mul.w	r8, r8, r9
 800331e:	eb06 0108 	add.w	r1, r6, r8
 8003322:	7208      	strb	r0, [r1, #8]
 8003324:	f119 0901 	adds.w	r9, r9, #1
 8003328:	e7dd      	b.n	80032e6 <??zcl_reporting_send_report_10>

0800332a <??zcl_reporting_send_report_11>:
 800332a:	b04d      	add	sp, #308	; 0x134
 800332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003330 <zcl_report_check_time>:
 8003330:	4281      	cmp	r1, r0
 8003332:	d201      	bcs.n	8003338 <??zcl_report_check_time_0>
 8003334:	0008      	movs	r0, r1
 8003336:	e7ff      	b.n	8003338 <??zcl_report_check_time_0>

08003338 <??zcl_report_check_time_0>:
 8003338:	4770      	bx	lr

0800333a <zcl_report_kick>:
 800333a:	b538      	push	{r3, r4, r5, lr}
 800333c:	0004      	movs	r4, r0
 800333e:	000d      	movs	r5, r1
 8003340:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003342:	2800      	cmp	r0, #0
 8003344:	d101      	bne.n	800334a <??zcl_report_kick_0>
 8003346:	2000      	movs	r0, #0
 8003348:	e00d      	b.n	8003366 <??zcl_report_kick_1>

0800334a <??zcl_report_kick_0>:
 800334a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800334e:	2800      	cmp	r0, #0
 8003350:	d001      	beq.n	8003356 <??zcl_report_kick_2>
 8003352:	2001      	movs	r0, #1
 8003354:	e007      	b.n	8003366 <??zcl_report_kick_1>

08003356 <??zcl_report_kick_2>:
 8003356:	2001      	movs	r0, #1
 8003358:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 800335c:	0029      	movs	r1, r5
 800335e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003360:	f00a f91c 	bl	800d59c <ZbTimerReset>
 8003364:	2001      	movs	r0, #1

08003366 <??zcl_report_kick_1>:
 8003366:	bd32      	pop	{r1, r4, r5, pc}

08003368 <ZbZclAttrReportKick>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	0004      	movs	r4, r0
 800336c:	000d      	movs	r5, r1
 800336e:	0016      	movs	r6, r2
 8003370:	001f      	movs	r7, r3
 8003372:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003374:	2800      	cmp	r0, #0
 8003376:	d001      	beq.n	800337c <??ZbZclAttrReportKick_0>
 8003378:	2001      	movs	r0, #1
 800337a:	e010      	b.n	800339e <??ZbZclAttrReportKick_1>

0800337c <??ZbZclAttrReportKick_0>:
 800337c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8003380:	6426      	str	r6, [r4, #64]	; 0x40
 8003382:	6467      	str	r7, [r4, #68]	; 0x44
 8003384:	2100      	movs	r1, #0
 8003386:	0020      	movs	r0, r4
 8003388:	f7ff ffd7 	bl	800333a <zcl_report_kick>
 800338c:	2800      	cmp	r0, #0
 800338e:	d105      	bne.n	800339c <??ZbZclAttrReportKick_2>
 8003390:	2000      	movs	r0, #0
 8003392:	6420      	str	r0, [r4, #64]	; 0x40
 8003394:	2000      	movs	r0, #0
 8003396:	6460      	str	r0, [r4, #68]	; 0x44
 8003398:	2001      	movs	r0, #1
 800339a:	e000      	b.n	800339e <??ZbZclAttrReportKick_1>

0800339c <??ZbZclAttrReportKick_2>:
 800339c:	2000      	movs	r0, #0

0800339e <??ZbZclAttrReportKick_1>:
 800339e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080033a0 <zcl_report_append_attr>:
 80033a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a4:	0004      	movs	r4, r0
 80033a6:	000d      	movs	r5, r1
 80033a8:	0016      	movs	r6, r2
 80033aa:	001f      	movs	r7, r3
 80033ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80033b0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80033b4:	2300      	movs	r3, #0
 80033b6:	a211      	add	r2, pc, #68	; (adr r2, 80033fc <??DataTable4>)
 80033b8:	4649      	mov	r1, r9
 80033ba:	0020      	movs	r0, r4
 80033bc:	f00a fc24 	bl	800dc08 <zb_heap_alloc>
 80033c0:	6068      	str	r0, [r5, #4]
 80033c2:	6868      	ldr	r0, [r5, #4]
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d101      	bne.n	80033cc <??zcl_report_append_attr_0>
 80033c8:	2000      	movs	r0, #0
 80033ca:	e014      	b.n	80033f6 <??zcl_report_append_attr_1>

080033cc <??zcl_report_append_attr_0>:
 80033cc:	f8cd 9000 	str.w	r9, [sp]
 80033d0:	46c2      	mov	sl, r8
 80033d2:	f8d5 b004 	ldr.w	fp, [r5, #4]
 80033d6:	9a00      	ldr	r2, [sp, #0]
 80033d8:	4651      	mov	r1, sl
 80033da:	4658      	mov	r0, fp
 80033dc:	f00d fc87 	bl	8010cee <__aeabi_memcpy>
 80033e0:	f885 9008 	strb.w	r9, [r5, #8]
 80033e4:	802e      	strh	r6, [r5, #0]
 80033e6:	0031      	movs	r1, r6
 80033e8:	b289      	uxth	r1, r1
 80033ea:	f115 0009 	adds.w	r0, r5, #9
 80033ee:	f7fd ff52 	bl	8001296 <putle16>
 80033f2:	72ef      	strb	r7, [r5, #11]
 80033f4:	2001      	movs	r0, #1

080033f6 <??zcl_report_append_attr_1>:
 80033f6:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080033fc <??DataTable4>:
 80033fc:	0000 0000                                   ....

08003400 <zcl_cluster_report_check_timeout>:
 8003400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003404:	0006      	movs	r6, r0
 8003406:	000f      	movs	r7, r1
 8003408:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800340a:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 800340e:	4288      	cmp	r0, r1
 8003410:	d001      	beq.n	8003416 <??zcl_cluster_report_check_timeout_0>
 8003412:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003414:	e000      	b.n	8003418 <??zcl_cluster_report_check_timeout_1>

08003416 <??zcl_cluster_report_check_timeout_0>:
 8003416:	2000      	movs	r0, #0

08003418 <??zcl_cluster_report_check_timeout_1>:
 8003418:	2800      	cmp	r0, #0
 800341a:	d101      	bne.n	8003420 <??zcl_cluster_report_check_timeout_2>
 800341c:	2000      	movs	r0, #0
 800341e:	e042      	b.n	80034a6 <??zcl_cluster_report_check_timeout_3>

08003420 <??zcl_cluster_report_check_timeout_2>:
 8003420:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003422:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8003426:	4288      	cmp	r0, r1
 8003428:	d001      	beq.n	800342e <??zcl_cluster_report_check_timeout_4>
 800342a:	6b35      	ldr	r5, [r6, #48]	; 0x30
 800342c:	e000      	b.n	8003430 <??zcl_cluster_report_check_timeout_5>

0800342e <??zcl_cluster_report_check_timeout_4>:
 800342e:	2500      	movs	r5, #0

08003430 <??zcl_cluster_report_check_timeout_5>:
 8003430:	2d00      	cmp	r5, #0
 8003432:	d037      	beq.n	80034a4 <??zcl_cluster_report_check_timeout_6>
 8003434:	46a8      	mov	r8, r5
 8003436:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 800343a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800343e:	4288      	cmp	r0, r1
 8003440:	d027      	beq.n	8003492 <??zcl_cluster_report_check_timeout_7>

08003442 <??zcl_cluster_report_check_timeout_8>:
 8003442:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8003446:	2800      	cmp	r0, #0
 8003448:	d00e      	beq.n	8003468 <??zcl_cluster_report_check_timeout_9>
 800344a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800344e:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8003452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003456:	fb00 1909 	mla	r9, r0, r9, r1
 800345a:	4649      	mov	r1, r9
 800345c:	0038      	movs	r0, r7
 800345e:	f00a f8cd 	bl	800d5fc <ZbTimeoutRemaining>
 8003462:	0004      	movs	r4, r0
 8003464:	2c00      	cmp	r4, #0
 8003466:	d114      	bne.n	8003492 <??zcl_cluster_report_check_timeout_7>

08003468 <??zcl_cluster_report_check_timeout_9>:
 8003468:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 800346c:	2800      	cmp	r0, #0
 800346e:	d010      	beq.n	8003492 <??zcl_cluster_report_check_timeout_7>

08003470 <??zcl_cluster_report_check_timeout_10>:
 8003470:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003474:	f8b8 9022 	ldrh.w	r9, [r8, #34]	; 0x22
 8003478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800347c:	fb00 1909 	mla	r9, r0, r9, r1
 8003480:	4649      	mov	r1, r9
 8003482:	0038      	movs	r0, r7
 8003484:	f00a f8ba 	bl	800d5fc <ZbTimeoutRemaining>
 8003488:	0004      	movs	r4, r0
 800348a:	2c00      	cmp	r4, #0
 800348c:	d101      	bne.n	8003492 <??zcl_cluster_report_check_timeout_7>

0800348e <??zcl_cluster_report_check_timeout_11>:
 800348e:	2001      	movs	r0, #1
 8003490:	e009      	b.n	80034a6 <??zcl_cluster_report_check_timeout_3>

08003492 <??zcl_cluster_report_check_timeout_7>:
 8003492:	6828      	ldr	r0, [r5, #0]
 8003494:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8003498:	4288      	cmp	r0, r1
 800349a:	d001      	beq.n	80034a0 <??zcl_cluster_report_check_timeout_12>
 800349c:	682d      	ldr	r5, [r5, #0]
 800349e:	e7c7      	b.n	8003430 <??zcl_cluster_report_check_timeout_5>

080034a0 <??zcl_cluster_report_check_timeout_12>:
 80034a0:	2500      	movs	r5, #0
 80034a2:	e7c5      	b.n	8003430 <??zcl_cluster_report_check_timeout_5>

080034a4 <??zcl_cluster_report_check_timeout_6>:
 80034a4:	2000      	movs	r0, #0

080034a6 <??zcl_cluster_report_check_timeout_3>:
 80034a6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080034ac <zcl_cluster_reports_timer>:
 80034ac:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b0:	b081      	sub	sp, #4
 80034b2:	ed2d 8b04 	vpush	{d8-d9}
 80034b6:	b0b0      	sub	sp, #192	; 0xc0
 80034b8:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80034ba:	9003      	str	r0, [sp, #12]
 80034bc:	2000      	movs	r0, #0
 80034be:	9005      	str	r0, [sp, #20]
 80034c0:	2000      	movs	r0, #0
 80034c2:	9007      	str	r0, [sp, #28]
 80034c4:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8003dc0 <??DataTable9_4>
 80034c8:	9006      	str	r0, [sp, #24]
 80034ca:	2000      	movs	r0, #0
 80034cc:	f88d 0010 	strb.w	r0, [sp, #16]
 80034d0:	f05f 0b00 	movs.w	fp, #0
 80034d4:	9803      	ldr	r0, [sp, #12]
 80034d6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 80034da:	f88d 000b 	strb.w	r0, [sp, #11]
 80034de:	2000      	movs	r0, #0
 80034e0:	f88d 000a 	strb.w	r0, [sp, #10]
 80034e4:	2000      	movs	r0, #0
 80034e6:	9903      	ldr	r1, [sp, #12]
 80034e8:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 80034ec:	2000      	movs	r0, #0
 80034ee:	9903      	ldr	r1, [sp, #12]
 80034f0:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 80034f4:	9803      	ldr	r0, [sp, #12]
 80034f6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80034f8:	9903      	ldr	r1, [sp, #12]
 80034fa:	3130      	adds	r1, #48	; 0x30
 80034fc:	4288      	cmp	r0, r1
 80034fe:	d002      	beq.n	8003506 <??zcl_cluster_reports_timer_1>
 8003500:	9803      	ldr	r0, [sp, #12]
 8003502:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003504:	e000      	b.n	8003508 <??zcl_cluster_reports_timer_2>

08003506 <??zcl_cluster_reports_timer_1>:
 8003506:	2000      	movs	r0, #0

08003508 <??zcl_cluster_reports_timer_2>:
 8003508:	2800      	cmp	r0, #0
 800350a:	f000 81f7 	beq.w	80038fc <??zcl_cluster_reports_timer_3>

0800350e <??zcl_cluster_reports_timer_4>:
 800350e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8003510:	f00a f8f9 	bl	800d706 <ZbZclUptime>
 8003514:	9009      	str	r0, [sp, #36]	; 0x24
 8003516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003518:	9803      	ldr	r0, [sp, #12]
 800351a:	f7ff ff71 	bl	8003400 <zcl_cluster_report_check_timeout>
 800351e:	2800      	cmp	r0, #0
 8003520:	d004      	beq.n	800352c <??zcl_cluster_reports_timer_5>
 8003522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003524:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
 8003528:	900b      	str	r0, [sp, #44]	; 0x2c
 800352a:	e001      	b.n	8003530 <??zcl_cluster_reports_timer_6>

0800352c <??zcl_cluster_reports_timer_5>:
 800352c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800352e:	900b      	str	r0, [sp, #44]	; 0x2c

08003530 <??zcl_cluster_reports_timer_6>:
 8003530:	2490      	movs	r4, #144	; 0x90
 8003532:	2500      	movs	r5, #0
 8003534:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003538:	002a      	movs	r2, r5
 800353a:	0021      	movs	r1, r4
 800353c:	4640      	mov	r0, r8
 800353e:	f002 fba8 	bl	8005c92 <__aeabi_memset>
 8003542:	2000      	movs	r0, #0
 8003544:	4682      	mov	sl, r0
 8003546:	2000      	movs	r0, #0
 8003548:	f88d 0008 	strb.w	r0, [sp, #8]
 800354c:	9803      	ldr	r0, [sp, #12]
 800354e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003550:	9903      	ldr	r1, [sp, #12]
 8003552:	3130      	adds	r1, #48	; 0x30
 8003554:	4288      	cmp	r0, r1
 8003556:	d002      	beq.n	800355e <??zcl_cluster_reports_timer_7>
 8003558:	9803      	ldr	r0, [sp, #12]
 800355a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800355c:	e000      	b.n	8003560 <??zcl_cluster_reports_timer_8>

0800355e <??zcl_cluster_reports_timer_7>:
 800355e:	2600      	movs	r6, #0

08003560 <??zcl_cluster_reports_timer_8>:
 8003560:	2e00      	cmp	r6, #0
 8003562:	f000 817b 	beq.w	800385c <??zcl_cluster_reports_timer_9>
 8003566:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800356a:	f88d 0009 	strb.w	r0, [sp, #9]
 800356e:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 8003dc0 <??DataTable9_4>
 8003572:	900a      	str	r0, [sp, #40]	; 0x28
 8003574:	0037      	movs	r7, r6
 8003576:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8003578:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800357c:	4288      	cmp	r0, r1
 800357e:	f000 8164 	beq.w	800384a <??zcl_cluster_reports_timer_10>

08003582 <??zcl_cluster_reports_timer_11>:
 8003582:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003586:	2800      	cmp	r0, #0
 8003588:	d116      	bne.n	80035b8 <??zcl_cluster_reports_timer_12>
 800358a:	8c38      	ldrh	r0, [r7, #32]
 800358c:	2800      	cmp	r0, #0
 800358e:	d013      	beq.n	80035b8 <??zcl_cluster_reports_timer_12>
 8003590:	6939      	ldr	r1, [r7, #16]
 8003592:	8c3c      	ldrh	r4, [r7, #32]
 8003594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003598:	fb00 1404 	mla	r4, r0, r4, r1
 800359c:	0021      	movs	r1, r4
 800359e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80035a0:	f00a f82c 	bl	800d5fc <ZbTimeoutRemaining>
 80035a4:	9008      	str	r0, [sp, #32]
 80035a6:	9808      	ldr	r0, [sp, #32]
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d005      	beq.n	80035b8 <??zcl_cluster_reports_timer_12>
 80035ac:	9908      	ldr	r1, [sp, #32]
 80035ae:	9806      	ldr	r0, [sp, #24]
 80035b0:	f7ff febe 	bl	8003330 <zcl_report_check_time>
 80035b4:	9006      	str	r0, [sp, #24]
 80035b6:	e148      	b.n	800384a <??zcl_cluster_reports_timer_10>

080035b8 <??zcl_cluster_reports_timer_12>:
 80035b8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80035bc:	2800      	cmp	r0, #0
 80035be:	d115      	bne.n	80035ec <??zcl_cluster_reports_timer_13>
 80035c0:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d012      	beq.n	80035ec <??zcl_cluster_reports_timer_13>
 80035c6:	6939      	ldr	r1, [r7, #16]
 80035c8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80035ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035ce:	fb00 1404 	mla	r4, r0, r4, r1
 80035d2:	0021      	movs	r1, r4
 80035d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80035d6:	f00a f811 	bl	800d5fc <ZbTimeoutRemaining>
 80035da:	900a      	str	r0, [sp, #40]	; 0x28
 80035dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035de:	2800      	cmp	r0, #0
 80035e0:	d104      	bne.n	80035ec <??zcl_cluster_reports_timer_13>
 80035e2:	2001      	movs	r0, #1
 80035e4:	f88d 0009 	strb.w	r0, [sp, #9]
 80035e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ea:	6138      	str	r0, [r7, #16]

080035ec <??zcl_cluster_reports_timer_13>:
 80035ec:	9803      	ldr	r0, [sp, #12]
 80035ee:	8982      	ldrh	r2, [r0, #12]
 80035f0:	9803      	ldr	r0, [sp, #12]
 80035f2:	7b81      	ldrb	r1, [r0, #14]
 80035f4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80035f6:	f009 fe49 	bl	800d28c <ZbApsBindSrcExists>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d105      	bne.n	800360a <??zcl_cluster_reports_timer_14>
 80035fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003600:	9806      	ldr	r0, [sp, #24]
 8003602:	f7ff fe95 	bl	8003330 <zcl_report_check_time>
 8003606:	9006      	str	r0, [sp, #24]
 8003608:	e11f      	b.n	800384a <??zcl_cluster_reports_timer_10>

0800360a <??zcl_cluster_reports_timer_14>:
 800360a:	9805      	ldr	r0, [sp, #20]
 800360c:	2800      	cmp	r0, #0
 800360e:	d10b      	bne.n	8003628 <??zcl_cluster_reports_timer_15>
 8003610:	2300      	movs	r3, #0
 8003612:	a28a      	add	r2, pc, #552	; (adr r2, 800383c <??zcl_cluster_reports_timer_0>)
 8003614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003618:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800361a:	f00a faf5 	bl	800dc08 <zb_heap_alloc>
 800361e:	9005      	str	r0, [sp, #20]
 8003620:	9805      	ldr	r0, [sp, #20]
 8003622:	2800      	cmp	r0, #0
 8003624:	f000 816a 	beq.w	80038fc <??zcl_cluster_reports_timer_3>

08003628 <??zcl_cluster_reports_timer_15>:
 8003628:	2000      	movs	r0, #0
 800362a:	9001      	str	r0, [sp, #4]
 800362c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003630:	9000      	str	r0, [sp, #0]
 8003632:	9b05      	ldr	r3, [sp, #20]
 8003634:	f10d 0211 	add.w	r2, sp, #17
 8003638:	89b9      	ldrh	r1, [r7, #12]
 800363a:	9803      	ldr	r0, [sp, #12]
 800363c:	f7fd ffb3 	bl	80015a6 <ZbZclAttrRead>
 8003640:	2800      	cmp	r0, #0
 8003642:	d003      	beq.n	800364c <??zcl_cluster_reports_timer_16>
 8003644:	0038      	movs	r0, r7
 8003646:	f000 fb0a 	bl	8003c5e <zcl_reporting_disable>
 800364a:	e094      	b.n	8003776 <??zcl_cluster_reports_timer_17>

0800364c <??zcl_cluster_reports_timer_16>:
 800364c:	2300      	movs	r3, #0
 800364e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003652:	9905      	ldr	r1, [sp, #20]
 8003654:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8003658:	f7fe fdcd 	bl	80021f6 <ZbZclAttrParseLength>
 800365c:	9007      	str	r0, [sp, #28]
 800365e:	9807      	ldr	r0, [sp, #28]
 8003660:	2800      	cmp	r0, #0
 8003662:	d503      	bpl.n	800366c <??zcl_cluster_reports_timer_18>
 8003664:	0038      	movs	r0, r7
 8003666:	f000 fafa 	bl	8003c5e <zcl_reporting_disable>
 800366a:	e084      	b.n	8003776 <??zcl_cluster_reports_timer_17>

0800366c <??zcl_cluster_reports_timer_18>:
 800366c:	9807      	ldr	r0, [sp, #28]
 800366e:	2800      	cmp	r0, #0
 8003670:	f000 8081 	beq.w	8003776 <??zcl_cluster_reports_timer_17>

08003674 <??zcl_cluster_reports_timer_19>:
 8003674:	7bb8      	ldrb	r0, [r7, #14]
 8003676:	2838      	cmp	r0, #56	; 0x38
 8003678:	db37      	blt.n	80036ea <??zcl_cluster_reports_timer_20>
 800367a:	7bb8      	ldrb	r0, [r7, #14]
 800367c:	283b      	cmp	r0, #59	; 0x3b
 800367e:	da34      	bge.n	80036ea <??zcl_cluster_reports_timer_20>
 8003680:	f10d 0201 	add.w	r2, sp, #1
 8003684:	9905      	ldr	r1, [sp, #20]
 8003686:	7bb8      	ldrb	r0, [r7, #14]
 8003688:	f001 ffd1 	bl	800562e <ZbZclParseFloat>
 800368c:	eeb0 8a40 	vmov.f32	s16, s0
 8003690:	eef0 8a60 	vmov.f32	s17, s1
 8003694:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003698:	2800      	cmp	r0, #0
 800369a:	d003      	beq.n	80036a4 <??zcl_cluster_reports_timer_21>
 800369c:	0038      	movs	r0, r7
 800369e:	f000 fade 	bl	8003c5e <zcl_reporting_disable>
 80036a2:	e068      	b.n	8003776 <??zcl_cluster_reports_timer_17>

080036a4 <??zcl_cluster_reports_timer_21>:
 80036a4:	ec51 0b18 	vmov	r0, r1, d8
 80036a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ac:	f002 fba0 	bl	8005df0 <__aeabi_dsub>
 80036b0:	ec41 0b19 	vmov	d9, r0, r1
 80036b4:	ec51 0b19 	vmov	r0, r1, d9
 80036b8:	2200      	movs	r2, #0
 80036ba:	2300      	movs	r3, #0
 80036bc:	f002 ffb0 	bl	8006620 <__aeabi_cdcmpeq>
 80036c0:	d205      	bcs.n	80036ce <??zcl_cluster_reports_timer_22>
 80036c2:	ec51 0b19 	vmov	r0, r1, d9
 80036c6:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80036ca:	ec41 0b19 	vmov	d9, r0, r1

080036ce <??zcl_cluster_reports_timer_22>:
 80036ce:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d106      	bne.n	80036e4 <??zcl_cluster_reports_timer_23>
 80036d6:	ec51 0b19 	vmov	r0, r1, d9
 80036da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036de:	f002 ff9f 	bl	8006620 <__aeabi_cdcmpeq>
 80036e2:	d348      	bcc.n	8003776 <??zcl_cluster_reports_timer_17>

080036e4 <??zcl_cluster_reports_timer_23>:
 80036e4:	ed87 8b06 	vstr	d8, [r7, #24]
 80036e8:	e040      	b.n	800376c <??zcl_cluster_reports_timer_24>

080036ea <??zcl_cluster_reports_timer_20>:
 80036ea:	7bb8      	ldrb	r0, [r7, #14]
 80036ec:	f7fe fe34 	bl	8002358 <ZbZclAttrIsAnalog>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d02b      	beq.n	800374c <??zcl_cluster_reports_timer_25>
 80036f4:	466a      	mov	r2, sp
 80036f6:	9905      	ldr	r1, [sp, #20]
 80036f8:	7bb8      	ldrb	r0, [r7, #14]
 80036fa:	f7fe ff2b 	bl	8002554 <ZbZclParseInteger>
 80036fe:	0004      	movs	r4, r0
 8003700:	000d      	movs	r5, r1
 8003702:	f89d 0000 	ldrb.w	r0, [sp]
 8003706:	2800      	cmp	r0, #0
 8003708:	d003      	beq.n	8003712 <??zcl_cluster_reports_timer_26>
 800370a:	0038      	movs	r0, r7
 800370c:	f000 faa7 	bl	8003c5e <zcl_reporting_disable>
 8003710:	e031      	b.n	8003776 <??zcl_cluster_reports_timer_17>

08003712 <??zcl_cluster_reports_timer_26>:
 8003712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003716:	ebb4 0800 	subs.w	r8, r4, r0
 800371a:	eb75 0901 	sbcs.w	r9, r5, r1
 800371e:	f1b9 0f00 	cmp.w	r9, #0
 8003722:	d503      	bpl.n	800372c <??zcl_cluster_reports_timer_27>
 8003724:	f1d8 0800 	rsbs	r8, r8, #0
 8003728:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

0800372c <??zcl_cluster_reports_timer_27>:
 800372c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003730:	2800      	cmp	r0, #0
 8003732:	d108      	bne.n	8003746 <??zcl_cluster_reports_timer_28>
 8003734:	4640      	mov	r0, r8
 8003736:	4649      	mov	r1, r9
 8003738:	f002 fce4 	bl	8006104 <__aeabi_l2d>
 800373c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003740:	f002 ff6e 	bl	8006620 <__aeabi_cdcmpeq>
 8003744:	d317      	bcc.n	8003776 <??zcl_cluster_reports_timer_17>

08003746 <??zcl_cluster_reports_timer_28>:
 8003746:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800374a:	e00f      	b.n	800376c <??zcl_cluster_reports_timer_24>

0800374c <??zcl_cluster_reports_timer_25>:
 800374c:	9a07      	ldr	r2, [sp, #28]
 800374e:	9905      	ldr	r1, [sp, #20]
 8003750:	2000      	movs	r0, #0
 8003752:	f00a fa77 	bl	800dc44 <WpanCrc>
 8003756:	0001      	movs	r1, r0
 8003758:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800375c:	2800      	cmp	r0, #0
 800375e:	d104      	bne.n	800376a <??zcl_cluster_reports_timer_29>
 8003760:	8b38      	ldrh	r0, [r7, #24]
 8003762:	000a      	movs	r2, r1
 8003764:	b292      	uxth	r2, r2
 8003766:	4290      	cmp	r0, r2
 8003768:	d005      	beq.n	8003776 <??zcl_cluster_reports_timer_17>

0800376a <??zcl_cluster_reports_timer_29>:
 800376a:	8339      	strh	r1, [r7, #24]

0800376c <??zcl_cluster_reports_timer_24>:
 800376c:	2001      	movs	r0, #1
 800376e:	f88d 0009 	strb.w	r0, [sp, #9]
 8003772:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003774:	6138      	str	r0, [r7, #16]

08003776 <??zcl_cluster_reports_timer_17>:
 8003776:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800377a:	2800      	cmp	r0, #0
 800377c:	d060      	beq.n	8003840 <??zcl_cluster_reports_timer_30>
 800377e:	9807      	ldr	r0, [sp, #28]
 8003780:	2800      	cmp	r0, #0
 8003782:	d05d      	beq.n	8003840 <??zcl_cluster_reports_timer_30>
 8003784:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003788:	1c40      	adds	r0, r0, #1
 800378a:	f88d 0010 	strb.w	r0, [sp, #16]
 800378e:	4650      	mov	r0, sl
 8003790:	b2c0      	uxtb	r0, r0
 8003792:	280c      	cmp	r0, #12
 8003794:	d007      	beq.n	80037a6 <??zcl_cluster_reports_timer_31>
 8003796:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800379a:	9907      	ldr	r1, [sp, #28]
 800379c:	fa51 f080 	uxtab	r0, r1, r0
 80037a0:	1cc0      	adds	r0, r0, #3
 80037a2:	2837      	cmp	r0, #55	; 0x37
 80037a4:	d314      	bcc.n	80037d0 <??zcl_cluster_reports_timer_32>

080037a6 <??zcl_cluster_reports_timer_31>:
 80037a6:	465a      	mov	r2, fp
 80037a8:	a90c      	add	r1, sp, #48	; 0x30
 80037aa:	9803      	ldr	r0, [sp, #12]
 80037ac:	f7ff fc8e 	bl	80030cc <zcl_reporting_queue_report>
 80037b0:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 80037b4:	2490      	movs	r4, #144	; 0x90
 80037b6:	2500      	movs	r5, #0
 80037b8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80037bc:	002a      	movs	r2, r5
 80037be:	0021      	movs	r1, r4
 80037c0:	4640      	mov	r0, r8
 80037c2:	f002 fa66 	bl	8005c92 <__aeabi_memset>
 80037c6:	2000      	movs	r0, #0
 80037c8:	4682      	mov	sl, r0
 80037ca:	2000      	movs	r0, #0
 80037cc:	f88d 0008 	strb.w	r0, [sp, #8]

080037d0 <??zcl_cluster_reports_timer_32>:
 80037d0:	9807      	ldr	r0, [sp, #28]
 80037d2:	9001      	str	r0, [sp, #4]
 80037d4:	9805      	ldr	r0, [sp, #20]
 80037d6:	9000      	str	r0, [sp, #0]
 80037d8:	7bbb      	ldrb	r3, [r7, #14]
 80037da:	89ba      	ldrh	r2, [r7, #12]
 80037dc:	a90c      	add	r1, sp, #48	; 0x30
 80037de:	4654      	mov	r4, sl
 80037e0:	b2e4      	uxtb	r4, r4
 80037e2:	200c      	movs	r0, #12
 80037e4:	4344      	muls	r4, r0
 80037e6:	4421      	add	r1, r4
 80037e8:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80037ea:	f7ff fdd9 	bl	80033a0 <zcl_report_append_attr>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d02b      	beq.n	800384a <??zcl_cluster_reports_timer_10>

080037f2 <??zcl_cluster_reports_timer_33>:
 80037f2:	f11a 0a01 	adds.w	sl, sl, #1
 80037f6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80037fa:	9807      	ldr	r0, [sp, #28]
 80037fc:	1841      	adds	r1, r0, r1
 80037fe:	1cc9      	adds	r1, r1, #3
 8003800:	f88d 1008 	strb.w	r1, [sp, #8]
 8003804:	8c38      	ldrh	r0, [r7, #32]
 8003806:	2800      	cmp	r0, #0
 8003808:	d005      	beq.n	8003816 <??zcl_cluster_reports_timer_34>
 800380a:	8c39      	ldrh	r1, [r7, #32]
 800380c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003810:	4341      	muls	r1, r0
 8003812:	9108      	str	r1, [sp, #32]
 8003814:	e00b      	b.n	800382e <??zcl_cluster_reports_timer_35>

08003816 <??zcl_cluster_reports_timer_34>:
 8003816:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8003818:	2800      	cmp	r0, #0
 800381a:	d005      	beq.n	8003828 <??zcl_cluster_reports_timer_36>
 800381c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800381e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003822:	4341      	muls	r1, r0
 8003824:	9108      	str	r1, [sp, #32]
 8003826:	e002      	b.n	800382e <??zcl_cluster_reports_timer_35>

08003828 <??zcl_cluster_reports_timer_36>:
 8003828:	f8df 0594 	ldr.w	r0, [pc, #1428]	; 8003dc0 <??DataTable9_4>
 800382c:	9008      	str	r0, [sp, #32]

0800382e <??zcl_cluster_reports_timer_35>:
 800382e:	9908      	ldr	r1, [sp, #32]
 8003830:	9806      	ldr	r0, [sp, #24]
 8003832:	f7ff fd7d 	bl	8003330 <zcl_report_check_time>
 8003836:	9006      	str	r0, [sp, #24]
 8003838:	e007      	b.n	800384a <??zcl_cluster_reports_timer_10>
 800383a:	bf00      	nop

0800383c <??zcl_cluster_reports_timer_0>:
 800383c:	0000 0000                                   ....

08003840 <??zcl_cluster_reports_timer_30>:
 8003840:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003842:	9806      	ldr	r0, [sp, #24]
 8003844:	f7ff fd74 	bl	8003330 <zcl_report_check_time>
 8003848:	9006      	str	r0, [sp, #24]

0800384a <??zcl_cluster_reports_timer_10>:
 800384a:	6830      	ldr	r0, [r6, #0]
 800384c:	9903      	ldr	r1, [sp, #12]
 800384e:	3130      	adds	r1, #48	; 0x30
 8003850:	4288      	cmp	r0, r1
 8003852:	d001      	beq.n	8003858 <??zcl_cluster_reports_timer_37>
 8003854:	6836      	ldr	r6, [r6, #0]
 8003856:	e683      	b.n	8003560 <??zcl_cluster_reports_timer_8>

08003858 <??zcl_cluster_reports_timer_37>:
 8003858:	2600      	movs	r6, #0
 800385a:	e681      	b.n	8003560 <??zcl_cluster_reports_timer_8>

0800385c <??zcl_cluster_reports_timer_9>:
 800385c:	9805      	ldr	r0, [sp, #20]
 800385e:	2800      	cmp	r0, #0
 8003860:	d04c      	beq.n	80038fc <??zcl_cluster_reports_timer_3>
 8003862:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003866:	2800      	cmp	r0, #0
 8003868:	d042      	beq.n	80038f0 <??zcl_cluster_reports_timer_38>
 800386a:	2001      	movs	r0, #1
 800386c:	9007      	str	r0, [sp, #28]
 800386e:	2001      	movs	r0, #1
 8003870:	9905      	ldr	r1, [sp, #20]
 8003872:	7008      	strb	r0, [r1, #0]
 8003874:	4650      	mov	r0, sl
 8003876:	b2c0      	uxtb	r0, r0
 8003878:	280c      	cmp	r0, #12
 800387a:	d007      	beq.n	800388c <??zcl_cluster_reports_timer_39>
 800387c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003880:	9907      	ldr	r1, [sp, #28]
 8003882:	fa51 f080 	uxtab	r0, r1, r0
 8003886:	1cc0      	adds	r0, r0, #3
 8003888:	2837      	cmp	r0, #55	; 0x37
 800388a:	d314      	bcc.n	80038b6 <??zcl_cluster_reports_timer_40>

0800388c <??zcl_cluster_reports_timer_39>:
 800388c:	465a      	mov	r2, fp
 800388e:	a90c      	add	r1, sp, #48	; 0x30
 8003890:	9803      	ldr	r0, [sp, #12]
 8003892:	f7ff fc1b 	bl	80030cc <zcl_reporting_queue_report>
 8003896:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 800389a:	2490      	movs	r4, #144	; 0x90
 800389c:	2500      	movs	r5, #0
 800389e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80038a2:	002a      	movs	r2, r5
 80038a4:	0021      	movs	r1, r4
 80038a6:	4640      	mov	r0, r8
 80038a8:	f002 f9f3 	bl	8005c92 <__aeabi_memset>
 80038ac:	2000      	movs	r0, #0
 80038ae:	4682      	mov	sl, r0
 80038b0:	2000      	movs	r0, #0
 80038b2:	f88d 0008 	strb.w	r0, [sp, #8]

080038b6 <??zcl_cluster_reports_timer_40>:
 80038b6:	9807      	ldr	r0, [sp, #28]
 80038b8:	9001      	str	r0, [sp, #4]
 80038ba:	9805      	ldr	r0, [sp, #20]
 80038bc:	9000      	str	r0, [sp, #0]
 80038be:	2330      	movs	r3, #48	; 0x30
 80038c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038c4:	a90c      	add	r1, sp, #48	; 0x30
 80038c6:	4654      	mov	r4, sl
 80038c8:	b2e4      	uxtb	r4, r4
 80038ca:	200c      	movs	r0, #12
 80038cc:	4344      	muls	r4, r0
 80038ce:	4421      	add	r1, r4
 80038d0:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80038d2:	f7ff fd65 	bl	80033a0 <zcl_report_append_attr>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d001      	beq.n	80038de <??zcl_cluster_reports_timer_41>
 80038da:	f11a 0a01 	adds.w	sl, sl, #1

080038de <??zcl_cluster_reports_timer_41>:
 80038de:	4650      	mov	r0, sl
 80038e0:	b2c0      	uxtb	r0, r0
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d004      	beq.n	80038f0 <??zcl_cluster_reports_timer_38>
 80038e6:	465a      	mov	r2, fp
 80038e8:	a90c      	add	r1, sp, #48	; 0x30
 80038ea:	9803      	ldr	r0, [sp, #12]
 80038ec:	f7ff fbee 	bl	80030cc <zcl_reporting_queue_report>

080038f0 <??zcl_cluster_reports_timer_38>:
 80038f0:	2300      	movs	r3, #0
 80038f2:	a2ba      	add	r2, pc, #744	; (adr r2, 8003bdc <??DataTable7>)
 80038f4:	9905      	ldr	r1, [sp, #20]
 80038f6:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80038f8:	f00a f995 	bl	800dc26 <zb_heap_free>

080038fc <??zcl_cluster_reports_timer_3>:
 80038fc:	9806      	ldr	r0, [sp, #24]
 80038fe:	28c8      	cmp	r0, #200	; 0xc8
 8003900:	d201      	bcs.n	8003906 <??zcl_cluster_reports_timer_42>
 8003902:	20c8      	movs	r0, #200	; 0xc8
 8003904:	9006      	str	r0, [sp, #24]

08003906 <??zcl_cluster_reports_timer_42>:
 8003906:	9803      	ldr	r0, [sp, #12]
 8003908:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800390a:	2800      	cmp	r0, #0
 800390c:	d00c      	beq.n	8003928 <??zcl_cluster_reports_timer_43>
 800390e:	9803      	ldr	r0, [sp, #12]
 8003910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003912:	9906      	ldr	r1, [sp, #24]
 8003914:	9803      	ldr	r0, [sp, #12]
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4798      	blx	r3
 800391c:	2000      	movs	r0, #0
 800391e:	9903      	ldr	r1, [sp, #12]
 8003920:	6408      	str	r0, [r1, #64]	; 0x40
 8003922:	2000      	movs	r0, #0
 8003924:	9903      	ldr	r1, [sp, #12]
 8003926:	6448      	str	r0, [r1, #68]	; 0x44

08003928 <??zcl_cluster_reports_timer_43>:
 8003928:	2301      	movs	r3, #1
 800392a:	f10d 020a 	add.w	r2, sp, #10
 800392e:	f240 410c 	movw	r1, #1036	; 0x40c
 8003932:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8003934:	f009 fed2 	bl	800d6dc <ZbNwkGet>
 8003938:	2800      	cmp	r0, #0
 800393a:	d002      	beq.n	8003942 <??zcl_cluster_reports_timer_44>
 800393c:	2000      	movs	r0, #0
 800393e:	f88d 000a 	strb.w	r0, [sp, #10]

08003942 <??zcl_cluster_reports_timer_44>:
 8003942:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8003946:	2800      	cmp	r0, #0
 8003948:	d110      	bne.n	800396c <??zcl_cluster_reports_timer_45>
 800394a:	9803      	ldr	r0, [sp, #12]
 800394c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800394e:	9903      	ldr	r1, [sp, #12]
 8003950:	3130      	adds	r1, #48	; 0x30
 8003952:	4288      	cmp	r0, r1
 8003954:	d002      	beq.n	800395c <??zcl_cluster_reports_timer_46>
 8003956:	9803      	ldr	r0, [sp, #12]
 8003958:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800395a:	e000      	b.n	800395e <??zcl_cluster_reports_timer_47>

0800395c <??zcl_cluster_reports_timer_46>:
 800395c:	2000      	movs	r0, #0

0800395e <??zcl_cluster_reports_timer_47>:
 800395e:	2800      	cmp	r0, #0
 8003960:	d004      	beq.n	800396c <??zcl_cluster_reports_timer_45>
 8003962:	9906      	ldr	r1, [sp, #24]
 8003964:	9803      	ldr	r0, [sp, #12]
 8003966:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003968:	f009 fe18 	bl	800d59c <ZbTimerReset>

0800396c <??zcl_cluster_reports_timer_45>:
 800396c:	b030      	add	sp, #192	; 0xc0
 800396e:	ecbd 8b04 	vpop	{d8-d9}
 8003972:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003976 <zcl_attr_reporting_check>:
 8003976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003978:	0005      	movs	r5, r0
 800397a:	000e      	movs	r6, r1
 800397c:	0017      	movs	r7, r2
 800397e:	2000      	movs	r0, #0
 8003980:	f88d 0000 	strb.w	r0, [sp]
 8003984:	2301      	movs	r3, #1
 8003986:	466a      	mov	r2, sp
 8003988:	f240 410c 	movw	r1, #1036	; 0x40c
 800398c:	68a8      	ldr	r0, [r5, #8]
 800398e:	f009 fea5 	bl	800d6dc <ZbNwkGet>
 8003992:	2800      	cmp	r0, #0
 8003994:	d002      	beq.n	800399c <??zcl_attr_reporting_check_0>
 8003996:	2000      	movs	r0, #0
 8003998:	f88d 0000 	strb.w	r0, [sp]

0800399c <??zcl_attr_reporting_check_0>:
 800399c:	f89d 0000 	ldrb.w	r0, [sp]
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d10d      	bne.n	80039c0 <??zcl_attr_reporting_check_1>
 80039a4:	003a      	movs	r2, r7
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	0031      	movs	r1, r6
 80039aa:	b289      	uxth	r1, r1
 80039ac:	0028      	movs	r0, r5
 80039ae:	f000 f81a 	bl	80039e6 <zcl_reporting_find>
 80039b2:	0004      	movs	r4, r0
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	d003      	beq.n	80039c0 <??zcl_attr_reporting_check_1>
 80039b8:	21c8      	movs	r1, #200	; 0xc8
 80039ba:	0028      	movs	r0, r5
 80039bc:	f7ff fcbd 	bl	800333a <zcl_report_kick>

080039c0 <??zcl_attr_reporting_check_1>:
 80039c0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080039c2 <ZbZclReportCleanup>:
 80039c2:	b570      	push	{r4, r5, r6, lr}
 80039c4:	0005      	movs	r5, r0

080039c6 <??ZbZclReportCleanup_0>:
 80039c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80039c8:	f115 0130 	adds.w	r1, r5, #48	; 0x30
 80039cc:	4288      	cmp	r0, r1
 80039ce:	d001      	beq.n	80039d4 <??ZbZclReportCleanup_1>
 80039d0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80039d2:	e000      	b.n	80039d6 <??ZbZclReportCleanup_2>

080039d4 <??ZbZclReportCleanup_1>:
 80039d4:	2400      	movs	r4, #0

080039d6 <??ZbZclReportCleanup_2>:
 80039d6:	2c00      	cmp	r4, #0
 80039d8:	d004      	beq.n	80039e4 <??ZbZclReportCleanup_3>

080039da <??ZbZclReportCleanup_4>:
 80039da:	0026      	movs	r6, r4
 80039dc:	0030      	movs	r0, r6
 80039de:	f000 f8ff 	bl	8003be0 <zcl_reporting_delete>
 80039e2:	e7f0      	b.n	80039c6 <??ZbZclReportCleanup_0>

080039e4 <??ZbZclReportCleanup_3>:
 80039e4:	bd70      	pop	{r4, r5, r6, pc}

080039e6 <zcl_reporting_find>:
 80039e6:	b470      	push	{r4, r5, r6}
 80039e8:	0004      	movs	r4, r0
 80039ea:	000b      	movs	r3, r1
 80039ec:	0010      	movs	r0, r2
 80039ee:	b2c0      	uxtb	r0, r0
 80039f0:	2801      	cmp	r0, #1
 80039f2:	d101      	bne.n	80039f8 <??zcl_reporting_find_0>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e01c      	b.n	8003a32 <??zcl_reporting_find_1>

080039f8 <??zcl_reporting_find_0>:
 80039f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80039fa:	f114 0130 	adds.w	r1, r4, #48	; 0x30
 80039fe:	4288      	cmp	r0, r1
 8003a00:	d001      	beq.n	8003a06 <??zcl_reporting_find_2>
 8003a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003a04:	e000      	b.n	8003a08 <??zcl_reporting_find_3>

08003a06 <??zcl_reporting_find_2>:
 8003a06:	2100      	movs	r1, #0

08003a08 <??zcl_reporting_find_3>:
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d011      	beq.n	8003a30 <??zcl_reporting_find_4>
 8003a0c:	000d      	movs	r5, r1
 8003a0e:	89a8      	ldrh	r0, [r5, #12]
 8003a10:	001e      	movs	r6, r3
 8003a12:	b2b6      	uxth	r6, r6
 8003a14:	42b0      	cmp	r0, r6
 8003a16:	d005      	beq.n	8003a24 <??zcl_reporting_find_5>
 8003a18:	6808      	ldr	r0, [r1, #0]
 8003a1a:	f114 0630 	adds.w	r6, r4, #48	; 0x30
 8003a1e:	42b0      	cmp	r0, r6
 8003a20:	d004      	beq.n	8003a2c <??zcl_reporting_find_6>
 8003a22:	e001      	b.n	8003a28 <??zcl_reporting_find_7>

08003a24 <??zcl_reporting_find_5>:
 8003a24:	0028      	movs	r0, r5
 8003a26:	e004      	b.n	8003a32 <??zcl_reporting_find_1>

08003a28 <??zcl_reporting_find_7>:
 8003a28:	6809      	ldr	r1, [r1, #0]
 8003a2a:	e7ed      	b.n	8003a08 <??zcl_reporting_find_3>

08003a2c <??zcl_reporting_find_6>:
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	e7eb      	b.n	8003a08 <??zcl_reporting_find_3>

08003a30 <??zcl_reporting_find_4>:
 8003a30:	2000      	movs	r0, #0

08003a32 <??zcl_reporting_find_1>:
 8003a32:	bc70      	pop	{r4, r5, r6}
 8003a34:	4770      	bx	lr

08003a36 <zcl_reporting_stack_event>:
 8003a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3a:	0006      	movs	r6, r0
 8003a3c:	000f      	movs	r7, r1
 8003a3e:	4690      	mov	r8, r2
 8003a40:	4699      	mov	r9, r3
 8003a42:	46ca      	mov	sl, r9
 8003a44:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 8003a48:	d001      	beq.n	8003a4e <??zcl_reporting_stack_event_0>
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	e01b      	b.n	8003a86 <??zcl_reporting_stack_event_1>

08003a4e <??zcl_reporting_stack_event_0>:
 8003a4e:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8003a52:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 8003a56:	4288      	cmp	r0, r1
 8003a58:	d002      	beq.n	8003a60 <??zcl_reporting_stack_event_2>
 8003a5a:	f8da 4030 	ldr.w	r4, [sl, #48]	; 0x30
 8003a5e:	e000      	b.n	8003a62 <??zcl_reporting_stack_event_3>

08003a60 <??zcl_reporting_stack_event_2>:
 8003a60:	2400      	movs	r4, #0

08003a62 <??zcl_reporting_stack_event_3>:
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	d00e      	beq.n	8003a84 <??zcl_reporting_stack_event_4>
 8003a66:	0025      	movs	r5, r4
 8003a68:	2201      	movs	r2, #1
 8003a6a:	0029      	movs	r1, r5
 8003a6c:	0030      	movs	r0, r6
 8003a6e:	f000 f947 	bl	8003d00 <zcl_reporting_reset_defaults>
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 8003a78:	4288      	cmp	r0, r1
 8003a7a:	d001      	beq.n	8003a80 <??zcl_reporting_stack_event_5>
 8003a7c:	6824      	ldr	r4, [r4, #0]
 8003a7e:	e7f0      	b.n	8003a62 <??zcl_reporting_stack_event_3>

08003a80 <??zcl_reporting_stack_event_5>:
 8003a80:	2400      	movs	r4, #0
 8003a82:	e7ee      	b.n	8003a62 <??zcl_reporting_stack_event_3>

08003a84 <??zcl_reporting_stack_event_4>:
 8003a84:	2000      	movs	r0, #0

08003a86 <??zcl_reporting_stack_event_1>:
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a8a <zcl_reporting_save_curr_val>:
 8003a8a:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8e:	0005      	movs	r5, r0
 8003a90:	000e      	movs	r6, r1
 8003a92:	68af      	ldr	r7, [r5, #8]
 8003a94:	f20f 1944 	addw	r9, pc, #324	; 0x144
 8003a98:	2300      	movs	r3, #0
 8003a9a:	464a      	mov	r2, r9
 8003a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aa0:	0038      	movs	r0, r7
 8003aa2:	f00a f8b1 	bl	800dc08 <zb_heap_alloc>
 8003aa6:	0004      	movs	r4, r0
 8003aa8:	2c00      	cmp	r4, #0
 8003aaa:	d101      	bne.n	8003ab0 <??zcl_reporting_save_curr_val_0>
 8003aac:	2089      	movs	r0, #137	; 0x89
 8003aae:	e05d      	b.n	8003b6c <??zcl_reporting_save_curr_val_1>

08003ab0 <??zcl_reporting_save_curr_val_0>:
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	9001      	str	r0, [sp, #4]
 8003ab4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ab8:	9000      	str	r0, [sp, #0]
 8003aba:	0023      	movs	r3, r4
 8003abc:	f10d 0209 	add.w	r2, sp, #9
 8003ac0:	89b1      	ldrh	r1, [r6, #12]
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	f7fd fd6f 	bl	80015a6 <ZbZclAttrRead>
 8003ac8:	f88d 0008 	strb.w	r0, [sp, #8]
 8003acc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d002      	beq.n	8003ada <??zcl_reporting_save_curr_val_2>
 8003ad4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003ad8:	e048      	b.n	8003b6c <??zcl_reporting_save_curr_val_1>

08003ada <??zcl_reporting_save_curr_val_2>:
 8003ada:	7bb0      	ldrb	r0, [r6, #14]
 8003adc:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003ae0:	4288      	cmp	r0, r1
 8003ae2:	d001      	beq.n	8003ae8 <??zcl_reporting_save_curr_val_3>
 8003ae4:	208d      	movs	r0, #141	; 0x8d
 8003ae6:	e041      	b.n	8003b6c <??zcl_reporting_save_curr_val_1>

08003ae8 <??zcl_reporting_save_curr_val_3>:
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aee:	0021      	movs	r1, r4
 8003af0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003af4:	f7fe fb7f 	bl	80021f6 <ZbZclAttrParseLength>
 8003af8:	4680      	mov	r8, r0
 8003afa:	f1b8 0f00 	cmp.w	r8, #0
 8003afe:	d501      	bpl.n	8003b04 <??zcl_reporting_save_curr_val_4>
 8003b00:	2089      	movs	r0, #137	; 0x89
 8003b02:	e033      	b.n	8003b6c <??zcl_reporting_save_curr_val_1>

08003b04 <??zcl_reporting_save_curr_val_4>:
 8003b04:	7bb0      	ldrb	r0, [r6, #14]
 8003b06:	f7fe fc27 	bl	8002358 <ZbZclAttrIsAnalog>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d106      	bne.n	8003b1c <??zcl_reporting_save_curr_val_5>
 8003b0e:	4642      	mov	r2, r8
 8003b10:	0021      	movs	r1, r4
 8003b12:	2000      	movs	r0, #0
 8003b14:	f00a f896 	bl	800dc44 <WpanCrc>
 8003b18:	8330      	strh	r0, [r6, #24]
 8003b1a:	e020      	b.n	8003b5e <??zcl_reporting_save_curr_val_6>

08003b1c <??zcl_reporting_save_curr_val_5>:
 8003b1c:	7bb0      	ldrb	r0, [r6, #14]
 8003b1e:	f002 f8ab 	bl	8005c78 <ZbZclAttrIsFloat>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d00d      	beq.n	8003b42 <??zcl_reporting_save_curr_val_7>
 8003b26:	aa02      	add	r2, sp, #8
 8003b28:	0021      	movs	r1, r4
 8003b2a:	7bb0      	ldrb	r0, [r6, #14]
 8003b2c:	f001 fd7f 	bl	800562e <ZbZclParseFloat>
 8003b30:	ed86 0b06 	vstr	d0, [r6, #24]
 8003b34:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d010      	beq.n	8003b5e <??zcl_reporting_save_curr_val_6>
 8003b3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003b40:	e014      	b.n	8003b6c <??zcl_reporting_save_curr_val_1>

08003b42 <??zcl_reporting_save_curr_val_7>:
 8003b42:	aa02      	add	r2, sp, #8
 8003b44:	0021      	movs	r1, r4
 8003b46:	7bb0      	ldrb	r0, [r6, #14]
 8003b48:	f7fe fd04 	bl	8002554 <ZbZclParseInteger>
 8003b4c:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8003b50:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d002      	beq.n	8003b5e <??zcl_reporting_save_curr_val_6>
 8003b58:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003b5c:	e006      	b.n	8003b6c <??zcl_reporting_save_curr_val_1>

08003b5e <??zcl_reporting_save_curr_val_6>:
 8003b5e:	2300      	movs	r3, #0
 8003b60:	464a      	mov	r2, r9
 8003b62:	0021      	movs	r1, r4
 8003b64:	0038      	movs	r0, r7
 8003b66:	f00a f85e 	bl	800dc26 <zb_heap_free>
 8003b6a:	2000      	movs	r0, #0

08003b6c <??zcl_reporting_save_curr_val_1>:
 8003b6c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08003b70 <zcl_reporting_create_new>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	0006      	movs	r6, r0
 8003b76:	000f      	movs	r7, r1
 8003b78:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	89b9      	ldrh	r1, [r7, #12]
 8003b80:	0030      	movs	r0, r6
 8003b82:	f7ff ff30 	bl	80039e6 <zcl_reporting_find>
 8003b86:	0005      	movs	r5, r0
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	d001      	beq.n	8003b90 <??zcl_reporting_create_new_0>
 8003b8c:	0028      	movs	r0, r5
 8003b8e:	e023      	b.n	8003bd8 <??zcl_reporting_create_new_1>

08003b90 <??zcl_reporting_create_new_0>:
 8003b90:	2300      	movs	r3, #0
 8003b92:	a212      	add	r2, pc, #72	; (adr r2, 8003bdc <??DataTable7>)
 8003b94:	2138      	movs	r1, #56	; 0x38
 8003b96:	4640      	mov	r0, r8
 8003b98:	f00a f836 	bl	800dc08 <zb_heap_alloc>
 8003b9c:	0004      	movs	r4, r0
 8003b9e:	2c00      	cmp	r4, #0
 8003ba0:	d101      	bne.n	8003ba6 <??zcl_reporting_create_new_2>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e018      	b.n	8003bd8 <??zcl_reporting_create_new_1>

08003ba6 <??zcl_reporting_create_new_2>:
 8003ba6:	2538      	movs	r5, #56	; 0x38
 8003ba8:	46b9      	mov	r9, r7
 8003baa:	46a2      	mov	sl, r4
 8003bac:	002a      	movs	r2, r5
 8003bae:	4649      	mov	r1, r9
 8003bb0:	4650      	mov	r0, sl
 8003bb2:	f00d f89c 	bl	8010cee <__aeabi_memcpy>
 8003bb6:	6024      	str	r4, [r4, #0]
 8003bb8:	6064      	str	r4, [r4, #4]
 8003bba:	f116 0030 	adds.w	r0, r6, #48	; 0x30
 8003bbe:	6020      	str	r0, [r4, #0]
 8003bc0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003bc2:	6060      	str	r0, [r4, #4]
 8003bc4:	6820      	ldr	r0, [r4, #0]
 8003bc6:	6044      	str	r4, [r0, #4]
 8003bc8:	6860      	ldr	r0, [r4, #4]
 8003bca:	6004      	str	r4, [r0, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	0021      	movs	r1, r4
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	f000 f895 	bl	8003d00 <zcl_reporting_reset_defaults>
 8003bd6:	0020      	movs	r0, r4

08003bd8 <??zcl_reporting_create_new_1>:
 8003bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003bdc <??DataTable7>:
 8003bdc:	0000 0000                                   ....

08003be0 <zcl_reporting_delete>:
 8003be0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003be2:	0004      	movs	r4, r0
 8003be4:	68a5      	ldr	r5, [r4, #8]
 8003be6:	68ae      	ldr	r6, [r5, #8]
 8003be8:	2000      	movs	r0, #0
 8003bea:	f88d 0000 	strb.w	r0, [sp]
 8003bee:	6860      	ldr	r0, [r4, #4]
 8003bf0:	6821      	ldr	r1, [r4, #0]
 8003bf2:	6048      	str	r0, [r1, #4]
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	6861      	ldr	r1, [r4, #4]
 8003bf8:	6008      	str	r0, [r1, #0]
 8003bfa:	6024      	str	r4, [r4, #0]
 8003bfc:	6064      	str	r4, [r4, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	a26c      	add	r2, pc, #432	; (adr r2, 8003db4 <??DataTable9_1>)
 8003c02:	0021      	movs	r1, r4
 8003c04:	0030      	movs	r0, r6
 8003c06:	f00a f80e 	bl	800dc26 <zb_heap_free>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	466a      	mov	r2, sp
 8003c0e:	f240 410c 	movw	r1, #1036	; 0x40c
 8003c12:	0030      	movs	r0, r6
 8003c14:	f009 fd62 	bl	800d6dc <ZbNwkGet>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d002      	beq.n	8003c22 <??zcl_reporting_delete_0>
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f88d 0000 	strb.w	r0, [sp]

08003c22 <??zcl_reporting_delete_0>:
 8003c22:	f89d 0000 	ldrb.w	r0, [sp]
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d103      	bne.n	8003c32 <??zcl_reporting_delete_1>
 8003c2a:	21c8      	movs	r1, #200	; 0xc8
 8003c2c:	0028      	movs	r0, r5
 8003c2e:	f7ff fb84 	bl	800333a <zcl_report_kick>

08003c32 <??zcl_reporting_delete_1>:
 8003c32:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003c34 <zcl_cluster_attr_report_delete>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	0005      	movs	r5, r0
 8003c38:	000e      	movs	r6, r1
 8003c3a:	0017      	movs	r7, r2
 8003c3c:	003a      	movs	r2, r7
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	0031      	movs	r1, r6
 8003c42:	b289      	uxth	r1, r1
 8003c44:	0028      	movs	r0, r5
 8003c46:	f7ff fece 	bl	80039e6 <zcl_reporting_find>
 8003c4a:	0004      	movs	r4, r0
 8003c4c:	2c00      	cmp	r4, #0
 8003c4e:	d101      	bne.n	8003c54 <??zcl_cluster_attr_report_delete_0>
 8003c50:	2000      	movs	r0, #0
 8003c52:	e003      	b.n	8003c5c <??zcl_cluster_attr_report_delete_1>

08003c54 <??zcl_cluster_attr_report_delete_0>:
 8003c54:	0020      	movs	r0, r4
 8003c56:	f7ff ffc3 	bl	8003be0 <zcl_reporting_delete>
 8003c5a:	2001      	movs	r0, #1

08003c5c <??zcl_cluster_attr_report_delete_1>:
 8003c5c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003c5e <zcl_reporting_disable>:
 8003c5e:	b538      	push	{r3, r4, r5, lr}
 8003c60:	0004      	movs	r4, r0
 8003c62:	68a0      	ldr	r0, [r4, #8]
 8003c64:	6885      	ldr	r5, [r0, #8]
 8003c66:	2000      	movs	r0, #0
 8003c68:	f88d 0000 	strb.w	r0, [sp]
 8003c6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c70:	8460      	strh	r0, [r4, #34]	; 0x22
 8003c72:	2000      	movs	r0, #0
 8003c74:	8420      	strh	r0, [r4, #32]
 8003c76:	2301      	movs	r3, #1
 8003c78:	466a      	mov	r2, sp
 8003c7a:	f240 410c 	movw	r1, #1036	; 0x40c
 8003c7e:	0028      	movs	r0, r5
 8003c80:	f009 fd2c 	bl	800d6dc <ZbNwkGet>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d002      	beq.n	8003c8e <??zcl_reporting_disable_0>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f88d 0000 	strb.w	r0, [sp]

08003c8e <??zcl_reporting_disable_0>:
 8003c8e:	f89d 0000 	ldrb.w	r0, [sp]
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d103      	bne.n	8003c9e <??zcl_reporting_disable_1>
 8003c96:	21c8      	movs	r1, #200	; 0xc8
 8003c98:	68a0      	ldr	r0, [r4, #8]
 8003c9a:	f7ff fb4e 	bl	800333a <zcl_report_kick>

08003c9e <??zcl_reporting_disable_1>:
 8003c9e:	bd31      	pop	{r0, r4, r5, pc}

08003ca0 <zcl_reporting_check_default_intvl>:
 8003ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca4:	880a      	ldrh	r2, [r1, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d00e      	beq.n	8003cc8 <??zcl_reporting_check_default_intvl_0>
 8003caa:	880a      	ldrh	r2, [r1, #0]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d00b      	beq.n	8003cc8 <??zcl_reporting_check_default_intvl_0>
 8003cb0:	880a      	ldrh	r2, [r1, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d102      	bne.n	8003cbc <??zcl_reporting_check_default_intvl_1>
 8003cb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cba:	800a      	strh	r2, [r1, #0]

08003cbc <??zcl_reporting_check_default_intvl_1>:
 8003cbc:	880a      	ldrh	r2, [r1, #0]
 8003cbe:	8803      	ldrh	r3, [r0, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d201      	bcs.n	8003cc8 <??zcl_reporting_check_default_intvl_0>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	8002      	strh	r2, [r0, #0]

08003cc8 <??zcl_reporting_check_default_intvl_0>:
 8003cc8:	4770      	bx	lr

08003cca <zcl_reporting_config_attr_defaults>:
 8003cca:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003ccc:	0004      	movs	r4, r0
 8003cce:	000d      	movs	r5, r1
 8003cd0:	0016      	movs	r6, r2
 8003cd2:	8aa8      	ldrh	r0, [r5, #20]
 8003cd4:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003cd8:	8ae8      	ldrh	r0, [r5, #22]
 8003cda:	f8ad 0000 	strh.w	r0, [sp]
 8003cde:	4669      	mov	r1, sp
 8003ce0:	f10d 0002 	add.w	r0, sp, #2
 8003ce4:	f7ff ffdc 	bl	8003ca0 <zcl_reporting_check_default_intvl>
 8003ce8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8003cec:	84b0      	strh	r0, [r6, #36]	; 0x24
 8003cee:	f8bd 0000 	ldrh.w	r0, [sp]
 8003cf2:	84f0      	strh	r0, [r6, #38]	; 0x26
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	0031      	movs	r1, r6
 8003cf8:	0020      	movs	r0, r4
 8003cfa:	f000 f801 	bl	8003d00 <zcl_reporting_reset_defaults>
 8003cfe:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003d00 <zcl_reporting_reset_defaults>:
 8003d00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003d02:	0004      	movs	r4, r0
 8003d04:	000d      	movs	r5, r1
 8003d06:	0016      	movs	r6, r2
 8003d08:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8003d0a:	8428      	strh	r0, [r5, #32]
 8003d0c:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8003d0e:	8468      	strh	r0, [r5, #34]	; 0x22
 8003d10:	8c28      	ldrh	r0, [r5, #32]
 8003d12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d16:	4288      	cmp	r0, r1
 8003d18:	d106      	bne.n	8003d28 <??zcl_reporting_reset_defaults_0>
 8003d1a:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d103      	bne.n	8003d28 <??zcl_reporting_reset_defaults_0>
 8003d20:	203d      	movs	r0, #61	; 0x3d
 8003d22:	8468      	strh	r0, [r5, #34]	; 0x22
 8003d24:	2000      	movs	r0, #0
 8003d26:	8428      	strh	r0, [r5, #32]

08003d28 <??zcl_reporting_reset_defaults_0>:
 8003d28:	ed95 0b0c 	vldr	d0, [r5, #48]	; 0x30
 8003d2c:	ed85 0b0a 	vstr	d0, [r5, #40]	; 0x28
 8003d30:	0020      	movs	r0, r4
 8003d32:	f009 fce8 	bl	800d706 <ZbZclUptime>
 8003d36:	6128      	str	r0, [r5, #16]
 8003d38:	0030      	movs	r0, r6
 8003d3a:	b2c0      	uxtb	r0, r0
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d013      	beq.n	8003d68 <??zcl_reporting_reset_defaults_1>
 8003d40:	2301      	movs	r3, #1
 8003d42:	466a      	mov	r2, sp
 8003d44:	f240 410c 	movw	r1, #1036	; 0x40c
 8003d48:	0020      	movs	r0, r4
 8003d4a:	f009 fcc7 	bl	800d6dc <ZbNwkGet>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d002      	beq.n	8003d58 <??zcl_reporting_reset_defaults_2>
 8003d52:	2000      	movs	r0, #0
 8003d54:	f88d 0000 	strb.w	r0, [sp]

08003d58 <??zcl_reporting_reset_defaults_2>:
 8003d58:	f89d 0000 	ldrb.w	r0, [sp]
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d103      	bne.n	8003d68 <??zcl_reporting_reset_defaults_1>
 8003d60:	21c8      	movs	r1, #200	; 0xc8
 8003d62:	68a8      	ldr	r0, [r5, #8]
 8003d64:	f7ff fae9 	bl	800333a <zcl_report_kick>

08003d68 <??zcl_reporting_reset_defaults_1>:
 8003d68:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003d6a <zcl_reporting_epsilon_default>:
 8003d6a:	b538      	push	{r3, r4, r5, lr}
 8003d6c:	0004      	movs	r4, r0
 8003d6e:	000d      	movs	r5, r1
 8003d70:	0028      	movs	r0, r5
 8003d72:	b2c0      	uxtb	r0, r0
 8003d74:	2838      	cmp	r0, #56	; 0x38
 8003d76:	db09      	blt.n	8003d8c <??zcl_reporting_epsilon_default_0>
 8003d78:	0028      	movs	r0, r5
 8003d7a:	b2c0      	uxtb	r0, r0
 8003d7c:	283b      	cmp	r0, #59	; 0x3b
 8003d7e:	da05      	bge.n	8003d8c <??zcl_reporting_epsilon_default_0>
 8003d80:	2000      	movs	r0, #0
 8003d82:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	; 8004954 <??DataTable11>
 8003d86:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8003d8a:	e00f      	b.n	8003dac <??zcl_reporting_epsilon_default_1>

08003d8c <??zcl_reporting_epsilon_default_0>:
 8003d8c:	0028      	movs	r0, r5
 8003d8e:	b2c0      	uxtb	r0, r0
 8003d90:	f7fe fae2 	bl	8002358 <ZbZclAttrIsAnalog>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d005      	beq.n	8003da4 <??zcl_reporting_epsilon_default_2>
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	; 8004954 <??DataTable11>
 8003d9e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8003da2:	e003      	b.n	8003dac <??zcl_reporting_epsilon_default_1>

08003da4 <??zcl_reporting_epsilon_default_2>:
 8003da4:	2000      	movs	r0, #0
 8003da6:	2100      	movs	r1, #0
 8003da8:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08003dac <??zcl_reporting_epsilon_default_1>:
 8003dac:	bd31      	pop	{r0, r4, r5, pc}
	...

08003db0 <??DataTable9>:
 8003db0:	30a5 0800                                   .0..

08003db4 <??DataTable9_1>:
 8003db4:	0000 0000                                   ....

08003db8 <??DataTable9_2>:
 8003db8:	0024 2000                                   $.. 

08003dbc <??DataTable9_3>:
 8003dbc:	3091 0800                                   .0..

08003dc0 <??DataTable9_4>:
 8003dc0:	ee80 0036                                   ..6.

08003dc4 <zcl_reporting_epsilon_check>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	0004      	movs	r4, r0
 8003dc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003dcc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003dce:	4281      	cmp	r1, r0
 8003dd0:	d101      	bne.n	8003dd6 <??zcl_reporting_epsilon_check_0>
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	e049      	b.n	8003e6a <??zcl_reporting_epsilon_check_1>

08003dd6 <??zcl_reporting_epsilon_check_0>:
 8003dd6:	8c21      	ldrh	r1, [r4, #32]
 8003dd8:	4281      	cmp	r1, r0
 8003dda:	d104      	bne.n	8003de6 <??zcl_reporting_epsilon_check_2>
 8003ddc:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d101      	bne.n	8003de6 <??zcl_reporting_epsilon_check_2>
 8003de2:	2001      	movs	r0, #1
 8003de4:	e041      	b.n	8003e6a <??zcl_reporting_epsilon_check_1>

08003de6 <??zcl_reporting_epsilon_check_2>:
 8003de6:	7ba0      	ldrb	r0, [r4, #14]
 8003de8:	2838      	cmp	r0, #56	; 0x38
 8003dea:	db1d      	blt.n	8003e28 <??zcl_reporting_epsilon_check_3>
 8003dec:	7ba0      	ldrb	r0, [r4, #14]
 8003dee:	283b      	cmp	r0, #59	; 0x3b
 8003df0:	da1a      	bge.n	8003e28 <??zcl_reporting_epsilon_check_3>
 8003df2:	8c20      	ldrh	r0, [r4, #32]
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d108      	bne.n	8003e0a <??zcl_reporting_epsilon_check_4>
 8003df8:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f002 fc0e 	bl	8006620 <__aeabi_cdcmpeq>
 8003e04:	d101      	bne.n	8003e0a <??zcl_reporting_epsilon_check_4>
 8003e06:	2000      	movs	r0, #0
 8003e08:	e02f      	b.n	8003e6a <??zcl_reporting_epsilon_check_1>

08003e0a <??zcl_reporting_epsilon_check_4>:
 8003e0a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2300      	movs	r3, #0
 8003e12:	f002 fc05 	bl	8006620 <__aeabi_cdcmpeq>
 8003e16:	d205      	bcs.n	8003e24 <??zcl_reporting_epsilon_check_5>
 8003e18:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003e1c:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8003e20:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08003e24 <??zcl_reporting_epsilon_check_5>:
 8003e24:	2001      	movs	r0, #1
 8003e26:	e020      	b.n	8003e6a <??zcl_reporting_epsilon_check_1>

08003e28 <??zcl_reporting_epsilon_check_3>:
 8003e28:	7ba0      	ldrb	r0, [r4, #14]
 8003e2a:	f7fe fa95 	bl	8002358 <ZbZclAttrIsAnalog>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d01a      	beq.n	8003e68 <??zcl_reporting_epsilon_check_6>
 8003e32:	8c20      	ldrh	r0, [r4, #32]
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d108      	bne.n	8003e4a <??zcl_reporting_epsilon_check_7>
 8003e38:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f002 fbee 	bl	8006620 <__aeabi_cdcmpeq>
 8003e44:	d101      	bne.n	8003e4a <??zcl_reporting_epsilon_check_7>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e00f      	b.n	8003e6a <??zcl_reporting_epsilon_check_1>

08003e4a <??zcl_reporting_epsilon_check_7>:
 8003e4a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2300      	movs	r3, #0
 8003e52:	f002 fbe5 	bl	8006620 <__aeabi_cdcmpeq>
 8003e56:	d205      	bcs.n	8003e64 <??zcl_reporting_epsilon_check_8>
 8003e58:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8003e5c:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8003e60:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08003e64 <??zcl_reporting_epsilon_check_8>:
 8003e64:	2001      	movs	r0, #1
 8003e66:	e000      	b.n	8003e6a <??zcl_reporting_epsilon_check_1>

08003e68 <??zcl_reporting_epsilon_check_6>:
 8003e68:	2001      	movs	r0, #1

08003e6a <??zcl_reporting_epsilon_check_1>:
 8003e6a:	bd10      	pop	{r4, pc}

08003e6c <zcl_reporting_create_default_reports>:
 8003e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	b090      	sub	sp, #64	; 0x40
 8003e72:	0005      	movs	r5, r0
 8003e74:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e76:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003e7a:	4288      	cmp	r0, r1
 8003e7c:	d001      	beq.n	8003e82 <??zcl_reporting_create_default_reports_0>
 8003e7e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003e80:	e000      	b.n	8003e84 <??zcl_reporting_create_default_reports_1>

08003e82 <??zcl_reporting_create_default_reports_0>:
 8003e82:	2400      	movs	r4, #0

08003e84 <??zcl_reporting_create_default_reports_1>:
 8003e84:	2c00      	cmp	r4, #0
 8003e86:	d054      	beq.n	8003f32 <??zcl_reporting_create_default_reports_2>
 8003e88:	0026      	movs	r6, r4
 8003e8a:	68b0      	ldr	r0, [r6, #8]
 8003e8c:	7900      	ldrb	r0, [r0, #4]
 8003e8e:	0780      	lsls	r0, r0, #30
 8003e90:	d546      	bpl.n	8003f20 <??zcl_reporting_create_default_reports_3>

08003e92 <??zcl_reporting_create_default_reports_4>:
 8003e92:	2200      	movs	r2, #0
 8003e94:	68b0      	ldr	r0, [r6, #8]
 8003e96:	8801      	ldrh	r1, [r0, #0]
 8003e98:	0028      	movs	r0, r5
 8003e9a:	f7ff fda4 	bl	80039e6 <zcl_reporting_find>
 8003e9e:	9001      	str	r0, [sp, #4]
 8003ea0:	9801      	ldr	r0, [sp, #4]
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d13c      	bne.n	8003f20 <??zcl_reporting_create_default_reports_3>

08003ea6 <??zcl_reporting_create_default_reports_5>:
 8003ea6:	2738      	movs	r7, #56	; 0x38
 8003ea8:	f05f 0800 	movs.w	r8, #0
 8003eac:	f10d 0908 	add.w	r9, sp, #8
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	0039      	movs	r1, r7
 8003eb4:	4648      	mov	r0, r9
 8003eb6:	f001 feec 	bl	8005c92 <__aeabi_memset>
 8003eba:	68b0      	ldr	r0, [r6, #8]
 8003ebc:	8800      	ldrh	r0, [r0, #0]
 8003ebe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003ec2:	9504      	str	r5, [sp, #16]
 8003ec4:	68b0      	ldr	r0, [r6, #8]
 8003ec6:	7880      	ldrb	r0, [r0, #2]
 8003ec8:	f88d 0016 	strb.w	r0, [sp, #22]
 8003ecc:	68b0      	ldr	r0, [r6, #8]
 8003ece:	7881      	ldrb	r1, [r0, #2]
 8003ed0:	a802      	add	r0, sp, #8
 8003ed2:	f7ff ff4a 	bl	8003d6a <zcl_reporting_epsilon_default>
 8003ed6:	f05f 0908 	movs.w	r9, #8
 8003eda:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8003ede:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8003ee2:	464a      	mov	r2, r9
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	4658      	mov	r0, fp
 8003ee8:	f00c ff01 	bl	8010cee <__aeabi_memcpy>
 8003eec:	aa02      	add	r2, sp, #8
 8003eee:	0031      	movs	r1, r6
 8003ef0:	68a8      	ldr	r0, [r5, #8]
 8003ef2:	f7ff feea 	bl	8003cca <zcl_reporting_config_attr_defaults>
 8003ef6:	a902      	add	r1, sp, #8
 8003ef8:	0028      	movs	r0, r5
 8003efa:	f7ff fdc6 	bl	8003a8a <zcl_reporting_save_curr_val>
 8003efe:	f88d 0000 	strb.w	r0, [sp]
 8003f02:	f89d 0000 	ldrb.w	r0, [sp]
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d002      	beq.n	8003f10 <??zcl_reporting_create_default_reports_6>
 8003f0a:	f89d 0000 	ldrb.w	r0, [sp]
 8003f0e:	e011      	b.n	8003f34 <??zcl_reporting_create_default_reports_7>

08003f10 <??zcl_reporting_create_default_reports_6>:
 8003f10:	a902      	add	r1, sp, #8
 8003f12:	0028      	movs	r0, r5
 8003f14:	f7ff fe2c 	bl	8003b70 <zcl_reporting_create_new>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d101      	bne.n	8003f20 <??zcl_reporting_create_default_reports_3>
 8003f1c:	2089      	movs	r0, #137	; 0x89
 8003f1e:	e009      	b.n	8003f34 <??zcl_reporting_create_default_reports_7>

08003f20 <??zcl_reporting_create_default_reports_3>:
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8003f26:	4288      	cmp	r0, r1
 8003f28:	d001      	beq.n	8003f2e <??zcl_reporting_create_default_reports_8>
 8003f2a:	6824      	ldr	r4, [r4, #0]
 8003f2c:	e7aa      	b.n	8003e84 <??zcl_reporting_create_default_reports_1>

08003f2e <??zcl_reporting_create_default_reports_8>:
 8003f2e:	2400      	movs	r4, #0
 8003f30:	e7a8      	b.n	8003e84 <??zcl_reporting_create_default_reports_1>

08003f32 <??zcl_reporting_create_default_reports_2>:
 8003f32:	2000      	movs	r0, #0

08003f34 <??zcl_reporting_create_default_reports_7>:
 8003f34:	b011      	add	sp, #68	; 0x44
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f3a <ZbZclHandleConfigReport>:
 8003f3a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3e:	b0c8      	sub	sp, #288	; 0x120
 8003f40:	0004      	movs	r4, r0
 8003f42:	0015      	movs	r5, r2
 8003f44:	68a0      	ldr	r0, [r4, #8]
 8003f46:	9001      	str	r0, [sp, #4]
 8003f48:	2700      	movs	r7, #0
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f88d 0003 	strb.w	r0, [sp, #3]
 8003f50:	2600      	movs	r6, #0
 8003f52:	2000      	movs	r0, #0
 8003f54:	f88d 0002 	strb.w	r0, [sp, #2]
 8003f58:	f05f 0808 	movs.w	r8, #8
 8003f5c:	f05f 0900 	movs.w	r9, #0
 8003f60:	f10d 0a0c 	add.w	sl, sp, #12
 8003f64:	464a      	mov	r2, r9
 8003f66:	4641      	mov	r1, r8
 8003f68:	4650      	mov	r0, sl
 8003f6a:	f001 fe92 	bl	8005c92 <__aeabi_memset>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f88d 000c 	strb.w	r0, [sp, #12]
 8003f74:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003f76:	7840      	ldrb	r0, [r0, #1]
 8003f78:	f88d 000d 	strb.w	r0, [sp, #13]
 8003f7c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003f7e:	7880      	ldrb	r0, [r0, #2]
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d003      	beq.n	8003f8c <??ZbZclHandleConfigReport_0>
 8003f84:	2000      	movs	r0, #0
 8003f86:	f88d 000e 	strb.w	r0, [sp, #14]
 8003f8a:	e002      	b.n	8003f92 <??ZbZclHandleConfigReport_1>

08003f8c <??ZbZclHandleConfigReport_0>:
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f88d 000e 	strb.w	r0, [sp, #14]

08003f92 <??ZbZclHandleConfigReport_1>:
 8003f92:	2001      	movs	r0, #1
 8003f94:	f88d 000f 	strb.w	r0, [sp, #15]
 8003f98:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003f9a:	8880      	ldrh	r0, [r0, #4]
 8003f9c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003fa0:	9848      	ldr	r0, [sp, #288]	; 0x120
 8003fa2:	7980      	ldrb	r0, [r0, #6]
 8003fa4:	f88d 0012 	strb.w	r0, [sp, #18]
 8003fa8:	2007      	movs	r0, #7
 8003faa:	f88d 0013 	strb.w	r0, [sp, #19]
 8003fae:	2205      	movs	r2, #5
 8003fb0:	a916      	add	r1, sp, #88	; 0x58
 8003fb2:	a803      	add	r0, sp, #12
 8003fb4:	f7fd f83f 	bl	8001036 <ZbZclAppendHeader>
 8003fb8:	9005      	str	r0, [sp, #20]
 8003fba:	9805      	ldr	r0, [sp, #20]
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d506      	bpl.n	8003fce <??ZbZclHandleConfigReport_2>
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8003fc4:	0029      	movs	r1, r5
 8003fc6:	0020      	movs	r0, r4
 8003fc8:	f009 fc94 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8003fcc:	e236      	b.n	800443c <??ZbZclHandleConfigReport_3>

08003fce <??ZbZclHandleConfigReport_2>:
 8003fce:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003fd0:	4286      	cmp	r6, r0
 8003fd2:	f080 81b4 	bcs.w	800433e <??ZbZclHandleConfigReport_4>
 8003fd6:	f05f 0900 	movs.w	r9, #0
 8003fda:	f05f 0838 	movs.w	r8, #56	; 0x38
 8003fde:	f05f 0a00 	movs.w	sl, #0
 8003fe2:	f10d 0b18 	add.w	fp, sp, #24
 8003fe6:	4652      	mov	r2, sl
 8003fe8:	4641      	mov	r1, r8
 8003fea:	4658      	mov	r0, fp
 8003fec:	f001 fe51 	bl	8005c92 <__aeabi_memset>
 8003ff0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003ff2:	1cf1      	adds	r1, r6, #3
 8003ff4:	4288      	cmp	r0, r1
 8003ff6:	d206      	bcs.n	8004006 <??ZbZclHandleConfigReport_5>
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8003ffc:	0029      	movs	r1, r5
 8003ffe:	0020      	movs	r0, r4
 8004000:	f009 fc78 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8004004:	e21a      	b.n	800443c <??ZbZclHandleConfigReport_3>

08004006 <??ZbZclHandleConfigReport_5>:
 8004006:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004008:	5d80      	ldrb	r0, [r0, r6]
 800400a:	f88d 0001 	strb.w	r0, [sp, #1]
 800400e:	1c76      	adds	r6, r6, #1
 8004010:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004012:	4430      	add	r0, r6
 8004014:	f7fd f8f3 	bl	80011fe <pletoh16>
 8004018:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800401c:	1cb6      	adds	r6, r6, #2
 800401e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004022:	2800      	cmp	r0, #0
 8004024:	f040 8159 	bne.w	80042da <??ZbZclHandleConfigReport_6>
 8004028:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800402a:	1cb1      	adds	r1, r6, #2
 800402c:	4288      	cmp	r0, r1
 800402e:	d206      	bcs.n	800403e <??ZbZclHandleConfigReport_7>
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8004034:	0029      	movs	r1, r5
 8004036:	0020      	movs	r0, r4
 8004038:	f009 fc5c 	bl	800d8f4 <ZbZclSendDefaultResponse>
 800403c:	e1fe      	b.n	800443c <??ZbZclHandleConfigReport_3>

0800403e <??ZbZclHandleConfigReport_7>:
 800403e:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004040:	1c71      	adds	r1, r6, #1
 8004042:	4288      	cmp	r0, r1
 8004044:	f0c0 808f 	bcc.w	8004166 <??ZbZclHandleConfigReport_19>

08004048 <??ZbZclHandleConfigReport_9>:
 8004048:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800404a:	5d80      	ldrb	r0, [r0, r6]
 800404c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8004050:	1c76      	adds	r6, r6, #1
 8004052:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004054:	1cb1      	adds	r1, r6, #2
 8004056:	4288      	cmp	r0, r1
 8004058:	f0c0 8085 	bcc.w	8004166 <??ZbZclHandleConfigReport_19>

0800405c <??ZbZclHandleConfigReport_10>:
 800405c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800405e:	4430      	add	r0, r6
 8004060:	f7fd f8cd 	bl	80011fe <pletoh16>
 8004064:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8004068:	1cb6      	adds	r6, r6, #2
 800406a:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800406c:	1cb1      	adds	r1, r6, #2
 800406e:	4288      	cmp	r0, r1
 8004070:	d379      	bcc.n	8004166 <??ZbZclHandleConfigReport_19>

08004072 <??ZbZclHandleConfigReport_11>:
 8004072:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004074:	4430      	add	r0, r6
 8004076:	f7fd f8c2 	bl	80011fe <pletoh16>
 800407a:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800407e:	1cb6      	adds	r6, r6, #2
 8004080:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8004082:	1c71      	adds	r1, r6, #1
 8004084:	4288      	cmp	r0, r1
 8004086:	d36e      	bcc.n	8004166 <??ZbZclHandleConfigReport_19>

08004088 <??ZbZclHandleConfigReport_12>:
 8004088:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800408c:	2848      	cmp	r0, #72	; 0x48
 800408e:	d00b      	beq.n	80040a8 <??ZbZclHandleConfigReport_13>
 8004090:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004094:	284c      	cmp	r0, #76	; 0x4c
 8004096:	d007      	beq.n	80040a8 <??ZbZclHandleConfigReport_13>
 8004098:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800409c:	2850      	cmp	r0, #80	; 0x50
 800409e:	d003      	beq.n	80040a8 <??ZbZclHandleConfigReport_13>
 80040a0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80040a4:	2851      	cmp	r0, #81	; 0x51
 80040a6:	d103      	bne.n	80040b0 <??ZbZclHandleConfigReport_14>

080040a8 <??ZbZclHandleConfigReport_13>:
 80040a8:	208c      	movs	r0, #140	; 0x8c
 80040aa:	f88d 0000 	strb.w	r0, [sp]
 80040ae:	e12e      	b.n	800430e <??ZbZclHandleConfigReport_15>

080040b0 <??ZbZclHandleConfigReport_14>:
 80040b0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80040b4:	2838      	cmp	r0, #56	; 0x38
 80040b6:	db29      	blt.n	800410c <??ZbZclHandleConfigReport_16>
 80040b8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80040bc:	283b      	cmp	r0, #59	; 0x3b
 80040be:	da25      	bge.n	800410c <??ZbZclHandleConfigReport_16>
 80040c0:	2300      	movs	r3, #0
 80040c2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 80040c4:	1b92      	subs	r2, r2, r6
 80040c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80040c8:	eb00 0106 	add.w	r1, r0, r6
 80040cc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80040d0:	f7fe f891 	bl	80021f6 <ZbZclAttrParseLength>
 80040d4:	9002      	str	r0, [sp, #8]
 80040d6:	9802      	ldr	r0, [sp, #8]
 80040d8:	2800      	cmp	r0, #0
 80040da:	d503      	bpl.n	80040e4 <??ZbZclHandleConfigReport_17>
 80040dc:	2085      	movs	r0, #133	; 0x85
 80040de:	f88d 0000 	strb.w	r0, [sp]
 80040e2:	e114      	b.n	800430e <??ZbZclHandleConfigReport_15>

080040e4 <??ZbZclHandleConfigReport_17>:
 80040e4:	466a      	mov	r2, sp
 80040e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80040e8:	eb00 0106 	add.w	r1, r0, r6
 80040ec:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80040f0:	f001 fa9d 	bl	800562e <ZbZclParseFloat>
 80040f4:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
 80040f8:	f89d 0000 	ldrb.w	r0, [sp]
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f040 8106 	bne.w	800430e <??ZbZclHandleConfigReport_15>

08004102 <??ZbZclHandleConfigReport_18>:
 8004102:	9802      	ldr	r0, [sp, #8]
 8004104:	1986      	adds	r6, r0, r6
 8004106:	2001      	movs	r0, #1
 8004108:	4681      	mov	r9, r0
 800410a:	e02c      	b.n	8004166 <??ZbZclHandleConfigReport_19>

0800410c <??ZbZclHandleConfigReport_16>:
 800410c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004110:	f7fe f922 	bl	8002358 <ZbZclAttrIsAnalog>
 8004114:	2800      	cmp	r0, #0
 8004116:	d026      	beq.n	8004166 <??ZbZclHandleConfigReport_19>
 8004118:	2300      	movs	r3, #0
 800411a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800411c:	1b92      	subs	r2, r2, r6
 800411e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004120:	eb00 0106 	add.w	r1, r0, r6
 8004124:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004128:	f7fe f865 	bl	80021f6 <ZbZclAttrParseLength>
 800412c:	9002      	str	r0, [sp, #8]
 800412e:	9802      	ldr	r0, [sp, #8]
 8004130:	2800      	cmp	r0, #0
 8004132:	d503      	bpl.n	800413c <??ZbZclHandleConfigReport_20>
 8004134:	2085      	movs	r0, #133	; 0x85
 8004136:	f88d 0000 	strb.w	r0, [sp]
 800413a:	e0e8      	b.n	800430e <??ZbZclHandleConfigReport_15>

0800413c <??ZbZclHandleConfigReport_20>:
 800413c:	466a      	mov	r2, sp
 800413e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004140:	eb00 0106 	add.w	r1, r0, r6
 8004144:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004148:	f7fe fa04 	bl	8002554 <ZbZclParseInteger>
 800414c:	f001 ffda 	bl	8006104 <__aeabi_l2d>
 8004150:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004154:	f89d 0000 	ldrb.w	r0, [sp]
 8004158:	2800      	cmp	r0, #0
 800415a:	f040 80d8 	bne.w	800430e <??ZbZclHandleConfigReport_15>

0800415e <??ZbZclHandleConfigReport_21>:
 800415e:	9802      	ldr	r0, [sp, #8]
 8004160:	1986      	adds	r6, r0, r6
 8004162:	2001      	movs	r0, #1
 8004164:	4681      	mov	r9, r0

08004166 <??ZbZclHandleConfigReport_19>:
 8004166:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800416a:	0020      	movs	r0, r4
 800416c:	f7fd f917 	bl	800139e <ZbZclAttrFind>
 8004170:	4682      	mov	sl, r0
 8004172:	f1ba 0f00 	cmp.w	sl, #0
 8004176:	d103      	bne.n	8004180 <??ZbZclHandleConfigReport_22>
 8004178:	2086      	movs	r0, #134	; 0x86
 800417a:	f88d 0000 	strb.w	r0, [sp]
 800417e:	e0c6      	b.n	800430e <??ZbZclHandleConfigReport_15>

08004180 <??ZbZclHandleConfigReport_22>:
 8004180:	f8da 0008 	ldr.w	r0, [sl, #8]
 8004184:	8880      	ldrh	r0, [r0, #4]
 8004186:	0400      	lsls	r0, r0, #16
 8004188:	d503      	bpl.n	8004192 <??ZbZclHandleConfigReport_23>
 800418a:	2086      	movs	r0, #134	; 0x86
 800418c:	f88d 0000 	strb.w	r0, [sp]
 8004190:	e0bd      	b.n	800430e <??ZbZclHandleConfigReport_15>

08004192 <??ZbZclHandleConfigReport_23>:
 8004192:	f8da 0008 	ldr.w	r0, [sl, #8]
 8004196:	7900      	ldrb	r0, [r0, #4]
 8004198:	0780      	lsls	r0, r0, #30
 800419a:	d403      	bmi.n	80041a4 <??ZbZclHandleConfigReport_24>
 800419c:	208c      	movs	r0, #140	; 0x8c
 800419e:	f88d 0000 	strb.w	r0, [sp]
 80041a2:	e0b4      	b.n	800430e <??ZbZclHandleConfigReport_15>

080041a4 <??ZbZclHandleConfigReport_24>:
 80041a4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80041a8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 80041ac:	4558      	cmp	r0, fp
 80041ae:	d101      	bne.n	80041b4 <??ZbZclHandleConfigReport_25>
 80041b0:	2000      	movs	r0, #0
 80041b2:	4681      	mov	r9, r0

080041b4 <??ZbZclHandleConfigReport_25>:
 80041b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80041b8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80041bc:	0020      	movs	r0, r4
 80041be:	f7ff fc12 	bl	80039e6 <zcl_reporting_find>
 80041c2:	4680      	mov	r8, r0
 80041c4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 80041c8:	4558      	cmp	r0, fp
 80041ca:	d11b      	bne.n	8004204 <??ZbZclHandleConfigReport_26>
 80041cc:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d117      	bne.n	8004204 <??ZbZclHandleConfigReport_26>
 80041d4:	2000      	movs	r0, #0
 80041d6:	4681      	mov	r9, r0
 80041d8:	f1b8 0f00 	cmp.w	r8, #0
 80041dc:	d00d      	beq.n	80041fa <??ZbZclHandleConfigReport_27>
 80041de:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 80041e2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80041e6:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 80041ea:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 80041ee:	2200      	movs	r2, #0
 80041f0:	a906      	add	r1, sp, #24
 80041f2:	9801      	ldr	r0, [sp, #4]
 80041f4:	f7ff fd84 	bl	8003d00 <zcl_reporting_reset_defaults>
 80041f8:	e004      	b.n	8004204 <??ZbZclHandleConfigReport_26>

080041fa <??ZbZclHandleConfigReport_27>:
 80041fa:	aa06      	add	r2, sp, #24
 80041fc:	4651      	mov	r1, sl
 80041fe:	9801      	ldr	r0, [sp, #4]
 8004200:	f7ff fd63 	bl	8003cca <zcl_reporting_config_attr_defaults>

08004204 <??ZbZclHandleConfigReport_26>:
 8004204:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8004208:	f8da 1008 	ldr.w	r1, [sl, #8]
 800420c:	7889      	ldrb	r1, [r1, #2]
 800420e:	4288      	cmp	r0, r1
 8004210:	d003      	beq.n	800421a <??ZbZclHandleConfigReport_28>
 8004212:	208d      	movs	r0, #141	; 0x8d
 8004214:	f88d 0000 	strb.w	r0, [sp]
 8004218:	e079      	b.n	800430e <??ZbZclHandleConfigReport_15>

0800421a <??ZbZclHandleConfigReport_28>:
 800421a:	f1b8 0f00 	cmp.w	r8, #0
 800421e:	d021      	beq.n	8004264 <??ZbZclHandleConfigReport_29>
 8004220:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8004224:	f8a8 0020 	strh.w	r0, [r8, #32]
 8004228:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 800422c:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
 8004230:	4648      	mov	r0, r9
 8004232:	b2c0      	uxtb	r0, r0
 8004234:	2800      	cmp	r0, #0
 8004236:	d00c      	beq.n	8004252 <??ZbZclHandleConfigReport_30>
 8004238:	a806      	add	r0, sp, #24
 800423a:	f7ff fdc3 	bl	8003dc4 <zcl_reporting_epsilon_check>
 800423e:	2800      	cmp	r0, #0
 8004240:	d103      	bne.n	800424a <??ZbZclHandleConfigReport_31>
 8004242:	2085      	movs	r0, #133	; 0x85
 8004244:	f88d 0000 	strb.w	r0, [sp]
 8004248:	e061      	b.n	800430e <??ZbZclHandleConfigReport_15>

0800424a <??ZbZclHandleConfigReport_31>:
 800424a:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800424e:	ed88 0b0a 	vstr	d0, [r8, #40]	; 0x28

08004252 <??ZbZclHandleConfigReport_30>:
 8004252:	9801      	ldr	r0, [sp, #4]
 8004254:	f009 fa57 	bl	800d706 <ZbZclUptime>
 8004258:	f8c8 0010 	str.w	r0, [r8, #16]
 800425c:	2001      	movs	r0, #1
 800425e:	f88d 0002 	strb.w	r0, [sp, #2]
 8004262:	e6b4      	b.n	8003fce <??ZbZclHandleConfigReport_2>

08004264 <??ZbZclHandleConfigReport_29>:
 8004264:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8004268:	4558      	cmp	r0, fp
 800426a:	f43f aeb0 	beq.w	8003fce <??ZbZclHandleConfigReport_2>

0800426e <??ZbZclHandleConfigReport_32>:
 800426e:	9408      	str	r4, [sp, #32]
 8004270:	4648      	mov	r0, r9
 8004272:	b2c0      	uxtb	r0, r0
 8004274:	2800      	cmp	r0, #0
 8004276:	d008      	beq.n	800428a <??ZbZclHandleConfigReport_33>
 8004278:	a806      	add	r0, sp, #24
 800427a:	f7ff fda3 	bl	8003dc4 <zcl_reporting_epsilon_check>
 800427e:	2800      	cmp	r0, #0
 8004280:	d108      	bne.n	8004294 <??ZbZclHandleConfigReport_34>
 8004282:	2085      	movs	r0, #133	; 0x85
 8004284:	f88d 0000 	strb.w	r0, [sp]
 8004288:	e041      	b.n	800430e <??ZbZclHandleConfigReport_15>

0800428a <??ZbZclHandleConfigReport_33>:
 800428a:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 800428e:	a806      	add	r0, sp, #24
 8004290:	f7ff fd6b 	bl	8003d6a <zcl_reporting_epsilon_default>

08004294 <??ZbZclHandleConfigReport_34>:
 8004294:	2008      	movs	r0, #8
 8004296:	9015      	str	r0, [sp, #84]	; 0x54
 8004298:	a810      	add	r0, sp, #64	; 0x40
 800429a:	9014      	str	r0, [sp, #80]	; 0x50
 800429c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80042a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80042a4:	4658      	mov	r0, fp
 80042a6:	f00c fd22 	bl	8010cee <__aeabi_memcpy>
 80042aa:	a906      	add	r1, sp, #24
 80042ac:	0020      	movs	r0, r4
 80042ae:	f7ff fbec 	bl	8003a8a <zcl_reporting_save_curr_val>
 80042b2:	f88d 0000 	strb.w	r0, [sp]
 80042b6:	f89d 0000 	ldrb.w	r0, [sp]
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d127      	bne.n	800430e <??ZbZclHandleConfigReport_15>

080042be <??ZbZclHandleConfigReport_35>:
 80042be:	a906      	add	r1, sp, #24
 80042c0:	0020      	movs	r0, r4
 80042c2:	f7ff fc55 	bl	8003b70 <zcl_reporting_create_new>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d103      	bne.n	80042d2 <??ZbZclHandleConfigReport_36>
 80042ca:	2189      	movs	r1, #137	; 0x89
 80042cc:	f88d 1000 	strb.w	r1, [sp]
 80042d0:	e01d      	b.n	800430e <??ZbZclHandleConfigReport_15>

080042d2 <??ZbZclHandleConfigReport_36>:
 80042d2:	2101      	movs	r1, #1
 80042d4:	f88d 1002 	strb.w	r1, [sp, #2]
 80042d8:	e679      	b.n	8003fce <??ZbZclHandleConfigReport_2>

080042da <??ZbZclHandleConfigReport_6>:
 80042da:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80042de:	2801      	cmp	r0, #1
 80042e0:	d10e      	bne.n	8004300 <??ZbZclHandleConfigReport_37>
 80042e2:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 80042e4:	1cb1      	adds	r1, r6, #2
 80042e6:	4288      	cmp	r0, r1
 80042e8:	d206      	bcs.n	80042f8 <??ZbZclHandleConfigReport_38>
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	9a48      	ldr	r2, [sp, #288]	; 0x120
 80042ee:	0029      	movs	r1, r5
 80042f0:	0020      	movs	r0, r4
 80042f2:	f009 faff 	bl	800d8f4 <ZbZclSendDefaultResponse>
 80042f6:	e0a1      	b.n	800443c <??ZbZclHandleConfigReport_3>

080042f8 <??ZbZclHandleConfigReport_38>:
 80042f8:	208c      	movs	r0, #140	; 0x8c
 80042fa:	f88d 0000 	strb.w	r0, [sp]
 80042fe:	e006      	b.n	800430e <??ZbZclHandleConfigReport_15>

08004300 <??ZbZclHandleConfigReport_37>:
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8004304:	0029      	movs	r1, r5
 8004306:	0020      	movs	r0, r4
 8004308:	f009 faf4 	bl	800d8f4 <ZbZclSendDefaultResponse>
 800430c:	e096      	b.n	800443c <??ZbZclHandleConfigReport_3>

0800430e <??ZbZclHandleConfigReport_15>:
 800430e:	f89d 0000 	ldrb.w	r0, [sp]
 8004312:	f88d 0003 	strb.w	r0, [sp, #3]
 8004316:	1d38      	adds	r0, r7, #4
 8004318:	2837      	cmp	r0, #55	; 0x37
 800431a:	d210      	bcs.n	800433e <??ZbZclHandleConfigReport_4>

0800431c <??ZbZclHandleConfigReport_39>:
 800431c:	a83a      	add	r0, sp, #232	; 0xe8
 800431e:	f89d 1000 	ldrb.w	r1, [sp]
 8004322:	55c1      	strb	r1, [r0, r7]
 8004324:	1c7f      	adds	r7, r7, #1
 8004326:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800432a:	55c1      	strb	r1, [r0, r7]
 800432c:	1c7f      	adds	r7, r7, #1
 800432e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8004332:	a83a      	add	r0, sp, #232	; 0xe8
 8004334:	4438      	add	r0, r7
 8004336:	f7fc ffae 	bl	8001296 <putle16>
 800433a:	1cbf      	adds	r7, r7, #2
 800433c:	e647      	b.n	8003fce <??ZbZclHandleConfigReport_2>

0800433e <??ZbZclHandleConfigReport_4>:
 800433e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004342:	2800      	cmp	r0, #0
 8004344:	d105      	bne.n	8004352 <??ZbZclHandleConfigReport_40>
 8004346:	2000      	movs	r0, #0
 8004348:	2100      	movs	r1, #0
 800434a:	aa3a      	add	r2, sp, #232	; 0xe8
 800434c:	5411      	strb	r1, [r2, r0]
 800434e:	1c40      	adds	r0, r0, #1
 8004350:	0007      	movs	r7, r0

08004352 <??ZbZclHandleConfigReport_40>:
 8004352:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004356:	2800      	cmp	r0, #0
 8004358:	d127      	bne.n	80043aa <??ZbZclHandleConfigReport_41>
 800435a:	f05f 0920 	movs.w	r9, #32
 800435e:	f05f 0800 	movs.w	r8, #0
 8004362:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8004366:	4642      	mov	r2, r8
 8004368:	4649      	mov	r1, r9
 800436a:	4650      	mov	r0, sl
 800436c:	f001 fc91 	bl	8005c92 <__aeabi_memset>
 8004370:	9801      	ldr	r0, [sp, #4]
 8004372:	f008 fce7 	bl	800cd44 <ZbExtendedAddress>
 8004376:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800437a:	8868      	ldrh	r0, [r5, #2]
 800437c:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
 8004380:	89a0      	ldrh	r0, [r4, #12]
 8004382:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
 8004386:	2003      	movs	r0, #3
 8004388:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
 800438c:	8a68      	ldrh	r0, [r5, #18]
 800438e:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
 8004392:	8ae8      	ldrh	r0, [r5, #22]
 8004394:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
 8004398:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800439c:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 80043a0:	aa30      	add	r2, sp, #192	; 0xc0
 80043a2:	a918      	add	r1, sp, #96	; 0x60
 80043a4:	9801      	ldr	r0, [sp, #4]
 80043a6:	f008 ff41 	bl	800d22c <ZbApsmeBindReq>

080043aa <??ZbZclHandleConfigReport_41>:
 80043aa:	2200      	movs	r2, #0
 80043ac:	a924      	add	r1, sp, #144	; 0x90
 80043ae:	0020      	movs	r0, r4
 80043b0:	f7fc f845 	bl	800043e <ZbZclClusterInitApsdeReq>
 80043b4:	a824      	add	r0, sp, #144	; 0x90
 80043b6:	f115 0110 	adds.w	r1, r5, #16
 80043ba:	2210      	movs	r2, #16
 80043bc:	f00c fc97 	bl	8010cee <__aeabi_memcpy>
 80043c0:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 80043c4:	f7fb ffd3 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80043c8:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 80043cc:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 80043d0:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 80043d4:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 80043d8:	2001      	movs	r0, #1
 80043da:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
 80043de:	2000      	movs	r0, #0
 80043e0:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 80043e4:	a816      	add	r0, sp, #88	; 0x58
 80043e6:	9020      	str	r0, [sp, #128]	; 0x80
 80043e8:	a820      	add	r0, sp, #128	; 0x80
 80043ea:	9905      	ldr	r1, [sp, #20]
 80043ec:	6041      	str	r1, [r0, #4]
 80043ee:	a93a      	add	r1, sp, #232	; 0xe8
 80043f0:	6081      	str	r1, [r0, #8]
 80043f2:	60c7      	str	r7, [r0, #12]
 80043f4:	a820      	add	r0, sp, #128	; 0x80
 80043f6:	902a      	str	r0, [sp, #168]	; 0xa8
 80043f8:	2002      	movs	r0, #2
 80043fa:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 80043fe:	2300      	movs	r3, #0
 8004400:	2200      	movs	r2, #0
 8004402:	a924      	add	r1, sp, #144	; 0x90
 8004404:	9801      	ldr	r0, [sp, #4]
 8004406:	f008 fdf5 	bl	800cff4 <ZbApsdeDataReqCallback>
 800440a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800440e:	2800      	cmp	r0, #0
 8004410:	d014      	beq.n	800443c <??ZbZclHandleConfigReport_3>
 8004412:	2301      	movs	r3, #1
 8004414:	f10d 0201 	add.w	r2, sp, #1
 8004418:	f240 410c 	movw	r1, #1036	; 0x40c
 800441c:	9801      	ldr	r0, [sp, #4]
 800441e:	f009 f95d 	bl	800d6dc <ZbNwkGet>
 8004422:	2800      	cmp	r0, #0
 8004424:	d002      	beq.n	800442c <??ZbZclHandleConfigReport_43>
 8004426:	2000      	movs	r0, #0
 8004428:	f88d 0001 	strb.w	r0, [sp, #1]

0800442c <??ZbZclHandleConfigReport_43>:
 800442c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004430:	2800      	cmp	r0, #0
 8004432:	d103      	bne.n	800443c <??ZbZclHandleConfigReport_3>
 8004434:	21c8      	movs	r1, #200	; 0xc8
 8004436:	0020      	movs	r0, r4
 8004438:	f7fe ff7f 	bl	800333a <zcl_report_kick>

0800443c <??ZbZclHandleConfigReport_3>:
 800443c:	b049      	add	sp, #292	; 0x124
 800443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004442 <ZbZclHandleReadReport>:
 8004442:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	b09a      	sub	sp, #104	; 0x68
 8004448:	4680      	mov	r8, r0
 800444a:	4691      	mov	r9, r2
 800444c:	f05f 0a00 	movs.w	sl, #0
 8004450:	2300      	movs	r3, #0
 8004452:	a28d      	add	r2, pc, #564	; (adr r2, 8004688 <??DataTable10>)
 8004454:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8004458:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800445c:	f009 fbd4 	bl	800dc08 <zb_heap_alloc>
 8004460:	0007      	movs	r7, r0
 8004462:	2f00      	cmp	r7, #0
 8004464:	d106      	bne.n	8004474 <??ZbZclHandleReadReport_0>
 8004466:	2389      	movs	r3, #137	; 0x89
 8004468:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800446a:	4649      	mov	r1, r9
 800446c:	4640      	mov	r0, r8
 800446e:	f009 fa41 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8004472:	e105      	b.n	8004680 <??ZbZclHandleReadReport_1>

08004474 <??ZbZclHandleReadReport_0>:
 8004474:	2408      	movs	r4, #8
 8004476:	2500      	movs	r5, #0
 8004478:	ae01      	add	r6, sp, #4
 800447a:	002a      	movs	r2, r5
 800447c:	0021      	movs	r1, r4
 800447e:	0030      	movs	r0, r6
 8004480:	f001 fc07 	bl	8005c92 <__aeabi_memset>
 8004484:	2000      	movs	r0, #0
 8004486:	f88d 0004 	strb.w	r0, [sp, #4]
 800448a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800448c:	7840      	ldrb	r0, [r0, #1]
 800448e:	f88d 0005 	strb.w	r0, [sp, #5]
 8004492:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004494:	7880      	ldrb	r0, [r0, #2]
 8004496:	2800      	cmp	r0, #0
 8004498:	d103      	bne.n	80044a2 <??ZbZclHandleReadReport_2>
 800449a:	2001      	movs	r0, #1
 800449c:	f88d 0006 	strb.w	r0, [sp, #6]
 80044a0:	e002      	b.n	80044a8 <??ZbZclHandleReadReport_3>

080044a2 <??ZbZclHandleReadReport_2>:
 80044a2:	2000      	movs	r0, #0
 80044a4:	f88d 0006 	strb.w	r0, [sp, #6]

080044a8 <??ZbZclHandleReadReport_3>:
 80044a8:	2001      	movs	r0, #1
 80044aa:	f88d 0007 	strb.w	r0, [sp, #7]
 80044ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80044b0:	8880      	ldrh	r0, [r0, #4]
 80044b2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80044b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80044b8:	7980      	ldrb	r0, [r0, #6]
 80044ba:	f88d 000a 	strb.w	r0, [sp, #10]
 80044be:	2009      	movs	r0, #9
 80044c0:	f88d 000b 	strb.w	r0, [sp, #11]
 80044c4:	2205      	movs	r2, #5
 80044c6:	0039      	movs	r1, r7
 80044c8:	a801      	add	r0, sp, #4
 80044ca:	f7fc fdb4 	bl	8001036 <ZbZclAppendHeader>
 80044ce:	0004      	movs	r4, r0
 80044d0:	2c00      	cmp	r4, #0
 80044d2:	d506      	bpl.n	80044e2 <??ZbZclHandleReadReport_4>
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80044d8:	4649      	mov	r1, r9
 80044da:	4640      	mov	r0, r8
 80044dc:	f009 fa0a 	bl	800d8f4 <ZbZclSendDefaultResponse>
 80044e0:	e0ce      	b.n	8004680 <??ZbZclHandleReadReport_1>

080044e2 <??ZbZclHandleReadReport_4>:
 80044e2:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 80044e6:	4582      	cmp	sl, r0
 80044e8:	f080 80a1 	bcs.w	800462e <??ZbZclHandleReadReport_5>
 80044ec:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 80044f0:	f11a 0103 	adds.w	r1, sl, #3
 80044f4:	4288      	cmp	r0, r1
 80044f6:	d206      	bcs.n	8004506 <??ZbZclHandleReadReport_6>
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80044fc:	4649      	mov	r1, r9
 80044fe:	4640      	mov	r0, r8
 8004500:	f009 f9f8 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8004504:	e0bc      	b.n	8004680 <??ZbZclHandleReadReport_1>

08004506 <??ZbZclHandleReadReport_6>:
 8004506:	4650      	mov	r0, sl
 8004508:	f110 0a01 	adds.w	sl, r0, #1
 800450c:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 8004510:	5c08      	ldrb	r0, [r1, r0]
 8004512:	2800      	cmp	r0, #0
 8004514:	d003      	beq.n	800451e <??ZbZclHandleReadReport_7>
 8004516:	2001      	movs	r0, #1
 8004518:	f88d 0000 	strb.w	r0, [sp]
 800451c:	e002      	b.n	8004524 <??ZbZclHandleReadReport_8>

0800451e <??ZbZclHandleReadReport_7>:
 800451e:	2000      	movs	r0, #0
 8004520:	f88d 0000 	strb.w	r0, [sp]

08004524 <??ZbZclHandleReadReport_8>:
 8004524:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8004528:	4450      	add	r0, sl
 800452a:	f7fc fe68 	bl	80011fe <pletoh16>
 800452e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004532:	f11a 0a02 	adds.w	sl, sl, #2
 8004536:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800453a:	4640      	mov	r0, r8
 800453c:	f7fc ff2f 	bl	800139e <ZbZclAttrFind>
 8004540:	0006      	movs	r6, r0
 8004542:	2e00      	cmp	r6, #0
 8004544:	d102      	bne.n	800454c <??ZbZclHandleReadReport_9>
 8004546:	f05f 0b86 	movs.w	fp, #134	; 0x86
 800454a:	e05c      	b.n	8004606 <??ZbZclHandleReadReport_10>

0800454c <??ZbZclHandleReadReport_9>:
 800454c:	68b0      	ldr	r0, [r6, #8]
 800454e:	7900      	ldrb	r0, [r0, #4]
 8004550:	0780      	lsls	r0, r0, #30
 8004552:	d402      	bmi.n	800455a <??ZbZclHandleReadReport_11>
 8004554:	f05f 0b8c 	movs.w	fp, #140	; 0x8c
 8004558:	e055      	b.n	8004606 <??ZbZclHandleReadReport_10>

0800455a <??ZbZclHandleReadReport_11>:
 800455a:	f89d 2000 	ldrb.w	r2, [sp]
 800455e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004562:	4640      	mov	r0, r8
 8004564:	f7ff fa3f 	bl	80039e6 <zcl_reporting_find>
 8004568:	0005      	movs	r5, r0
 800456a:	2d00      	cmp	r5, #0
 800456c:	d102      	bne.n	8004574 <??ZbZclHandleReadReport_12>
 800456e:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 8004572:	e048      	b.n	8004606 <??ZbZclHandleReadReport_10>

08004574 <??ZbZclHandleReadReport_12>:
 8004574:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8004576:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800457a:	4288      	cmp	r0, r1
 800457c:	d102      	bne.n	8004584 <??ZbZclHandleReadReport_13>
 800457e:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 8004582:	e040      	b.n	8004606 <??ZbZclHandleReadReport_10>

08004584 <??ZbZclHandleReadReport_13>:
 8004584:	2020      	movs	r0, #32
 8004586:	9005      	str	r0, [sp, #20]
 8004588:	2000      	movs	r0, #0
 800458a:	9004      	str	r0, [sp, #16]
 800458c:	f10d 0b18 	add.w	fp, sp, #24
 8004590:	9a04      	ldr	r2, [sp, #16]
 8004592:	9905      	ldr	r1, [sp, #20]
 8004594:	4658      	mov	r0, fp
 8004596:	f001 fb7c 	bl	8005c92 <__aeabi_memset>
 800459a:	f89d 0000 	ldrb.w	r0, [sp]
 800459e:	2800      	cmp	r0, #0
 80045a0:	d003      	beq.n	80045aa <??ZbZclHandleReadReport_14>
 80045a2:	2001      	movs	r0, #1
 80045a4:	f88d 0018 	strb.w	r0, [sp, #24]
 80045a8:	e002      	b.n	80045b0 <??ZbZclHandleReadReport_15>

080045aa <??ZbZclHandleReadReport_14>:
 80045aa:	2000      	movs	r0, #0
 80045ac:	f88d 0018 	strb.w	r0, [sp, #24]

080045b0 <??ZbZclHandleReadReport_15>:
 80045b0:	89a8      	ldrh	r0, [r5, #12]
 80045b2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80045b6:	7ba8      	ldrb	r0, [r5, #14]
 80045b8:	f88d 001c 	strb.w	r0, [sp, #28]
 80045bc:	8c28      	ldrh	r0, [r5, #32]
 80045be:	f8ad 001e 	strh.w	r0, [sp, #30]
 80045c2:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 80045c4:	f8ad 0020 	strh.w	r0, [sp, #32]
 80045c8:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
 80045cc:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
 80045d0:	2000      	movs	r0, #0
 80045d2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80045d6:	2000      	movs	r0, #0
 80045d8:	5538      	strb	r0, [r7, r4]
 80045da:	1c64      	adds	r4, r4, #1
 80045dc:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 80045e0:	0020      	movs	r0, r4
 80045e2:	b280      	uxth	r0, r0
 80045e4:	1a12      	subs	r2, r2, r0
 80045e6:	eb07 0104 	add.w	r1, r7, r4
 80045ea:	a806      	add	r0, sp, #24
 80045ec:	f000 f896 	bl	800471c <zcl_append_report_config_record>
 80045f0:	9003      	str	r0, [sp, #12]
 80045f2:	9803      	ldr	r0, [sp, #12]
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d503      	bpl.n	8004600 <??ZbZclHandleReadReport_16>
 80045f8:	1e64      	subs	r4, r4, #1
 80045fa:	f05f 0b01 	movs.w	fp, #1
 80045fe:	e002      	b.n	8004606 <??ZbZclHandleReadReport_10>

08004600 <??ZbZclHandleReadReport_16>:
 8004600:	9803      	ldr	r0, [sp, #12]
 8004602:	1904      	adds	r4, r0, r4
 8004604:	e76d      	b.n	80044e2 <??ZbZclHandleReadReport_4>

08004606 <??ZbZclHandleReadReport_10>:
 8004606:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800460a:	1ce1      	adds	r1, r4, #3
 800460c:	4288      	cmp	r0, r1
 800460e:	d30e      	bcc.n	800462e <??ZbZclHandleReadReport_5>

08004610 <??ZbZclHandleReadReport_17>:
 8004610:	f807 b004 	strb.w	fp, [r7, r4]
 8004614:	1c64      	adds	r4, r4, #1
 8004616:	f89d 0000 	ldrb.w	r0, [sp]
 800461a:	5538      	strb	r0, [r7, r4]
 800461c:	1c64      	adds	r4, r4, #1
 800461e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004622:	eb07 0004 	add.w	r0, r7, r4
 8004626:	f7fc fe36 	bl	8001296 <putle16>
 800462a:	1ca4      	adds	r4, r4, #2
 800462c:	e759      	b.n	80044e2 <??ZbZclHandleReadReport_4>

0800462e <??ZbZclHandleReadReport_5>:
 800462e:	464a      	mov	r2, r9
 8004630:	a90e      	add	r1, sp, #56	; 0x38
 8004632:	4640      	mov	r0, r8
 8004634:	f7fb ff03 	bl	800043e <ZbZclClusterInitApsdeReq>
 8004638:	a80e      	add	r0, sp, #56	; 0x38
 800463a:	f119 0110 	adds.w	r1, r9, #16
 800463e:	2210      	movs	r2, #16
 8004640:	f00c fb55 	bl	8010cee <__aeabi_memcpy>
 8004644:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 8004648:	f7fb fe91 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 800464c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8004650:	2001      	movs	r0, #1
 8004652:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
 8004656:	2000      	movs	r0, #0
 8004658:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
 800465c:	9714      	str	r7, [sp, #80]	; 0x50
 800465e:	0020      	movs	r0, r4
 8004660:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8004664:	2300      	movs	r3, #0
 8004666:	2200      	movs	r2, #0
 8004668:	a90e      	add	r1, sp, #56	; 0x38
 800466a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800466e:	f008 fcc1 	bl	800cff4 <ZbApsdeDataReqCallback>
 8004672:	2300      	movs	r3, #0
 8004674:	a204      	add	r2, pc, #16	; (adr r2, 8004688 <??DataTable10>)
 8004676:	0039      	movs	r1, r7
 8004678:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800467c:	f009 fad3 	bl	800dc26 <zb_heap_free>

08004680 <??ZbZclHandleReadReport_1>:
 8004680:	b01b      	add	sp, #108	; 0x6c
 8004682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004688 <??DataTable10>:
 8004688:	0000 0000                                   ....

0800468c <ZbZclHandleReportAttr>:
 800468c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	0004      	movs	r4, r0
 8004692:	000d      	movs	r5, r1
 8004694:	0016      	movs	r6, r2
 8004696:	f05f 0a00 	movs.w	sl, #0
 800469a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800469c:	2800      	cmp	r0, #0
 800469e:	d03b      	beq.n	8004718 <??ZbZclHandleReportAttr_0>

080046a0 <??ZbZclHandleReportAttr_1>:
 80046a0:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80046a2:	4651      	mov	r1, sl
 80046a4:	b289      	uxth	r1, r1
 80046a6:	1cc9      	adds	r1, r1, #3
 80046a8:	4288      	cmp	r0, r1
 80046aa:	d335      	bcc.n	8004718 <??ZbZclHandleReportAttr_0>

080046ac <??ZbZclHandleReportAttr_3>:
 80046ac:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80046ae:	4651      	mov	r1, sl
 80046b0:	b289      	uxth	r1, r1
 80046b2:	4408      	add	r0, r1
 80046b4:	f7fc fda3 	bl	80011fe <pletoh16>
 80046b8:	0007      	movs	r7, r0
 80046ba:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80046bc:	4651      	mov	r1, sl
 80046be:	b289      	uxth	r1, r1
 80046c0:	4408      	add	r0, r1
 80046c2:	7880      	ldrb	r0, [r0, #2]
 80046c4:	4680      	mov	r8, r0
 80046c6:	f11a 0a03 	adds.w	sl, sl, #3
 80046ca:	2300      	movs	r3, #0
 80046cc:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80046ce:	4650      	mov	r0, sl
 80046d0:	b280      	uxth	r0, r0
 80046d2:	1a12      	subs	r2, r2, r0
 80046d4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80046d6:	4651      	mov	r1, sl
 80046d8:	b289      	uxth	r1, r1
 80046da:	4401      	add	r1, r0
 80046dc:	4640      	mov	r0, r8
 80046de:	b2c0      	uxtb	r0, r0
 80046e0:	f7fd fd89 	bl	80021f6 <ZbZclAttrParseLength>
 80046e4:	4681      	mov	r9, r0
 80046e6:	f1b9 0f00 	cmp.w	r9, #0
 80046ea:	d415      	bmi.n	8004718 <??ZbZclHandleReportAttr_0>

080046ec <??ZbZclHandleReportAttr_4>:
 80046ec:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80046ee:	ebb0 000a 	subs.w	r0, r0, sl
 80046f2:	b280      	uxth	r0, r0
 80046f4:	9001      	str	r0, [sp, #4]
 80046f6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80046f8:	4651      	mov	r1, sl
 80046fa:	b289      	uxth	r1, r1
 80046fc:	4408      	add	r0, r1
 80046fe:	9000      	str	r0, [sp, #0]
 8004700:	4643      	mov	r3, r8
 8004702:	b2db      	uxtb	r3, r3
 8004704:	003a      	movs	r2, r7
 8004706:	b292      	uxth	r2, r2
 8004708:	0031      	movs	r1, r6
 800470a:	0020      	movs	r0, r4
 800470c:	f8d4 c05c 	ldr.w	ip, [r4, #92]	; 0x5c
 8004710:	47e0      	blx	ip
 8004712:	eb19 0a0a 	adds.w	sl, r9, sl
 8004716:	e7c3      	b.n	80046a0 <??ZbZclHandleReportAttr_1>

08004718 <??ZbZclHandleReportAttr_0>:
 8004718:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800471c <zcl_append_report_config_record>:
 800471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004720:	0005      	movs	r5, r0
 8004722:	000e      	movs	r6, r1
 8004724:	4690      	mov	r8, r2
 8004726:	2700      	movs	r7, #0
 8004728:	7828      	ldrb	r0, [r5, #0]
 800472a:	2800      	cmp	r0, #0
 800472c:	d003      	beq.n	8004736 <??zcl_append_report_config_record_0>
 800472e:	2801      	cmp	r0, #1
 8004730:	f000 80f4 	beq.w	800491c <??zcl_append_report_config_record_1>
 8004734:	e108      	b.n	8004948 <??zcl_append_report_config_record_2>

08004736 <??zcl_append_report_config_record_0>:
 8004736:	7928      	ldrb	r0, [r5, #4]
 8004738:	f001 fa9e 	bl	8005c78 <ZbZclAttrIsFloat>
 800473c:	2800      	cmp	r0, #0
 800473e:	d002      	beq.n	8004746 <??zcl_append_report_config_record_3>
 8004740:	2001      	movs	r0, #1
 8004742:	4681      	mov	r9, r0
 8004744:	e009      	b.n	800475a <??zcl_append_report_config_record_4>

08004746 <??zcl_append_report_config_record_3>:
 8004746:	7928      	ldrb	r0, [r5, #4]
 8004748:	f7fd fe06 	bl	8002358 <ZbZclAttrIsAnalog>
 800474c:	2800      	cmp	r0, #0
 800474e:	d002      	beq.n	8004756 <??zcl_append_report_config_record_5>
 8004750:	2001      	movs	r0, #1
 8004752:	4681      	mov	r9, r0
 8004754:	e001      	b.n	800475a <??zcl_append_report_config_record_4>

08004756 <??zcl_append_report_config_record_5>:
 8004756:	2000      	movs	r0, #0
 8004758:	4681      	mov	r9, r0

0800475a <??zcl_append_report_config_record_4>:
 800475a:	f1b8 0f08 	cmp.w	r8, #8
 800475e:	d202      	bcs.n	8004766 <??zcl_append_report_config_record_6>
 8004760:	f05f 30ff 	movs.w	r0, #4294967295
 8004764:	e0f3      	b.n	800494e <??zcl_append_report_config_record_7>

08004766 <??zcl_append_report_config_record_6>:
 8004766:	7828      	ldrb	r0, [r5, #0]
 8004768:	55f0      	strb	r0, [r6, r7]
 800476a:	1c7f      	adds	r7, r7, #1
 800476c:	8869      	ldrh	r1, [r5, #2]
 800476e:	eb06 0007 	add.w	r0, r6, r7
 8004772:	f7fc fd90 	bl	8001296 <putle16>
 8004776:	1cbf      	adds	r7, r7, #2
 8004778:	7928      	ldrb	r0, [r5, #4]
 800477a:	55f0      	strb	r0, [r6, r7]
 800477c:	1c7f      	adds	r7, r7, #1
 800477e:	88e9      	ldrh	r1, [r5, #6]
 8004780:	eb06 0007 	add.w	r0, r6, r7
 8004784:	f7fc fd87 	bl	8001296 <putle16>
 8004788:	1cbf      	adds	r7, r7, #2
 800478a:	8929      	ldrh	r1, [r5, #8]
 800478c:	eb06 0007 	add.w	r0, r6, r7
 8004790:	f7fc fd81 	bl	8001296 <putle16>
 8004794:	1cbf      	adds	r7, r7, #2
 8004796:	4648      	mov	r0, r9
 8004798:	b2c0      	uxtb	r0, r0
 800479a:	2800      	cmp	r0, #0
 800479c:	f000 80bd 	beq.w	800491a <??zcl_append_report_config_record_8>
 80047a0:	7928      	ldrb	r0, [r5, #4]
 80047a2:	f7fd fc9d 	bl	80020e0 <ZbZclAttrTypeLength>
 80047a6:	0004      	movs	r4, r0
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	d101      	bne.n	80047b0 <??zcl_append_report_config_record_9>
 80047ac:	2001      	movs	r0, #1
 80047ae:	e0ce      	b.n	800494e <??zcl_append_report_config_record_7>

080047b0 <??zcl_append_report_config_record_9>:
 80047b0:	2c01      	cmp	r4, #1
 80047b2:	d00e      	beq.n	80047d2 <??zcl_append_report_config_record_10>
 80047b4:	f0c0 80af 	bcc.w	8004916 <??zcl_append_report_config_record_11>
 80047b8:	2c03      	cmp	r4, #3
 80047ba:	d02f      	beq.n	800481c <??zcl_append_report_config_record_12>
 80047bc:	d319      	bcc.n	80047f2 <??zcl_append_report_config_record_13>
 80047be:	2c05      	cmp	r4, #5
 80047c0:	d054      	beq.n	800486c <??zcl_append_report_config_record_14>
 80047c2:	d33f      	bcc.n	8004844 <??zcl_append_report_config_record_15>
 80047c4:	2c07      	cmp	r4, #7
 80047c6:	d07c      	beq.n	80048c2 <??zcl_append_report_config_record_16>
 80047c8:	d365      	bcc.n	8004896 <??zcl_append_report_config_record_17>
 80047ca:	2c08      	cmp	r4, #8
 80047cc:	f000 808e 	beq.w	80048ec <??zcl_append_report_config_record_18>
 80047d0:	e0a1      	b.n	8004916 <??zcl_append_report_config_record_11>

080047d2 <??zcl_append_report_config_record_10>:
 80047d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047d6:	2201      	movs	r2, #1
 80047d8:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <??DataTable11_1>)
 80047da:	f001 ff19 	bl	8006610 <__aeabi_cdrcmple>
 80047de:	d801      	bhi.n	80047e4 <??zcl_append_report_config_record_19>
 80047e0:	2001      	movs	r0, #1
 80047e2:	e0b4      	b.n	800494e <??zcl_append_report_config_record_7>

080047e4 <??zcl_append_report_config_record_19>:
 80047e4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047e8:	f001 ff54 	bl	8006694 <__aeabi_d2iz>
 80047ec:	55f0      	strb	r0, [r6, r7]
 80047ee:	1c7f      	adds	r7, r7, #1
 80047f0:	e093      	b.n	800491a <??zcl_append_report_config_record_8>

080047f2 <??zcl_append_report_config_record_13>:
 80047f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80047f6:	2201      	movs	r2, #1
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <??DataTable11_2>)
 80047fa:	f001 ff09 	bl	8006610 <__aeabi_cdrcmple>
 80047fe:	d801      	bhi.n	8004804 <??zcl_append_report_config_record_20>
 8004800:	2001      	movs	r0, #1
 8004802:	e0a4      	b.n	800494e <??zcl_append_report_config_record_7>

08004804 <??zcl_append_report_config_record_20>:
 8004804:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004808:	f001 ff44 	bl	8006694 <__aeabi_d2iz>
 800480c:	0001      	movs	r1, r0
 800480e:	b289      	uxth	r1, r1
 8004810:	eb06 0007 	add.w	r0, r6, r7
 8004814:	f7fc fd3f 	bl	8001296 <putle16>
 8004818:	1cbf      	adds	r7, r7, #2
 800481a:	e07e      	b.n	800491a <??zcl_append_report_config_record_8>

0800481c <??zcl_append_report_config_record_12>:
 800481c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004820:	4a4f      	ldr	r2, [pc, #316]	; (8004960 <??DataTable11_3>)
 8004822:	4b50      	ldr	r3, [pc, #320]	; (8004964 <??DataTable11_4>)
 8004824:	f001 fef4 	bl	8006610 <__aeabi_cdrcmple>
 8004828:	d801      	bhi.n	800482e <??zcl_append_report_config_record_21>
 800482a:	2001      	movs	r0, #1
 800482c:	e08f      	b.n	800494e <??zcl_append_report_config_record_7>

0800482e <??zcl_append_report_config_record_21>:
 800482e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004832:	f001 ff57 	bl	80066e4 <__aeabi_d2uiz>
 8004836:	0001      	movs	r1, r0
 8004838:	eb06 0007 	add.w	r0, r6, r7
 800483c:	f7fc fd31 	bl	80012a2 <putle24>
 8004840:	1cff      	adds	r7, r7, #3
 8004842:	e06a      	b.n	800491a <??zcl_append_report_config_record_8>

08004844 <??zcl_append_report_config_record_15>:
 8004844:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004848:	4a47      	ldr	r2, [pc, #284]	; (8004968 <??DataTable11_5>)
 800484a:	4b48      	ldr	r3, [pc, #288]	; (800496c <??DataTable11_6>)
 800484c:	f001 fee0 	bl	8006610 <__aeabi_cdrcmple>
 8004850:	d801      	bhi.n	8004856 <??zcl_append_report_config_record_22>
 8004852:	2001      	movs	r0, #1
 8004854:	e07b      	b.n	800494e <??zcl_append_report_config_record_7>

08004856 <??zcl_append_report_config_record_22>:
 8004856:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800485a:	f001 ff43 	bl	80066e4 <__aeabi_d2uiz>
 800485e:	0001      	movs	r1, r0
 8004860:	eb06 0007 	add.w	r0, r6, r7
 8004864:	f7fc fd29 	bl	80012ba <putle32>
 8004868:	1d3f      	adds	r7, r7, #4
 800486a:	e056      	b.n	800491a <??zcl_append_report_config_record_8>

0800486c <??zcl_append_report_config_record_14>:
 800486c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004870:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <??DataTable11_7>)
 8004872:	4b40      	ldr	r3, [pc, #256]	; (8004974 <??DataTable11_8>)
 8004874:	f001 fecc 	bl	8006610 <__aeabi_cdrcmple>
 8004878:	d801      	bhi.n	800487e <??zcl_append_report_config_record_23>
 800487a:	2001      	movs	r0, #1
 800487c:	e067      	b.n	800494e <??zcl_append_report_config_record_7>

0800487e <??zcl_append_report_config_record_23>:
 800487e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004882:	f001 ff7f 	bl	8006784 <__aeabi_d2ulz>
 8004886:	0002      	movs	r2, r0
 8004888:	000b      	movs	r3, r1
 800488a:	eb06 0007 	add.w	r0, r6, r7
 800488e:	f7fc fd1f 	bl	80012d0 <putle40>
 8004892:	1d7f      	adds	r7, r7, #5
 8004894:	e041      	b.n	800491a <??zcl_append_report_config_record_8>

08004896 <??zcl_append_report_config_record_17>:
 8004896:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800489a:	f07f 021e 	mvns.w	r2, #30
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <??DataTable11_9>)
 80048a0:	f001 feb6 	bl	8006610 <__aeabi_cdrcmple>
 80048a4:	d801      	bhi.n	80048aa <??zcl_append_report_config_record_24>
 80048a6:	2001      	movs	r0, #1
 80048a8:	e051      	b.n	800494e <??zcl_append_report_config_record_7>

080048aa <??zcl_append_report_config_record_24>:
 80048aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80048ae:	f001 ff69 	bl	8006784 <__aeabi_d2ulz>
 80048b2:	0002      	movs	r2, r0
 80048b4:	000b      	movs	r3, r1
 80048b6:	eb06 0007 	add.w	r0, r6, r7
 80048ba:	f7fc fd13 	bl	80012e4 <putle48>
 80048be:	1dbf      	adds	r7, r7, #6
 80048c0:	e02b      	b.n	800491a <??zcl_append_report_config_record_8>

080048c2 <??zcl_append_report_config_record_16>:
 80048c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80048c6:	2201      	movs	r2, #1
 80048c8:	4b2c      	ldr	r3, [pc, #176]	; (800497c <??DataTable11_10>)
 80048ca:	f001 fea1 	bl	8006610 <__aeabi_cdrcmple>
 80048ce:	d801      	bhi.n	80048d4 <??zcl_append_report_config_record_25>
 80048d0:	2001      	movs	r0, #1
 80048d2:	e03c      	b.n	800494e <??zcl_append_report_config_record_7>

080048d4 <??zcl_append_report_config_record_25>:
 80048d4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80048d8:	f001 ff54 	bl	8006784 <__aeabi_d2ulz>
 80048dc:	0002      	movs	r2, r0
 80048de:	000b      	movs	r3, r1
 80048e0:	eb06 0007 	add.w	r0, r6, r7
 80048e4:	f7fc fd0d 	bl	8001302 <putle56>
 80048e8:	1dff      	adds	r7, r7, #7
 80048ea:	e016      	b.n	800491a <??zcl_append_report_config_record_8>

080048ec <??zcl_append_report_config_record_18>:
 80048ec:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4b23      	ldr	r3, [pc, #140]	; (8004980 <??DataTable11_11>)
 80048f4:	f001 fe8c 	bl	8006610 <__aeabi_cdrcmple>
 80048f8:	d801      	bhi.n	80048fe <??zcl_append_report_config_record_26>
 80048fa:	2001      	movs	r0, #1
 80048fc:	e027      	b.n	800494e <??zcl_append_report_config_record_7>

080048fe <??zcl_append_report_config_record_26>:
 80048fe:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004902:	f001 ff3f 	bl	8006784 <__aeabi_d2ulz>
 8004906:	0002      	movs	r2, r0
 8004908:	000b      	movs	r3, r1
 800490a:	eb06 0007 	add.w	r0, r6, r7
 800490e:	f7fc fd07 	bl	8001320 <putle64>
 8004912:	3708      	adds	r7, #8
 8004914:	e001      	b.n	800491a <??zcl_append_report_config_record_8>

08004916 <??zcl_append_report_config_record_11>:
 8004916:	2001      	movs	r0, #1
 8004918:	e019      	b.n	800494e <??zcl_append_report_config_record_7>

0800491a <??zcl_append_report_config_record_8>:
 800491a:	e017      	b.n	800494c <??zcl_append_report_config_record_27>

0800491c <??zcl_append_report_config_record_1>:
 800491c:	f1b8 0f08 	cmp.w	r8, #8
 8004920:	d202      	bcs.n	8004928 <??zcl_append_report_config_record_28>
 8004922:	f05f 30ff 	movs.w	r0, #4294967295
 8004926:	e012      	b.n	800494e <??zcl_append_report_config_record_7>

08004928 <??zcl_append_report_config_record_28>:
 8004928:	7828      	ldrb	r0, [r5, #0]
 800492a:	55f0      	strb	r0, [r6, r7]
 800492c:	1c7f      	adds	r7, r7, #1
 800492e:	8869      	ldrh	r1, [r5, #2]
 8004930:	eb06 0007 	add.w	r0, r6, r7
 8004934:	f7fc fcaf 	bl	8001296 <putle16>
 8004938:	1cbf      	adds	r7, r7, #2
 800493a:	8b29      	ldrh	r1, [r5, #24]
 800493c:	eb06 0007 	add.w	r0, r6, r7
 8004940:	f7fc fca9 	bl	8001296 <putle16>
 8004944:	1cbf      	adds	r7, r7, #2
 8004946:	e001      	b.n	800494c <??zcl_append_report_config_record_27>

08004948 <??zcl_append_report_config_record_2>:
 8004948:	2001      	movs	r0, #1
 800494a:	e000      	b.n	800494e <??zcl_append_report_config_record_7>

0800494c <??zcl_append_report_config_record_27>:
 800494c:	0038      	movs	r0, r7

0800494e <??zcl_append_report_config_record_7>:
 800494e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08004954 <??DataTable11>:
 8004954:	0000 3ff0                                   ...?

08004958 <??DataTable11_1>:
 8004958:	e000 406f                                   ..o@

0800495c <??DataTable11_2>:
 800495c:	ffe0 40ef                                   ...@

08004960 <??DataTable11_3>:
 8004960:	0001 e000                                   ....

08004964 <??DataTable11_4>:
 8004964:	ffff 416f                                   ..oA

08004968 <??DataTable11_5>:
 8004968:	0001 ffe0                                   ....

0800496c <??DataTable11_6>:
 800496c:	ffff 41ef                                   ...A

08004970 <??DataTable11_7>:
 8004970:	e001 ffff                                   ....

08004974 <??DataTable11_8>:
 8004974:	ffff 426f                                   ..oB

08004978 <??DataTable11_9>:
 8004978:	ffff 42ef                                   ...B

0800497c <??DataTable11_10>:
 800497c:	0000 4370                                   ..pC

08004980 <??DataTable11_11>:
 8004980:	0000 43f0                                   ...C

08004984 <ZbZclAttrReportConfigReq>:
 8004984:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	b09b      	sub	sp, #108	; 0x6c
 800498a:	0004      	movs	r4, r0
 800498c:	000d      	movs	r5, r1
 800498e:	001e      	movs	r6, r3
 8004990:	2700      	movs	r7, #0
 8004992:	7c28      	ldrb	r0, [r5, #16]
 8004994:	2800      	cmp	r0, #0
 8004996:	d002      	beq.n	800499e <??ZbZclAttrReportConfigReq_0>
 8004998:	7c28      	ldrb	r0, [r5, #16]
 800499a:	2807      	cmp	r0, #7
 800499c:	d301      	bcc.n	80049a2 <??ZbZclAttrReportConfigReq_1>

0800499e <??ZbZclAttrReportConfigReq_0>:
 800499e:	2001      	movs	r0, #1
 80049a0:	e059      	b.n	8004a56 <??ZbZclAttrReportConfigReq_2>

080049a2 <??ZbZclAttrReportConfigReq_1>:
 80049a2:	f05f 0800 	movs.w	r8, #0

080049a6 <??ZbZclAttrReportConfigReq_3>:
 80049a6:	7c28      	ldrb	r0, [r5, #16]
 80049a8:	4580      	cmp	r8, r0
 80049aa:	d215      	bcs.n	80049d8 <??ZbZclAttrReportConfigReq_4>
 80049ac:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80049b0:	4428      	add	r0, r5
 80049b2:	f110 0918 	adds.w	r9, r0, #24
 80049b6:	f1d7 0239 	rsbs	r2, r7, #57	; 0x39
 80049ba:	a80c      	add	r0, sp, #48	; 0x30
 80049bc:	eb00 0107 	add.w	r1, r0, r7
 80049c0:	4648      	mov	r0, r9
 80049c2:	f7ff feab 	bl	800471c <zcl_append_report_config_record>
 80049c6:	0001      	movs	r1, r0
 80049c8:	2901      	cmp	r1, #1
 80049ca:	da01      	bge.n	80049d0 <??ZbZclAttrReportConfigReq_5>
 80049cc:	2001      	movs	r0, #1
 80049ce:	e042      	b.n	8004a56 <??ZbZclAttrReportConfigReq_2>

080049d0 <??ZbZclAttrReportConfigReq_5>:
 80049d0:	19cf      	adds	r7, r1, r7
 80049d2:	f118 0801 	adds.w	r8, r8, #1
 80049d6:	e7e6      	b.n	80049a6 <??ZbZclAttrReportConfigReq_3>

080049d8 <??ZbZclAttrReportConfigReq_4>:
 80049d8:	f05f 0930 	movs.w	r9, #48	; 0x30
 80049dc:	f05f 0a00 	movs.w	sl, #0
 80049e0:	46eb      	mov	fp, sp
 80049e2:	4652      	mov	r2, sl
 80049e4:	4649      	mov	r1, r9
 80049e6:	4658      	mov	r0, fp
 80049e8:	f001 f953 	bl	8005c92 <__aeabi_memset>
 80049ec:	2000      	movs	r0, #0
 80049ee:	f88d 001a 	strb.w	r0, [sp, #26]
 80049f2:	8a20      	ldrh	r0, [r4, #16]
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d001      	beq.n	80049fc <??ZbZclAttrReportConfigReq_6>
 80049f8:	2001      	movs	r0, #1
 80049fa:	e000      	b.n	80049fe <??ZbZclAttrReportConfigReq_7>

080049fc <??ZbZclAttrReportConfigReq_6>:
 80049fc:	2000      	movs	r0, #0

080049fe <??ZbZclAttrReportConfigReq_7>:
 80049fe:	f88d 001b 	strb.w	r0, [sp, #27]
 8004a02:	8a20      	ldrh	r0, [r4, #16]
 8004a04:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004a08:	2006      	movs	r0, #6
 8004a0a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8004a0e:	f008 fef6 	bl	800d7fe <ZbZclGetNextSeqnum>
 8004a12:	f88d 0020 	strb.w	r0, [sp, #32]
 8004a16:	4668      	mov	r0, sp
 8004a18:	0029      	movs	r1, r5
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	f00c f967 	bl	8010cee <__aeabi_memcpy>
 8004a20:	8aa0      	ldrh	r0, [r4, #20]
 8004a22:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004a26:	89a0      	ldrh	r0, [r4, #12]
 8004a28:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004a2c:	7ba0      	ldrb	r0, [r4, #14]
 8004a2e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004a32:	8ae0      	ldrh	r0, [r4, #22]
 8004a34:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004a38:	7e20      	ldrb	r0, [r4, #24]
 8004a3a:	f88d 0018 	strb.w	r0, [sp, #24]
 8004a3e:	7e60      	ldrb	r0, [r4, #25]
 8004a40:	f88d 0019 	strb.w	r0, [sp, #25]
 8004a44:	a80c      	add	r0, sp, #48	; 0x30
 8004a46:	9009      	str	r0, [sp, #36]	; 0x24
 8004a48:	970a      	str	r7, [sp, #40]	; 0x28
 8004a4a:	0033      	movs	r3, r6
 8004a4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a4e:	4669      	mov	r1, sp
 8004a50:	68a0      	ldr	r0, [r4, #8]
 8004a52:	f008 feff 	bl	800d854 <ZbZclCommandReq>

08004a56 <??ZbZclAttrReportConfigReq_2>:
 8004a56:	b01d      	add	sp, #116	; 0x74
 8004a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a5c <ZbZclAttrReportReadReq>:
 8004a5c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	b09b      	sub	sp, #108	; 0x6c
 8004a62:	0005      	movs	r5, r0
 8004a64:	000e      	movs	r6, r1
 8004a66:	001f      	movs	r7, r3
 8004a68:	2400      	movs	r4, #0
 8004a6a:	7c30      	ldrb	r0, [r6, #16]
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d002      	beq.n	8004a76 <??ZbZclAttrReportReadReq_0>
 8004a70:	7c30      	ldrb	r0, [r6, #16]
 8004a72:	2807      	cmp	r0, #7
 8004a74:	d301      	bcc.n	8004a7a <??ZbZclAttrReportReadReq_1>

08004a76 <??ZbZclAttrReportReadReq_0>:
 8004a76:	2001      	movs	r0, #1
 8004a78:	e050      	b.n	8004b1c <??ZbZclAttrReportReadReq_2>

08004a7a <??ZbZclAttrReportReadReq_1>:
 8004a7a:	f05f 0800 	movs.w	r8, #0

08004a7e <??ZbZclAttrReportReadReq_3>:
 8004a7e:	7c30      	ldrb	r0, [r6, #16]
 8004a80:	4580      	cmp	r8, r0
 8004a82:	d217      	bcs.n	8004ab4 <??ZbZclAttrReportReadReq_4>
 8004a84:	1ce0      	adds	r0, r4, #3
 8004a86:	283a      	cmp	r0, #58	; 0x3a
 8004a88:	d301      	bcc.n	8004a8e <??ZbZclAttrReportReadReq_5>
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	e046      	b.n	8004b1c <??ZbZclAttrReportReadReq_2>

08004a8e <??ZbZclAttrReportReadReq_5>:
 8004a8e:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004a92:	4430      	add	r0, r6
 8004a94:	7e00      	ldrb	r0, [r0, #24]
 8004a96:	a90c      	add	r1, sp, #48	; 0x30
 8004a98:	5508      	strb	r0, [r1, r4]
 8004a9a:	1c64      	adds	r4, r4, #1
 8004a9c:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004aa0:	4430      	add	r0, r6
 8004aa2:	8b41      	ldrh	r1, [r0, #26]
 8004aa4:	a80c      	add	r0, sp, #48	; 0x30
 8004aa6:	4420      	add	r0, r4
 8004aa8:	f7fc fbf5 	bl	8001296 <putle16>
 8004aac:	1ca4      	adds	r4, r4, #2
 8004aae:	f118 0801 	adds.w	r8, r8, #1
 8004ab2:	e7e4      	b.n	8004a7e <??ZbZclAttrReportReadReq_3>

08004ab4 <??ZbZclAttrReportReadReq_4>:
 8004ab4:	f05f 0930 	movs.w	r9, #48	; 0x30
 8004ab8:	f05f 0a00 	movs.w	sl, #0
 8004abc:	46eb      	mov	fp, sp
 8004abe:	4652      	mov	r2, sl
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	4658      	mov	r0, fp
 8004ac4:	f001 f8e5 	bl	8005c92 <__aeabi_memset>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f88d 001a 	strb.w	r0, [sp, #26]
 8004ace:	2008      	movs	r0, #8
 8004ad0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8004ad4:	f008 fe93 	bl	800d7fe <ZbZclGetNextSeqnum>
 8004ad8:	f88d 0020 	strb.w	r0, [sp, #32]
 8004adc:	4668      	mov	r0, sp
 8004ade:	0031      	movs	r1, r6
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	f00c f904 	bl	8010cee <__aeabi_memcpy>
 8004ae6:	8aa8      	ldrh	r0, [r5, #20]
 8004ae8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004aec:	89a8      	ldrh	r0, [r5, #12]
 8004aee:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004af2:	7ba8      	ldrb	r0, [r5, #14]
 8004af4:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004af8:	8ae8      	ldrh	r0, [r5, #22]
 8004afa:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004afe:	7e28      	ldrb	r0, [r5, #24]
 8004b00:	f88d 0018 	strb.w	r0, [sp, #24]
 8004b04:	7e68      	ldrb	r0, [r5, #25]
 8004b06:	f88d 0019 	strb.w	r0, [sp, #25]
 8004b0a:	a80c      	add	r0, sp, #48	; 0x30
 8004b0c:	9009      	str	r0, [sp, #36]	; 0x24
 8004b0e:	940a      	str	r4, [sp, #40]	; 0x28
 8004b10:	003b      	movs	r3, r7
 8004b12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b14:	4669      	mov	r1, sp
 8004b16:	68a8      	ldr	r0, [r5, #8]
 8004b18:	f008 fe9c 	bl	800d854 <ZbZclCommandReq>

08004b1c <??ZbZclAttrReportReadReq_2>:
 8004b1c:	b01d      	add	sp, #116	; 0x74
 8004b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b22 <ZbZclAttrReportConfigDefault>:
 8004b22:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b26:	0007      	movs	r7, r0
 8004b28:	4688      	mov	r8, r1
 8004b2a:	4691      	mov	r9, r2
 8004b2c:	469a      	mov	sl, r3
 8004b2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b30:	4641      	mov	r1, r8
 8004b32:	b289      	uxth	r1, r1
 8004b34:	0038      	movs	r0, r7
 8004b36:	f7fc fc32 	bl	800139e <ZbZclAttrFind>
 8004b3a:	0005      	movs	r5, r0
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	d101      	bne.n	8004b44 <??ZbZclAttrReportConfigDefault_0>
 8004b40:	2086      	movs	r0, #134	; 0x86
 8004b42:	e02b      	b.n	8004b9c <??ZbZclAttrReportConfigDefault_1>

08004b44 <??ZbZclAttrReportConfigDefault_0>:
 8004b44:	68a8      	ldr	r0, [r5, #8]
 8004b46:	7900      	ldrb	r0, [r0, #4]
 8004b48:	0780      	lsls	r0, r0, #30
 8004b4a:	d401      	bmi.n	8004b50 <??ZbZclAttrReportConfigDefault_2>
 8004b4c:	208c      	movs	r0, #140	; 0x8c
 8004b4e:	e025      	b.n	8004b9c <??ZbZclAttrReportConfigDefault_1>

08004b50 <??ZbZclAttrReportConfigDefault_2>:
 8004b50:	2200      	movs	r2, #0
 8004b52:	4641      	mov	r1, r8
 8004b54:	b289      	uxth	r1, r1
 8004b56:	0038      	movs	r0, r7
 8004b58:	f7fe ff45 	bl	80039e6 <zcl_reporting_find>
 8004b5c:	0006      	movs	r6, r0
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	d101      	bne.n	8004b66 <??ZbZclAttrReportConfigDefault_3>
 8004b62:	208b      	movs	r0, #139	; 0x8b
 8004b64:	e01a      	b.n	8004b9c <??ZbZclAttrReportConfigDefault_1>

08004b66 <??ZbZclAttrReportConfigDefault_3>:
 8004b66:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004b6a:	f8ad a000 	strh.w	sl, [sp]
 8004b6e:	4669      	mov	r1, sp
 8004b70:	f10d 0002 	add.w	r0, sp, #2
 8004b74:	f7ff f894 	bl	8003ca0 <zcl_reporting_check_default_intvl>
 8004b78:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004b7c:	84b0      	strh	r0, [r6, #36]	; 0x24
 8004b7e:	f8bd 0000 	ldrh.w	r0, [sp]
 8004b82:	84f0      	strh	r0, [r6, #38]	; 0x26
 8004b84:	2c00      	cmp	r4, #0
 8004b86:	d003      	beq.n	8004b90 <??ZbZclAttrReportConfigDefault_4>
 8004b88:	ed94 0b00 	vldr	d0, [r4]
 8004b8c:	ed86 0b0c 	vstr	d0, [r6, #48]	; 0x30

08004b90 <??ZbZclAttrReportConfigDefault_4>:
 8004b90:	2201      	movs	r2, #1
 8004b92:	0031      	movs	r1, r6
 8004b94:	68b8      	ldr	r0, [r7, #8]
 8004b96:	f7ff f8b3 	bl	8003d00 <zcl_reporting_reset_defaults>
 8004b9a:	2000      	movs	r0, #0

08004b9c <??ZbZclAttrReportConfigDefault_1>:
 8004b9c:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004ba0 <ZbZclClusterReportCallbackAttach>:
 8004ba0:	65c1      	str	r1, [r0, #92]	; 0x5c
 8004ba2:	4770      	bx	lr

08004ba4 <zcl_cluster_command_dummy>:
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	20ff      	movs	r0, #255	; 0xff
 8004ba8:	4770      	bx	lr

08004baa <ZbZclClusterAlloc>:
 8004baa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bae:	0006      	movs	r6, r0
 8004bb0:	000f      	movs	r7, r1
 8004bb2:	4698      	mov	r8, r3
 8004bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb6:	2f6c      	cmp	r7, #108	; 0x6c
 8004bb8:	d201      	bcs.n	8004bbe <??ZbZclClusterAlloc_0>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e083      	b.n	8004cc6 <??ZbZclClusterAlloc_1>

08004bbe <??ZbZclClusterAlloc_0>:
 8004bbe:	f20f 2914 	addw	r9, pc, #532	; 0x214
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	464a      	mov	r2, r9
 8004bc6:	0039      	movs	r1, r7
 8004bc8:	0030      	movs	r0, r6
 8004bca:	f009 f81d 	bl	800dc08 <zb_heap_alloc>
 8004bce:	0004      	movs	r4, r0
 8004bd0:	2c00      	cmp	r4, #0
 8004bd2:	d101      	bne.n	8004bd8 <??ZbZclClusterAlloc_2>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e076      	b.n	8004cc6 <??ZbZclClusterAlloc_1>

08004bd8 <??ZbZclClusterAlloc_2>:
 8004bd8:	9701      	str	r7, [sp, #4]
 8004bda:	f05f 0a00 	movs.w	sl, #0
 8004bde:	46a3      	mov	fp, r4
 8004be0:	4652      	mov	r2, sl
 8004be2:	9901      	ldr	r1, [sp, #4]
 8004be4:	4658      	mov	r0, fp
 8004be6:	f001 f854 	bl	8005c92 <__aeabi_memset>
 8004bea:	6024      	str	r4, [r4, #0]
 8004bec:	6064      	str	r4, [r4, #4]
 8004bee:	60a6      	str	r6, [r4, #8]
 8004bf0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004bf4:	81a0      	strh	r0, [r4, #12]
 8004bf6:	f884 800e 	strb.w	r8, [r4, #14]
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	8220      	strh	r0, [r4, #16]
 8004bfe:	f44f 7082 	mov.w	r0, #260	; 0x104
 8004c02:	82a0      	strh	r0, [r4, #20]
 8004c04:	200f      	movs	r0, #15
 8004c06:	82e0      	strh	r0, [r4, #22]
 8004c08:	2001      	movs	r0, #1
 8004c0a:	7620      	strb	r0, [r4, #24]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	7660      	strb	r0, [r4, #25]
 8004c10:	2039      	movs	r0, #57	; 0x39
 8004c12:	8360      	strh	r0, [r4, #26]
 8004c14:	7725      	strb	r5, [r4, #28]
 8004c16:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8004c1a:	6260      	str	r0, [r4, #36]	; 0x24
 8004c1c:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8004c20:	62a0      	str	r0, [r4, #40]	; 0x28
 8004c22:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8004c26:	6320      	str	r0, [r4, #48]	; 0x30
 8004c28:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8004c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c2e:	9400      	str	r4, [sp, #0]
 8004c30:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8005008 <??DataTable5_1>
 8004c34:	2281      	movs	r2, #129	; 0x81
 8004c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c3a:	0030      	movs	r0, r6
 8004c3c:	f008 fb6c 	bl	800d318 <ZbMsgFilterRegister>
 8004c40:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004c42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d104      	bne.n	8004c52 <??ZbZclClusterAlloc_3>
 8004c48:	0020      	movs	r0, r4
 8004c4a:	f000 f870 	bl	8004d2e <ZbZclClusterFree>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e039      	b.n	8004cc6 <??ZbZclClusterAlloc_1>

08004c52 <??ZbZclClusterAlloc_3>:
 8004c52:	0022      	movs	r2, r4
 8004c54:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 800500c <??DataTable5_2>
 8004c58:	0030      	movs	r0, r6
 8004c5a:	f008 fc19 	bl	800d490 <ZbTimerAlloc>
 8004c5e:	63a0      	str	r0, [r4, #56]	; 0x38
 8004c60:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d104      	bne.n	8004c70 <??ZbZclClusterAlloc_4>
 8004c66:	0020      	movs	r0, r4
 8004c68:	f000 f861 	bl	8004d2e <ZbZclClusterFree>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e02a      	b.n	8004cc6 <??ZbZclClusterAlloc_1>

08004c70 <??ZbZclClusterAlloc_4>:
 8004c70:	0022      	movs	r2, r4
 8004c72:	f20f 1125 	addw	r1, pc, #293	; 0x125
 8004c76:	0030      	movs	r0, r6
 8004c78:	f008 fc0a 	bl	800d490 <ZbTimerAlloc>
 8004c7c:	6520      	str	r0, [r4, #80]	; 0x50
 8004c7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d104      	bne.n	8004c8e <??ZbZclClusterAlloc_5>
 8004c84:	0020      	movs	r0, r4
 8004c86:	f000 f852 	bl	8004d2e <ZbZclClusterFree>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e01b      	b.n	8004cc6 <??ZbZclClusterAlloc_1>

08004c8e <??ZbZclClusterAlloc_5>:
 8004c8e:	21ac      	movs	r1, #172	; 0xac
 8004c90:	0020      	movs	r0, r4
 8004c92:	f7fb fa9e 	bl	80001d2 <ZbZclClusterSetMinSecurity>
 8004c96:	2201      	movs	r2, #1
 8004c98:	f8df 1374 	ldr.w	r1, [pc, #884]	; 8005010 <??DataTable5_3>
 8004c9c:	0020      	movs	r0, r4
 8004c9e:	f7fe f8d7 	bl	8002e50 <ZbZclAttrAppendList>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d007      	beq.n	8004cb6 <??ZbZclClusterAlloc_6>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	464a      	mov	r2, r9
 8004caa:	0021      	movs	r1, r4
 8004cac:	0030      	movs	r0, r6
 8004cae:	f008 ffba 	bl	800dc26 <zb_heap_free>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e007      	b.n	8004cc6 <??ZbZclClusterAlloc_1>

08004cb6 <??ZbZclClusterAlloc_6>:
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	f7fd ffaf 	bl	8002c22 <ZbZclAttrIntegerWrite>
 8004cc4:	0020      	movs	r0, r4

08004cc6 <??ZbZclClusterAlloc_1>:
 8004cc6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004cca <ZbZclClusterAttach>:
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	0004      	movs	r4, r0
 8004cce:	7ba0      	ldrb	r0, [r4, #14]
 8004cd0:	28ff      	cmp	r0, #255	; 0xff
 8004cd2:	d104      	bne.n	8004cde <??ZbZclClusterAttach_0>
 8004cd4:	89a0      	ldrh	r0, [r4, #12]
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d001      	beq.n	8004cde <??ZbZclClusterAttach_0>
 8004cda:	89a0      	ldrh	r0, [r4, #12]
 8004cdc:	280a      	cmp	r0, #10

08004cde <??ZbZclClusterAttach_0>:
 8004cde:	7ba0      	ldrb	r0, [r4, #14]
 8004ce0:	28ff      	cmp	r0, #255	; 0xff
 8004ce2:	d00b      	beq.n	8004cfc <??ZbZclClusterAttach_1>
 8004ce4:	7f23      	ldrb	r3, [r4, #28]
 8004ce6:	8aa2      	ldrh	r2, [r4, #20]
 8004ce8:	7ba1      	ldrb	r1, [r4, #14]
 8004cea:	0020      	movs	r0, r4
 8004cec:	f008 fef1 	bl	800dad2 <ZbZclClusterBind>
 8004cf0:	0001      	movs	r1, r0
 8004cf2:	b2c9      	uxtb	r1, r1
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d001      	beq.n	8004cfc <??ZbZclClusterAttach_1>
 8004cf8:	b2c0      	uxtb	r0, r0
 8004cfa:	e005      	b.n	8004d08 <??ZbZclClusterAttach_2>

08004cfc <??ZbZclClusterAttach_1>:
 8004cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d101      	bne.n	8004d06 <??ZbZclClusterAttach_3>
 8004d02:	48c4      	ldr	r0, [pc, #784]	; (8005014 <??DataTable5_4>)
 8004d04:	65a0      	str	r0, [r4, #88]	; 0x58

08004d06 <??ZbZclClusterAttach_3>:
 8004d06:	2000      	movs	r0, #0

08004d08 <??ZbZclClusterAttach_2>:
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <ZbZclClusterDetach>:
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	0004      	movs	r4, r0
 8004d0e:	68a0      	ldr	r0, [r4, #8]
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d00b      	beq.n	8004d2c <??ZbZclClusterDetach_0>

08004d14 <??ZbZclClusterDetach_1>:
 8004d14:	0020      	movs	r0, r4
 8004d16:	f008 ff1f 	bl	800db58 <ZbZclClusterUnbind>
 8004d1a:	0020      	movs	r0, r4
 8004d1c:	f008 ff48 	bl	800dbb0 <ZbZclClusterRemoveAlarmResetHandler>
 8004d20:	7ba0      	ldrb	r0, [r4, #14]
 8004d22:	28ff      	cmp	r0, #255	; 0xff
 8004d24:	d002      	beq.n	8004d2c <??ZbZclClusterDetach_0>
 8004d26:	0020      	movs	r0, r4
 8004d28:	f008 fe9d 	bl	800da66 <ZbZclClusterEndpointRemove>

08004d2c <??ZbZclClusterDetach_0>:
 8004d2c:	bd10      	pop	{r4, pc}

08004d2e <ZbZclClusterFree>:
 8004d2e:	b538      	push	{r3, r4, r5, lr}
 8004d30:	0005      	movs	r5, r0
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	2c00      	cmp	r4, #0
 8004d36:	d02d      	beq.n	8004d94 <??ZbZclClusterFree_0>

08004d38 <??ZbZclClusterFree_1>:
 8004d38:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d004      	beq.n	8004d48 <??ZbZclClusterFree_2>
 8004d3e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004d40:	f008 fbf8 	bl	800d534 <ZbTimerFree>
 8004d44:	2000      	movs	r0, #0
 8004d46:	6528      	str	r0, [r5, #80]	; 0x50

08004d48 <??ZbZclClusterFree_2>:
 8004d48:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d004      	beq.n	8004d58 <??ZbZclClusterFree_3>
 8004d4e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d50:	f008 fbf0 	bl	800d534 <ZbTimerFree>
 8004d54:	2000      	movs	r0, #0
 8004d56:	63a8      	str	r0, [r5, #56]	; 0x38

08004d58 <??ZbZclClusterFree_3>:
 8004d58:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d005      	beq.n	8004d6a <??ZbZclClusterFree_4>
 8004d5e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004d60:	0020      	movs	r0, r4
 8004d62:	f008 fb3d 	bl	800d3e0 <ZbMsgFilterRemove>
 8004d66:	2000      	movs	r0, #0
 8004d68:	62e8      	str	r0, [r5, #44]	; 0x2c

08004d6a <??ZbZclClusterFree_4>:
 8004d6a:	0028      	movs	r0, r5
 8004d6c:	f7fe fe29 	bl	80039c2 <ZbZclReportCleanup>
 8004d70:	0028      	movs	r0, r5
 8004d72:	f7ff ffca 	bl	8004d0a <ZbZclClusterDetach>
 8004d76:	0028      	movs	r0, r5
 8004d78:	f7fe f976 	bl	8003068 <ZbZclAttrFreeList>
 8004d7c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d002      	beq.n	8004d88 <??ZbZclClusterFree_5>
 8004d82:	0028      	movs	r0, r5
 8004d84:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8004d86:	4788      	blx	r1

08004d88 <??ZbZclClusterFree_5>:
 8004d88:	2300      	movs	r3, #0
 8004d8a:	a212      	add	r2, pc, #72	; (adr r2, 8004dd4 <??DataTable4>)
 8004d8c:	0029      	movs	r1, r5
 8004d8e:	0020      	movs	r0, r4
 8004d90:	f008 ff49 	bl	800dc26 <zb_heap_free>

08004d94 <??ZbZclClusterFree_0>:
 8004d94:	bd31      	pop	{r0, r4, r5, pc}
	...

08004d98 <zcl_cluster_persist_timer>:
 8004d98:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004d9a:	0005      	movs	r5, r0
 8004d9c:	000e      	movs	r6, r1
 8004d9e:	0037      	movs	r7, r6
 8004da0:	a902      	add	r1, sp, #8
 8004da2:	0038      	movs	r0, r7
 8004da4:	f000 f818 	bl	8004dd8 <zcl_persist_read_attrs>
 8004da8:	0004      	movs	r4, r0
 8004daa:	2c00      	cmp	r4, #0
 8004dac:	d010      	beq.n	8004dd0 <??zcl_cluster_persist_timer_0>
 8004dae:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004db2:	9001      	str	r0, [sp, #4]
 8004db4:	9400      	str	r4, [sp, #0]
 8004db6:	7bbb      	ldrb	r3, [r7, #14]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	7f3a      	ldrb	r2, [r7, #28]
 8004dbc:	89b9      	ldrh	r1, [r7, #12]
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f000 f92a 	bl	8005018 <zcl_persist_send_cache>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	a203      	add	r2, pc, #12	; (adr r2, 8004dd4 <??DataTable4>)
 8004dc8:	0021      	movs	r1, r4
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f008 ff2b 	bl	800dc26 <zb_heap_free>

08004dd0 <??zcl_cluster_persist_timer_0>:
 8004dd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08004dd4 <??DataTable4>:
 8004dd4:	0000 0000                                   ....

08004dd8 <zcl_persist_read_attrs>:
 8004dd8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	b08c      	sub	sp, #48	; 0x30
 8004dde:	0007      	movs	r7, r0
 8004de0:	f05f 0b00 	movs.w	fp, #0
 8004de4:	f05f 0900 	movs.w	r9, #0
 8004de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dea:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004dee:	4288      	cmp	r0, r1
 8004df0:	d001      	beq.n	8004df6 <??zcl_persist_read_attrs_0>
 8004df2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004df4:	e000      	b.n	8004df8 <??zcl_persist_read_attrs_1>

08004df6 <??zcl_persist_read_attrs_0>:
 8004df6:	2400      	movs	r4, #0

08004df8 <??zcl_persist_read_attrs_1>:
 8004df8:	2c00      	cmp	r4, #0
 8004dfa:	d01e      	beq.n	8004e3a <??zcl_persist_read_attrs_2>
 8004dfc:	46a0      	mov	r8, r4
 8004dfe:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e02:	7900      	ldrb	r0, [r0, #4]
 8004e04:	0740      	lsls	r0, r0, #29
 8004e06:	d50f      	bpl.n	8004e28 <??zcl_persist_read_attrs_3>

08004e08 <??zcl_persist_read_attrs_4>:
 8004e08:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d004      	beq.n	8004e1a <??zcl_persist_read_attrs_5>
 8004e10:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004e14:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004e18:	d300      	bcc.n	8004e1c <??zcl_persist_read_attrs_6>

08004e1a <??zcl_persist_read_attrs_5>:
 8004e1a:	e005      	b.n	8004e28 <??zcl_persist_read_attrs_3>

08004e1c <??zcl_persist_read_attrs_6>:
 8004e1c:	f119 0904 	adds.w	r9, r9, #4
 8004e20:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004e24:	eb10 0909 	adds.w	r9, r0, r9

08004e28 <??zcl_persist_read_attrs_3>:
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004e2e:	4288      	cmp	r0, r1
 8004e30:	d001      	beq.n	8004e36 <??zcl_persist_read_attrs_7>
 8004e32:	6824      	ldr	r4, [r4, #0]
 8004e34:	e7e0      	b.n	8004df8 <??zcl_persist_read_attrs_1>

08004e36 <??zcl_persist_read_attrs_7>:
 8004e36:	2400      	movs	r4, #0
 8004e38:	e7de      	b.n	8004df8 <??zcl_persist_read_attrs_1>

08004e3a <??zcl_persist_read_attrs_2>:
 8004e3a:	4648      	mov	r0, r9
 8004e3c:	b280      	uxth	r0, r0
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d101      	bne.n	8004e46 <??zcl_persist_read_attrs_8>
 8004e42:	2000      	movs	r0, #0
 8004e44:	e0db      	b.n	8004ffe <??zcl_persist_read_attrs_9>

08004e46 <??zcl_persist_read_attrs_8>:
 8004e46:	2300      	movs	r3, #0
 8004e48:	a26e      	add	r2, pc, #440	; (adr r2, 8005004 <??DataTable5>)
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	b289      	uxth	r1, r1
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f008 feda 	bl	800dc08 <zb_heap_alloc>
 8004e54:	0005      	movs	r5, r0
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	d101      	bne.n	8004e5e <??zcl_persist_read_attrs_10>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e0cf      	b.n	8004ffe <??zcl_persist_read_attrs_9>

08004e5e <??zcl_persist_read_attrs_10>:
 8004e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e60:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004e64:	4288      	cmp	r0, r1
 8004e66:	d001      	beq.n	8004e6c <??zcl_persist_read_attrs_11>
 8004e68:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004e6a:	e000      	b.n	8004e6e <??zcl_persist_read_attrs_12>

08004e6c <??zcl_persist_read_attrs_11>:
 8004e6c:	2400      	movs	r4, #0

08004e6e <??zcl_persist_read_attrs_12>:
 8004e6e:	2c00      	cmp	r4, #0
 8004e70:	f000 80c1 	beq.w	8004ff6 <??zcl_persist_read_attrs_13>
 8004e74:	46a0      	mov	r8, r4
 8004e76:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e7a:	7900      	ldrb	r0, [r0, #4]
 8004e7c:	0740      	lsls	r0, r0, #29
 8004e7e:	f140 80b1 	bpl.w	8004fe4 <??zcl_persist_read_attrs_14>

08004e82 <??zcl_persist_read_attrs_15>:
 8004e82:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e86:	7900      	ldrb	r0, [r0, #4]
 8004e88:	06c0      	lsls	r0, r0, #27
 8004e8a:	d566      	bpl.n	8004f5a <??zcl_persist_read_attrs_16>
 8004e8c:	4658      	mov	r0, fp
 8004e8e:	b280      	uxth	r0, r0
 8004e90:	4428      	add	r0, r5
 8004e92:	1d00      	adds	r0, r0, #4
 8004e94:	9001      	str	r0, [sp, #4]
 8004e96:	4649      	mov	r1, r9
 8004e98:	b289      	uxth	r1, r1
 8004e9a:	4658      	mov	r0, fp
 8004e9c:	b280      	uxth	r0, r0
 8004e9e:	1a09      	subs	r1, r1, r0
 8004ea0:	1f08      	subs	r0, r1, #4
 8004ea2:	f8ad 0000 	strh.w	r0, [sp]
 8004ea6:	2020      	movs	r0, #32
 8004ea8:	9003      	str	r0, [sp, #12]
 8004eaa:	2000      	movs	r0, #0
 8004eac:	9002      	str	r0, [sp, #8]
 8004eae:	f10d 0a10 	add.w	sl, sp, #16
 8004eb2:	9a02      	ldr	r2, [sp, #8]
 8004eb4:	9903      	ldr	r1, [sp, #12]
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	f000 feeb 	bl	8005c92 <__aeabi_memset>
 8004ebc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004ec0:	9004      	str	r0, [sp, #16]
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f88d 0014 	strb.w	r0, [sp, #20]
 8004ec8:	9801      	ldr	r0, [sp, #4]
 8004eca:	9006      	str	r0, [sp, #24]
 8004ecc:	f8bd 0000 	ldrh.w	r0, [sp]
 8004ed0:	9007      	str	r0, [sp, #28]
 8004ed2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ed4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ed6:	aa04      	add	r2, sp, #16
 8004ed8:	4641      	mov	r1, r8
 8004eda:	0038      	movs	r0, r7
 8004edc:	f7fe f890 	bl	8003000 <ZbZclAttrCallbackExec>
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	b2c0      	uxtb	r0, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d17c      	bne.n	8004fe4 <??zcl_persist_read_attrs_14>

08004eea <??zcl_persist_read_attrs_17>:
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8bd 2000 	ldrh.w	r2, [sp]
 8004ef0:	9901      	ldr	r1, [sp, #4]
 8004ef2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004ef6:	7880      	ldrb	r0, [r0, #2]
 8004ef8:	f7fd f97d 	bl	80021f6 <ZbZclAttrParseLength>
 8004efc:	0006      	movs	r6, r0
 8004efe:	2e01      	cmp	r6, #1
 8004f00:	db02      	blt.n	8004f08 <??zcl_persist_read_attrs_18>
 8004f02:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004f06:	db00      	blt.n	8004f0a <??zcl_persist_read_attrs_19>

08004f08 <??zcl_persist_read_attrs_18>:
 8004f08:	e06c      	b.n	8004fe4 <??zcl_persist_read_attrs_14>

08004f0a <??zcl_persist_read_attrs_19>:
 8004f0a:	4648      	mov	r0, r9
 8004f0c:	b280      	uxth	r0, r0
 8004f0e:	4659      	mov	r1, fp
 8004f10:	b289      	uxth	r1, r1
 8004f12:	fa11 f186 	uxtah	r1, r1, r6
 8004f16:	1d09      	adds	r1, r1, #4
 8004f18:	4288      	cmp	r0, r1
 8004f1a:	d207      	bcs.n	8004f2c <??zcl_persist_read_attrs_20>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	a239      	add	r2, pc, #228	; (adr r2, 8005004 <??DataTable5>)
 8004f20:	0029      	movs	r1, r5
 8004f22:	68b8      	ldr	r0, [r7, #8]
 8004f24:	f008 fe7f 	bl	800dc26 <zb_heap_free>
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e068      	b.n	8004ffe <??zcl_persist_read_attrs_9>

08004f2c <??zcl_persist_read_attrs_20>:
 8004f2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004f30:	8801      	ldrh	r1, [r0, #0]
 8004f32:	4658      	mov	r0, fp
 8004f34:	b280      	uxth	r0, r0
 8004f36:	4428      	add	r0, r5
 8004f38:	f7fc f9ad 	bl	8001296 <putle16>
 8004f3c:	f11b 0b02 	adds.w	fp, fp, #2
 8004f40:	0030      	movs	r0, r6
 8004f42:	0001      	movs	r1, r0
 8004f44:	b289      	uxth	r1, r1
 8004f46:	4658      	mov	r0, fp
 8004f48:	b280      	uxth	r0, r0
 8004f4a:	4428      	add	r0, r5
 8004f4c:	f7fc f9a3 	bl	8001296 <putle16>
 8004f50:	f11b 0b02 	adds.w	fp, fp, #2
 8004f54:	eb16 0b0b 	adds.w	fp, r6, fp
 8004f58:	e044      	b.n	8004fe4 <??zcl_persist_read_attrs_14>

08004f5a <??zcl_persist_read_attrs_16>:
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004f60:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004f64:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004f68:	7880      	ldrb	r0, [r0, #2]
 8004f6a:	f7fd f944 	bl	80021f6 <ZbZclAttrParseLength>
 8004f6e:	0006      	movs	r6, r0
 8004f70:	2e01      	cmp	r6, #1
 8004f72:	db02      	blt.n	8004f7a <??zcl_persist_read_attrs_21>
 8004f74:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004f78:	db00      	blt.n	8004f7c <??zcl_persist_read_attrs_22>

08004f7a <??zcl_persist_read_attrs_21>:
 8004f7a:	e033      	b.n	8004fe4 <??zcl_persist_read_attrs_14>

08004f7c <??zcl_persist_read_attrs_22>:
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	b280      	uxth	r0, r0
 8004f80:	4659      	mov	r1, fp
 8004f82:	b289      	uxth	r1, r1
 8004f84:	fa11 f186 	uxtah	r1, r1, r6
 8004f88:	1d09      	adds	r1, r1, #4
 8004f8a:	4288      	cmp	r0, r1
 8004f8c:	d207      	bcs.n	8004f9e <??zcl_persist_read_attrs_23>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	a21c      	add	r2, pc, #112	; (adr r2, 8005004 <??DataTable5>)
 8004f92:	0029      	movs	r1, r5
 8004f94:	68b8      	ldr	r0, [r7, #8]
 8004f96:	f008 fe46 	bl	800dc26 <zb_heap_free>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e02f      	b.n	8004ffe <??zcl_persist_read_attrs_9>

08004f9e <??zcl_persist_read_attrs_23>:
 8004f9e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004fa2:	8801      	ldrh	r1, [r0, #0]
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	b280      	uxth	r0, r0
 8004fa8:	4428      	add	r0, r5
 8004faa:	f7fc f974 	bl	8001296 <putle16>
 8004fae:	f11b 0b02 	adds.w	fp, fp, #2
 8004fb2:	0030      	movs	r0, r6
 8004fb4:	0001      	movs	r1, r0
 8004fb6:	b289      	uxth	r1, r1
 8004fb8:	4658      	mov	r0, fp
 8004fba:	b280      	uxth	r0, r0
 8004fbc:	4428      	add	r0, r5
 8004fbe:	f7fc f96a 	bl	8001296 <putle16>
 8004fc2:	f11b 0b02 	adds.w	fp, fp, #2
 8004fc6:	9601      	str	r6, [sp, #4]
 8004fc8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004fcc:	9000      	str	r0, [sp, #0]
 8004fce:	4658      	mov	r0, fp
 8004fd0:	b280      	uxth	r0, r0
 8004fd2:	eb05 0a00 	add.w	sl, r5, r0
 8004fd6:	9a01      	ldr	r2, [sp, #4]
 8004fd8:	9900      	ldr	r1, [sp, #0]
 8004fda:	4650      	mov	r0, sl
 8004fdc:	f00b fe87 	bl	8010cee <__aeabi_memcpy>
 8004fe0:	eb16 0b0b 	adds.w	fp, r6, fp

08004fe4 <??zcl_persist_read_attrs_14>:
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8004fea:	4288      	cmp	r0, r1
 8004fec:	d001      	beq.n	8004ff2 <??zcl_persist_read_attrs_24>
 8004fee:	6824      	ldr	r4, [r4, #0]
 8004ff0:	e73d      	b.n	8004e6e <??zcl_persist_read_attrs_12>

08004ff2 <??zcl_persist_read_attrs_24>:
 8004ff2:	2400      	movs	r4, #0
 8004ff4:	e73b      	b.n	8004e6e <??zcl_persist_read_attrs_12>

08004ff6 <??zcl_persist_read_attrs_13>:
 8004ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ff8:	f8a0 b000 	strh.w	fp, [r0]
 8004ffc:	0028      	movs	r0, r5

08004ffe <??zcl_persist_read_attrs_9>:
 8004ffe:	b00d      	add	sp, #52	; 0x34
 8005000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005004 <??DataTable5>:
 8005004:	0000 0000                                   ....

08005008 <??DataTable5_1>:
 8005008:	3a37 0800                                   7:..

0800500c <??DataTable5_2>:
 800500c:	34ad 0800                                   .4..

08005010 <??DataTable5_3>:
 8005010:	20a8 0801                                   . ..

08005014 <??DataTable5_4>:
 8005014:	4ba5 0800                                   .K..

08005018 <zcl_persist_send_cache>:
 8005018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	b098      	sub	sp, #96	; 0x60
 800501e:	0005      	movs	r5, r0
 8005020:	001e      	movs	r6, r3
 8005022:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005024:	f05f 0900 	movs.w	r9, #0
 8005028:	0030      	movs	r0, r6
 800502a:	b280      	uxth	r0, r0
 800502c:	28ff      	cmp	r0, #255	; 0xff
 800502e:	d101      	bne.n	8005034 <??zcl_persist_send_cache_0>
 8005030:	2085      	movs	r0, #133	; 0x85
 8005032:	e0a1      	b.n	8005178 <??zcl_persist_send_cache_1>

08005034 <??zcl_persist_send_cache_0>:
 8005034:	0020      	movs	r0, r4
 8005036:	b280      	uxth	r0, r0
 8005038:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 800503c:	4288      	cmp	r0, r1
 800503e:	d301      	bcc.n	8005044 <??zcl_persist_send_cache_2>
 8005040:	2089      	movs	r0, #137	; 0x89
 8005042:	e099      	b.n	8005178 <??zcl_persist_send_cache_1>

08005044 <??zcl_persist_send_cache_2>:
 8005044:	f05f 0a08 	movs.w	sl, #8
 8005048:	f05f 0b00 	movs.w	fp, #0
 800504c:	466f      	mov	r7, sp
 800504e:	465a      	mov	r2, fp
 8005050:	4651      	mov	r1, sl
 8005052:	0038      	movs	r0, r7
 8005054:	f000 fe1d 	bl	8005c92 <__aeabi_memset>
 8005058:	2001      	movs	r0, #1
 800505a:	f88d 0000 	strb.w	r0, [sp]
 800505e:	2001      	movs	r0, #1
 8005060:	f88d 0001 	strb.w	r0, [sp, #1]
 8005064:	2000      	movs	r0, #0
 8005066:	f88d 0002 	strb.w	r0, [sp, #2]
 800506a:	2001      	movs	r0, #1
 800506c:	f88d 0003 	strb.w	r0, [sp, #3]
 8005070:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 8005074:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005078:	f008 fbc1 	bl	800d7fe <ZbZclGetNextSeqnum>
 800507c:	f88d 0006 	strb.w	r0, [sp, #6]
 8005080:	2000      	movs	r0, #0
 8005082:	f88d 0007 	strb.w	r0, [sp, #7]
 8005086:	2205      	movs	r2, #5
 8005088:	a904      	add	r1, sp, #16
 800508a:	4668      	mov	r0, sp
 800508c:	f7fb ffd3 	bl	8001036 <ZbZclAppendHeader>
 8005090:	0007      	movs	r7, r0
 8005092:	2f00      	cmp	r7, #0
 8005094:	d501      	bpl.n	800509a <??zcl_persist_send_cache_3>
 8005096:	2085      	movs	r0, #133	; 0x85
 8005098:	e06e      	b.n	8005178 <??zcl_persist_send_cache_1>

0800509a <??zcl_persist_send_cache_3>:
 800509a:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 800509e:	a804      	add	r0, sp, #16
 80050a0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80050a4:	a812      	add	r0, sp, #72	; 0x48
 80050a6:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 80050aa:	6047      	str	r7, [r0, #4]
 80050ac:	f119 0901 	adds.w	r9, r9, #1
 80050b0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80050b4:	a802      	add	r0, sp, #8
 80050b6:	f7fc f8ee 	bl	8001296 <putle16>
 80050ba:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 80050be:	f88d 000a 	strb.w	r0, [sp, #10]
 80050c2:	a802      	add	r0, sp, #8
 80050c4:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80050c8:	2003      	movs	r0, #3
 80050ca:	a912      	add	r1, sp, #72	; 0x48
 80050cc:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80050d0:	6048      	str	r0, [r1, #4]
 80050d2:	f119 0901 	adds.w	r9, r9, #1
 80050d6:	9824      	ldr	r0, [sp, #144]	; 0x90
 80050d8:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80050dc:	0020      	movs	r0, r4
 80050de:	b280      	uxth	r0, r0
 80050e0:	a912      	add	r1, sp, #72	; 0x48
 80050e2:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80050e6:	6048      	str	r0, [r1, #4]
 80050e8:	f119 0901 	adds.w	r9, r9, #1
 80050ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80050f0:	f05f 0a30 	movs.w	sl, #48	; 0x30
 80050f4:	f05f 0900 	movs.w	r9, #0
 80050f8:	f10d 0b18 	add.w	fp, sp, #24
 80050fc:	464a      	mov	r2, r9
 80050fe:	4651      	mov	r1, sl
 8005100:	4658      	mov	r0, fp
 8005102:	f000 fdc6 	bl	8005c92 <__aeabi_memset>
 8005106:	2003      	movs	r0, #3
 8005108:	f88d 0018 	strb.w	r0, [sp, #24]
 800510c:	0028      	movs	r0, r5
 800510e:	f007 fe19 	bl	800cd44 <ZbExtendedAddress>
 8005112:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005116:	20ff      	movs	r0, #255	; 0xff
 8005118:	f8ad 001a 	strh.w	r0, [sp, #26]
 800511c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005120:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8005124:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 8005128:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 800512c:	a812      	add	r0, sp, #72	; 0x48
 800512e:	900c      	str	r0, [sp, #48]	; 0x30
 8005130:	9803      	ldr	r0, [sp, #12]
 8005132:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8005136:	2000      	movs	r0, #0
 8005138:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 800513c:	2000      	movs	r0, #0
 800513e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8005142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005146:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800514a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800514e:	f050 0008 	orrs.w	r0, r0, #8
 8005152:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005156:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800515a:	f050 0004 	orrs.w	r0, r0, #4
 800515e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005162:	2300      	movs	r3, #0
 8005164:	2200      	movs	r2, #0
 8005166:	a906      	add	r1, sp, #24
 8005168:	0028      	movs	r0, r5
 800516a:	f007 ff43 	bl	800cff4 <ZbApsdeDataReqCallback>
 800516e:	2800      	cmp	r0, #0
 8005170:	d001      	beq.n	8005176 <??zcl_persist_send_cache_4>
 8005172:	2001      	movs	r0, #1
 8005174:	e000      	b.n	8005178 <??zcl_persist_send_cache_1>

08005176 <??zcl_persist_send_cache_4>:
 8005176:	2000      	movs	r0, #0

08005178 <??zcl_persist_send_cache_1>:
 8005178:	b01b      	add	sp, #108	; 0x6c
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800517e <ZbZclHandleGetSceneData>:
 800517e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005182:	b0a2      	sub	sp, #136	; 0x88
 8005184:	0004      	movs	r4, r0
 8005186:	000d      	movs	r5, r1
 8005188:	0016      	movs	r6, r2
 800518a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800518c:	2800      	cmp	r0, #0
 800518e:	d106      	bne.n	800519e <??ZbZclHandleGetSceneData_0>
 8005190:	2381      	movs	r3, #129	; 0x81
 8005192:	002a      	movs	r2, r5
 8005194:	0031      	movs	r1, r6
 8005196:	0020      	movs	r0, r4
 8005198:	f008 fbac 	bl	800d8f4 <ZbZclSendDefaultResponse>
 800519c:	e06b      	b.n	8005276 <??ZbZclHandleGetSceneData_1>

0800519e <??ZbZclHandleGetSceneData_0>:
 800519e:	2708      	movs	r7, #8
 80051a0:	f05f 0800 	movs.w	r8, #0
 80051a4:	46e9      	mov	r9, sp
 80051a6:	4642      	mov	r2, r8
 80051a8:	0039      	movs	r1, r7
 80051aa:	4648      	mov	r0, r9
 80051ac:	f000 fd71 	bl	8005c92 <__aeabi_memset>
 80051b0:	2000      	movs	r0, #0
 80051b2:	f88d 0000 	strb.w	r0, [sp]
 80051b6:	2001      	movs	r0, #1
 80051b8:	f88d 0001 	strb.w	r0, [sp, #1]
 80051bc:	78a8      	ldrb	r0, [r5, #2]
 80051be:	2800      	cmp	r0, #0
 80051c0:	d103      	bne.n	80051ca <??ZbZclHandleGetSceneData_2>
 80051c2:	2001      	movs	r0, #1
 80051c4:	f88d 0002 	strb.w	r0, [sp, #2]
 80051c8:	e002      	b.n	80051d0 <??ZbZclHandleGetSceneData_3>

080051ca <??ZbZclHandleGetSceneData_2>:
 80051ca:	2000      	movs	r0, #0
 80051cc:	f88d 0002 	strb.w	r0, [sp, #2]

080051d0 <??ZbZclHandleGetSceneData_3>:
 80051d0:	2001      	movs	r0, #1
 80051d2:	f88d 0003 	strb.w	r0, [sp, #3]
 80051d6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80051da:	f8ad 0004 	strh.w	r0, [sp, #4]
 80051de:	79a8      	ldrb	r0, [r5, #6]
 80051e0:	f88d 0006 	strb.w	r0, [sp, #6]
 80051e4:	20f0      	movs	r0, #240	; 0xf0
 80051e6:	f88d 0007 	strb.w	r0, [sp, #7]
 80051ea:	8b62      	ldrh	r2, [r4, #26]
 80051ec:	a90e      	add	r1, sp, #56	; 0x38
 80051ee:	4668      	mov	r0, sp
 80051f0:	f7fb ff21 	bl	8001036 <ZbZclAppendHeader>
 80051f4:	0007      	movs	r7, r0
 80051f6:	2f00      	cmp	r7, #0
 80051f8:	d506      	bpl.n	8005208 <??ZbZclHandleGetSceneData_4>
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	002a      	movs	r2, r5
 80051fe:	0031      	movs	r1, r6
 8005200:	0020      	movs	r0, r4
 8005202:	f008 fb77 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8005206:	e036      	b.n	8005276 <??ZbZclHandleGetSceneData_1>

08005208 <??ZbZclHandleGetSceneData_4>:
 8005208:	46b9      	mov	r9, r7
 800520a:	f1d9 024d 	rsbs	r2, r9, #77	; 0x4d
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	a80e      	add	r0, sp, #56	; 0x38
 8005212:	eb00 0109 	add.w	r1, r0, r9
 8005216:	0020      	movs	r0, r4
 8005218:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800521a:	4798      	blx	r3
 800521c:	4680      	mov	r8, r0
 800521e:	4640      	mov	r0, r8
 8005220:	b2c0      	uxtb	r0, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d106      	bne.n	8005234 <??ZbZclHandleGetSceneData_5>
 8005226:	2381      	movs	r3, #129	; 0x81
 8005228:	002a      	movs	r2, r5
 800522a:	0031      	movs	r1, r6
 800522c:	0020      	movs	r0, r4
 800522e:	f008 fb61 	bl	800d8f4 <ZbZclSendDefaultResponse>
 8005232:	e020      	b.n	8005276 <??ZbZclHandleGetSceneData_1>

08005234 <??ZbZclHandleGetSceneData_5>:
 8005234:	fa59 f988 	uxtab	r9, r9, r8
 8005238:	0032      	movs	r2, r6
 800523a:	a902      	add	r1, sp, #8
 800523c:	0020      	movs	r0, r4
 800523e:	f7fb f8fe 	bl	800043e <ZbZclClusterInitApsdeReq>
 8005242:	a802      	add	r0, sp, #8
 8005244:	f116 0110 	adds.w	r1, r6, #16
 8005248:	2210      	movs	r2, #16
 800524a:	f00b fd50 	bl	8010cee <__aeabi_memcpy>
 800524e:	2000      	movs	r0, #0
 8005250:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005254:	2000      	movs	r0, #0
 8005256:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
 800525a:	2000      	movs	r0, #0
 800525c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005260:	a80e      	add	r0, sp, #56	; 0x38
 8005262:	9008      	str	r0, [sp, #32]
 8005264:	4648      	mov	r0, r9
 8005266:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 800526a:	2300      	movs	r3, #0
 800526c:	2200      	movs	r2, #0
 800526e:	a902      	add	r1, sp, #8
 8005270:	68a0      	ldr	r0, [r4, #8]
 8005272:	f007 febf 	bl	800cff4 <ZbApsdeDataReqCallback>

08005276 <??ZbZclHandleGetSceneData_1>:
 8005276:	b023      	add	sp, #140	; 0x8c
 8005278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800527c <ZbZclHandleSetSceneData>:
 800527c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	b0a4      	sub	sp, #144	; 0x90
 8005282:	0004      	movs	r4, r0
 8005284:	000d      	movs	r5, r1
 8005286:	0016      	movs	r6, r2
 8005288:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800528a:	2800      	cmp	r0, #0
 800528c:	d106      	bne.n	800529c <??ZbZclHandleSetSceneData_0>
 800528e:	2381      	movs	r3, #129	; 0x81
 8005290:	002a      	movs	r2, r5
 8005292:	0031      	movs	r1, r6
 8005294:	0020      	movs	r0, r4
 8005296:	f008 fb2d 	bl	800d8f4 <ZbZclSendDefaultResponse>
 800529a:	e086      	b.n	80053aa <??ZbZclHandleSetSceneData_1>

0800529c <??ZbZclHandleSetSceneData_0>:
 800529c:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800529e:	2805      	cmp	r0, #5
 80052a0:	da06      	bge.n	80052b0 <??ZbZclHandleSetSceneData_2>
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	002a      	movs	r2, r5
 80052a6:	0031      	movs	r1, r6
 80052a8:	0020      	movs	r0, r4
 80052aa:	f008 fb23 	bl	800d8f4 <ZbZclSendDefaultResponse>
 80052ae:	e07c      	b.n	80053aa <??ZbZclHandleSetSceneData_1>

080052b0 <??ZbZclHandleSetSceneData_2>:
 80052b0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80052b2:	f7fb ffb5 	bl	8001220 <pletoh32>
 80052b6:	0007      	movs	r7, r0
 80052b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80052ba:	7900      	ldrb	r0, [r0, #4]
 80052bc:	f88d 0000 	strb.w	r0, [sp]
 80052c0:	f89d 0000 	ldrb.w	r0, [sp]
 80052c4:	1d40      	adds	r0, r0, #5
 80052c6:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80052c8:	4288      	cmp	r0, r1
 80052ca:	d206      	bcs.n	80052da <??ZbZclHandleSetSceneData_3>
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	002a      	movs	r2, r5
 80052d0:	0031      	movs	r1, r6
 80052d2:	0020      	movs	r0, r4
 80052d4:	f008 fb0e 	bl	800d8f4 <ZbZclSendDefaultResponse>
 80052d8:	e067      	b.n	80053aa <??ZbZclHandleSetSceneData_1>

080052da <??ZbZclHandleSetSceneData_3>:
 80052da:	003b      	movs	r3, r7
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f89d 2000 	ldrb.w	r2, [sp]
 80052e2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80052e4:	1d41      	adds	r1, r0, #5
 80052e6:	0020      	movs	r0, r4
 80052e8:	f8d4 c064 	ldr.w	ip, [r4, #100]	; 0x64
 80052ec:	47e0      	blx	ip
 80052ee:	4680      	mov	r8, r0
 80052f0:	f05f 0908 	movs.w	r9, #8
 80052f4:	f05f 0a00 	movs.w	sl, #0
 80052f8:	f10d 0b04 	add.w	fp, sp, #4
 80052fc:	4652      	mov	r2, sl
 80052fe:	4649      	mov	r1, r9
 8005300:	4658      	mov	r0, fp
 8005302:	f000 fcc6 	bl	8005c92 <__aeabi_memset>
 8005306:	2000      	movs	r0, #0
 8005308:	f88d 0004 	strb.w	r0, [sp, #4]
 800530c:	2001      	movs	r0, #1
 800530e:	f88d 0005 	strb.w	r0, [sp, #5]
 8005312:	78a8      	ldrb	r0, [r5, #2]
 8005314:	2800      	cmp	r0, #0
 8005316:	d103      	bne.n	8005320 <??ZbZclHandleSetSceneData_4>
 8005318:	2001      	movs	r0, #1
 800531a:	f88d 0006 	strb.w	r0, [sp, #6]
 800531e:	e002      	b.n	8005326 <??ZbZclHandleSetSceneData_5>

08005320 <??ZbZclHandleSetSceneData_4>:
 8005320:	2000      	movs	r0, #0
 8005322:	f88d 0006 	strb.w	r0, [sp, #6]

08005326 <??ZbZclHandleSetSceneData_5>:
 8005326:	2001      	movs	r0, #1
 8005328:	f88d 0007 	strb.w	r0, [sp, #7]
 800532c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8005330:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005334:	79a8      	ldrb	r0, [r5, #6]
 8005336:	f88d 000a 	strb.w	r0, [sp, #10]
 800533a:	20f1      	movs	r0, #241	; 0xf1
 800533c:	f88d 000b 	strb.w	r0, [sp, #11]
 8005340:	8b62      	ldrh	r2, [r4, #26]
 8005342:	a910      	add	r1, sp, #64	; 0x40
 8005344:	a801      	add	r0, sp, #4
 8005346:	f7fb fe76 	bl	8001036 <ZbZclAppendHeader>
 800534a:	4681      	mov	r9, r0
 800534c:	f1b9 0f00 	cmp.w	r9, #0
 8005350:	d506      	bpl.n	8005360 <??ZbZclHandleSetSceneData_6>
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	002a      	movs	r2, r5
 8005356:	0031      	movs	r1, r6
 8005358:	0020      	movs	r0, r4
 800535a:	f008 facb 	bl	800d8f4 <ZbZclSendDefaultResponse>
 800535e:	e024      	b.n	80053aa <??ZbZclHandleSetSceneData_1>

08005360 <??ZbZclHandleSetSceneData_6>:
 8005360:	46ca      	mov	sl, r9
 8005362:	a810      	add	r0, sp, #64	; 0x40
 8005364:	f800 800a 	strb.w	r8, [r0, sl]
 8005368:	f11a 0a01 	adds.w	sl, sl, #1
 800536c:	0032      	movs	r2, r6
 800536e:	a904      	add	r1, sp, #16
 8005370:	0020      	movs	r0, r4
 8005372:	f7fb f864 	bl	800043e <ZbZclClusterInitApsdeReq>
 8005376:	a804      	add	r0, sp, #16
 8005378:	f116 0110 	adds.w	r1, r6, #16
 800537c:	2210      	movs	r2, #16
 800537e:	f00b fcb6 	bl	8010cee <__aeabi_memcpy>
 8005382:	2000      	movs	r0, #0
 8005384:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8005388:	2000      	movs	r0, #0
 800538a:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
 800538e:	2000      	movs	r0, #0
 8005390:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8005394:	a810      	add	r0, sp, #64	; 0x40
 8005396:	900a      	str	r0, [sp, #40]	; 0x28
 8005398:	4650      	mov	r0, sl
 800539a:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 800539e:	2300      	movs	r3, #0
 80053a0:	2200      	movs	r2, #0
 80053a2:	a904      	add	r1, sp, #16
 80053a4:	68a0      	ldr	r0, [r4, #8]
 80053a6:	f007 fe25 	bl	800cff4 <ZbApsdeDataReqCallback>

080053aa <??ZbZclHandleSetSceneData_1>:
 80053aa:	b025      	add	sp, #148	; 0x94
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053b0 <ZbZclAppendFloat>:
 80053b0:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	b081      	sub	sp, #4
 80053b6:	ed2d 8b04 	vpush	{d8-d9}
 80053ba:	b084      	sub	sp, #16
 80053bc:	eeb0 8a40 	vmov.f32	s16, s0
 80053c0:	eef0 8a60 	vmov.f32	s17, s1
 80053c4:	000e      	movs	r6, r1
 80053c6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80053ca:	2838      	cmp	r0, #56	; 0x38
 80053cc:	d149      	bne.n	8005462 <??ZbZclAppendFloat_0>
 80053ce:	2400      	movs	r4, #0
 80053d0:	2510      	movs	r5, #16
 80053d2:	f07f 070e 	mvns.w	r7, #14
 80053d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053d8:	2802      	cmp	r0, #2
 80053da:	d202      	bcs.n	80053e2 <??ZbZclAppendFloat_1>
 80053dc:	f05f 30ff 	movs.w	r0, #4294967295
 80053e0:	e120      	b.n	8005624 <??ZbZclAppendFloat_2>

080053e2 <??ZbZclAppendFloat_1>:
 80053e2:	003a      	movs	r2, r7
 80053e4:	0029      	movs	r1, r5
 80053e6:	4668      	mov	r0, sp
 80053e8:	eeb0 0a48 	vmov.f32	s0, s16
 80053ec:	eef0 0a68 	vmov.f32	s1, s17
 80053f0:	f000 fb08 	bl	8005a04 <ZbZclFloatFrexp>
 80053f4:	eeb0 9a40 	vmov.f32	s18, s0
 80053f8:	eef0 9a60 	vmov.f32	s19, s1
 80053fc:	f8dd 8000 	ldr.w	r8, [sp]
 8005400:	ebb8 0807 	subs.w	r8, r8, r7
 8005404:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8005408:	f418 48f8 	ands.w	r8, r8, #31744	; 0x7c00
 800540c:	ec51 0b19 	vmov	r0, r1, d9
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	f001 f904 	bl	8006620 <__aeabi_cdcmpeq>
 8005418:	d210      	bcs.n	800543c <??ZbZclAppendFloat_3>
 800541a:	ec51 0b19 	vmov	r0, r1, d9
 800541e:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005422:	f001 f937 	bl	8006694 <__aeabi_d2iz>
 8005426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800542a:	fb10 f101 	smulbb	r1, r0, r1
 800542e:	0589      	lsls	r1, r1, #22
 8005430:	0d89      	lsrs	r1, r1, #22
 8005432:	ea58 0101 	orrs.w	r1, r8, r1
 8005436:	f451 4100 	orrs.w	r1, r1, #32768	; 0x8000
 800543a:	e00b      	b.n	8005454 <??ZbZclAppendFloat_4>

0800543c <??ZbZclAppendFloat_3>:
 800543c:	ec51 0b19 	vmov	r0, r1, d9
 8005440:	f001 f928 	bl	8006694 <__aeabi_d2iz>
 8005444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005448:	fb10 f101 	smulbb	r1, r0, r1
 800544c:	0589      	lsls	r1, r1, #22
 800544e:	0d89      	lsrs	r1, r1, #22
 8005450:	ea58 0101 	orrs.w	r1, r8, r1

08005454 <??ZbZclAppendFloat_4>:
 8005454:	7031      	strb	r1, [r6, #0]
 8005456:	0008      	movs	r0, r1
 8005458:	b280      	uxth	r0, r0
 800545a:	0a00      	lsrs	r0, r0, #8
 800545c:	7070      	strb	r0, [r6, #1]
 800545e:	2002      	movs	r0, #2
 8005460:	e0e0      	b.n	8005624 <??ZbZclAppendFloat_2>

08005462 <??ZbZclAppendFloat_0>:
 8005462:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8005466:	2839      	cmp	r0, #57	; 0x39
 8005468:	d14e      	bne.n	8005508 <??ZbZclAppendFloat_5>
 800546a:	2400      	movs	r4, #0
 800546c:	2580      	movs	r5, #128	; 0x80
 800546e:	f07f 077e 	mvns.w	r7, #126	; 0x7e
 8005472:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005474:	2804      	cmp	r0, #4
 8005476:	d202      	bcs.n	800547e <??ZbZclAppendFloat_6>
 8005478:	f05f 30ff 	movs.w	r0, #4294967295
 800547c:	e0d2      	b.n	8005624 <??ZbZclAppendFloat_2>

0800547e <??ZbZclAppendFloat_6>:
 800547e:	003a      	movs	r2, r7
 8005480:	0029      	movs	r1, r5
 8005482:	4668      	mov	r0, sp
 8005484:	eeb0 0a48 	vmov.f32	s0, s16
 8005488:	eef0 0a68 	vmov.f32	s1, s17
 800548c:	f000 faba 	bl	8005a04 <ZbZclFloatFrexp>
 8005490:	eeb0 9a40 	vmov.f32	s18, s0
 8005494:	eef0 9a60 	vmov.f32	s19, s1
 8005498:	f8dd 8000 	ldr.w	r8, [sp]
 800549c:	ebb8 0807 	subs.w	r8, r8, r7
 80054a0:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 80054a4:	f018 48ff 	ands.w	r8, r8, #2139095040	; 0x7f800000
 80054a8:	ec51 0b19 	vmov	r0, r1, d9
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	f001 f8b6 	bl	8006620 <__aeabi_cdcmpeq>
 80054b4:	d210      	bcs.n	80054d8 <??ZbZclAppendFloat_7>
 80054b6:	ec51 0b19 	vmov	r0, r1, d9
 80054ba:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80054be:	f001 f911 	bl	80066e4 <__aeabi_d2uiz>
 80054c2:	0001      	movs	r1, r0
 80054c4:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 80054c8:	4341      	muls	r1, r0
 80054ca:	0249      	lsls	r1, r1, #9
 80054cc:	0a49      	lsrs	r1, r1, #9
 80054ce:	ea58 0101 	orrs.w	r1, r8, r1
 80054d2:	f051 4100 	orrs.w	r1, r1, #2147483648	; 0x80000000
 80054d6:	e00b      	b.n	80054f0 <??ZbZclAppendFloat_8>

080054d8 <??ZbZclAppendFloat_7>:
 80054d8:	ec51 0b19 	vmov	r0, r1, d9
 80054dc:	f001 f902 	bl	80066e4 <__aeabi_d2uiz>
 80054e0:	0001      	movs	r1, r0
 80054e2:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 80054e6:	4341      	muls	r1, r0
 80054e8:	0249      	lsls	r1, r1, #9
 80054ea:	0a49      	lsrs	r1, r1, #9
 80054ec:	ea58 0101 	orrs.w	r1, r8, r1

080054f0 <??ZbZclAppendFloat_8>:
 80054f0:	7031      	strb	r1, [r6, #0]
 80054f2:	0008      	movs	r0, r1
 80054f4:	0a00      	lsrs	r0, r0, #8
 80054f6:	7070      	strb	r0, [r6, #1]
 80054f8:	0008      	movs	r0, r1
 80054fa:	0c00      	lsrs	r0, r0, #16
 80054fc:	70b0      	strb	r0, [r6, #2]
 80054fe:	0008      	movs	r0, r1
 8005500:	0e00      	lsrs	r0, r0, #24
 8005502:	70f0      	strb	r0, [r6, #3]
 8005504:	2004      	movs	r0, #4
 8005506:	e08d      	b.n	8005624 <??ZbZclAppendFloat_2>

08005508 <??ZbZclAppendFloat_5>:
 8005508:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 800550c:	283a      	cmp	r0, #58	; 0x3a
 800550e:	f040 8087 	bne.w	8005620 <??ZbZclAppendFloat_9>
 8005512:	2400      	movs	r4, #0
 8005514:	2500      	movs	r5, #0
 8005516:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800551a:	f8df 8744 	ldr.w	r8, [pc, #1860]	; 8005c60 <??DataTable3>
 800551e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005520:	2808      	cmp	r0, #8
 8005522:	d202      	bcs.n	800552a <??ZbZclAppendFloat_10>
 8005524:	f05f 30ff 	movs.w	r0, #4294967295
 8005528:	e07c      	b.n	8005624 <??ZbZclAppendFloat_2>

0800552a <??ZbZclAppendFloat_10>:
 800552a:	4642      	mov	r2, r8
 800552c:	0039      	movs	r1, r7
 800552e:	4668      	mov	r0, sp
 8005530:	eeb0 0a48 	vmov.f32	s0, s16
 8005534:	eef0 0a68 	vmov.f32	s1, s17
 8005538:	f000 fa64 	bl	8005a04 <ZbZclFloatFrexp>
 800553c:	eeb0 9a40 	vmov.f32	s18, s0
 8005540:	eef0 9a60 	vmov.f32	s19, s1
 8005544:	9800      	ldr	r0, [sp, #0]
 8005546:	17c1      	asrs	r1, r0, #31
 8005548:	ea5f 79e8 	movs.w	r9, r8, asr #31
 800554c:	ebb0 0008 	subs.w	r0, r0, r8
 8005550:	eb71 0109 	sbcs.w	r1, r1, r9
 8005554:	0501      	lsls	r1, r0, #20
 8005556:	2000      	movs	r0, #0
 8005558:	2200      	movs	r2, #0
 800555a:	f8df 3708 	ldr.w	r3, [pc, #1800]	; 8005c64 <??DataTable3_1>
 800555e:	4010      	ands	r0, r2
 8005560:	4019      	ands	r1, r3
 8005562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005566:	ec51 0b19 	vmov	r0, r1, d9
 800556a:	2200      	movs	r2, #0
 800556c:	2300      	movs	r3, #0
 800556e:	f001 f857 	bl	8006620 <__aeabi_cdcmpeq>
 8005572:	d21f      	bcs.n	80055b4 <??ZbZclAppendFloat_11>
 8005574:	ec51 0b19 	vmov	r0, r1, d9
 8005578:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 800557c:	f001 f902 	bl	8006784 <__aeabi_d2ulz>
 8005580:	2200      	movs	r2, #0
 8005582:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8005586:	fba2 ab00 	umull	sl, fp, r2, r0
 800558a:	fb02 bb01 	mla	fp, r2, r1, fp
 800558e:	fb03 bb00 	mla	fp, r3, r0, fp
 8005592:	f05f 30ff 	movs.w	r0, #4294967295
 8005596:	f8df 16d0 	ldr.w	r1, [pc, #1744]	; 8005c68 <??DataTable3_2>
 800559a:	ea1a 0000 	ands.w	r0, sl, r0
 800559e:	ea1b 0101 	ands.w	r1, fp, r1
 80055a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055a6:	4310      	orrs	r0, r2
 80055a8:	4319      	orrs	r1, r3
 80055aa:	f050 0200 	orrs.w	r2, r0, #0
 80055ae:	f051 4300 	orrs.w	r3, r1, #2147483648	; 0x80000000
 80055b2:	e018      	b.n	80055e6 <??ZbZclAppendFloat_12>

080055b4 <??ZbZclAppendFloat_11>:
 80055b4:	ec51 0b19 	vmov	r0, r1, d9
 80055b8:	f001 f8e4 	bl	8006784 <__aeabi_d2ulz>
 80055bc:	2200      	movs	r2, #0
 80055be:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 80055c2:	fba2 ab00 	umull	sl, fp, r2, r0
 80055c6:	fb02 bb01 	mla	fp, r2, r1, fp
 80055ca:	fb03 bb00 	mla	fp, r3, r0, fp
 80055ce:	f05f 30ff 	movs.w	r0, #4294967295
 80055d2:	f8df 1694 	ldr.w	r1, [pc, #1684]	; 8005c68 <??DataTable3_2>
 80055d6:	ea1a 0000 	ands.w	r0, sl, r0
 80055da:	ea1b 0101 	ands.w	r1, fp, r1
 80055de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e2:	4302      	orrs	r2, r0
 80055e4:	430b      	orrs	r3, r1

080055e6 <??ZbZclAppendFloat_12>:
 80055e6:	7032      	strb	r2, [r6, #0]
 80055e8:	0010      	movs	r0, r2
 80055ea:	b280      	uxth	r0, r0
 80055ec:	0a00      	lsrs	r0, r0, #8
 80055ee:	7070      	strb	r0, [r6, #1]
 80055f0:	0010      	movs	r0, r2
 80055f2:	0c00      	lsrs	r0, r0, #16
 80055f4:	70b0      	strb	r0, [r6, #2]
 80055f6:	0010      	movs	r0, r2
 80055f8:	0e00      	lsrs	r0, r0, #24
 80055fa:	70f0      	strb	r0, [r6, #3]
 80055fc:	7133      	strb	r3, [r6, #4]
 80055fe:	0010      	movs	r0, r2
 8005600:	0019      	movs	r1, r3
 8005602:	0a08      	lsrs	r0, r1, #8
 8005604:	2100      	movs	r1, #0
 8005606:	7170      	strb	r0, [r6, #5]
 8005608:	0010      	movs	r0, r2
 800560a:	0019      	movs	r1, r3
 800560c:	0c08      	lsrs	r0, r1, #16
 800560e:	2100      	movs	r1, #0
 8005610:	71b0      	strb	r0, [r6, #6]
 8005612:	0010      	movs	r0, r2
 8005614:	0019      	movs	r1, r3
 8005616:	0e08      	lsrs	r0, r1, #24
 8005618:	2100      	movs	r1, #0
 800561a:	71f0      	strb	r0, [r6, #7]
 800561c:	2008      	movs	r0, #8
 800561e:	e001      	b.n	8005624 <??ZbZclAppendFloat_2>

08005620 <??ZbZclAppendFloat_9>:
 8005620:	f05f 30ff 	movs.w	r0, #4294967295

08005624 <??ZbZclAppendFloat_2>:
 8005624:	b004      	add	sp, #16
 8005626:	ecbd 8b04 	vpop	{d8-d9}
 800562a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800562e <ZbZclParseFloat>:
 800562e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005632:	ed2d 8b02 	vpush	{d8}
 8005636:	000e      	movs	r6, r1
 8005638:	4691      	mov	r9, r2
 800563a:	2000      	movs	r0, #0
 800563c:	f889 0000 	strb.w	r0, [r9]
 8005640:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005644:	2838      	cmp	r0, #56	; 0x38
 8005646:	d006      	beq.n	8005656 <??ZbZclParseFloat_0>
 8005648:	f0c0 8138 	bcc.w	80058bc <??ZbZclParseFloat_1>
 800564c:	283a      	cmp	r0, #58	; 0x3a
 800564e:	f000 80ad 	beq.w	80057ac <??ZbZclParseFloat_2>
 8005652:	d354      	bcc.n	80056fe <??ZbZclParseFloat_3>
 8005654:	e132      	b.n	80058bc <??ZbZclParseFloat_1>

08005656 <??ZbZclParseFloat_0>:
 8005656:	0030      	movs	r0, r6
 8005658:	f7fb fdd1 	bl	80011fe <pletoh16>
 800565c:	0004      	movs	r4, r0
 800565e:	0020      	movs	r0, r4
 8005660:	b280      	uxth	r0, r0
 8005662:	f410 40f8 	ands.w	r0, r0, #31744	; 0x7c00
 8005666:	f5b0 4ff8 	cmp.w	r0, #31744	; 0x7c00
 800566a:	d121      	bne.n	80056b0 <??ZbZclParseFloat_4>
 800566c:	05a0      	lsls	r0, r4, #22
 800566e:	d008      	beq.n	8005682 <??ZbZclParseFloat_5>
 8005670:	2000      	movs	r0, #0
 8005672:	2100      	movs	r1, #0
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	f000 fe9c 	bl	80063b4 <__aeabi_ddiv>
 800567c:	ec41 0b10 	vmov	d0, r0, r1
 8005680:	e127      	b.n	80058d2 <??ZbZclParseFloat_6>

08005682 <??ZbZclParseFloat_5>:
 8005682:	0420      	lsls	r0, r4, #16
 8005684:	d50a      	bpl.n	800569c <??ZbZclParseFloat_7>
 8005686:	2000      	movs	r0, #0
 8005688:	f8df 15e0 	ldr.w	r1, [pc, #1504]	; 8005c6c <??DataTable3_3>
 800568c:	2200      	movs	r2, #0
 800568e:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8005692:	f000 fe8f 	bl	80063b4 <__aeabi_ddiv>
 8005696:	ec41 0b10 	vmov	d0, r0, r1
 800569a:	e008      	b.n	80056ae <??ZbZclParseFloat_8>

0800569c <??ZbZclParseFloat_7>:
 800569c:	2000      	movs	r0, #0
 800569e:	f8df 15cc 	ldr.w	r1, [pc, #1484]	; 8005c6c <??DataTable3_3>
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	f000 fe85 	bl	80063b4 <__aeabi_ddiv>
 80056aa:	ec41 0b10 	vmov	d0, r0, r1

080056ae <??ZbZclParseFloat_8>:
 80056ae:	e110      	b.n	80058d2 <??ZbZclParseFloat_6>

080056b0 <??ZbZclParseFloat_4>:
 80056b0:	f3c4 2884 	ubfx	r8, r4, #10, #5
 80056b4:	4645      	mov	r5, r8
 80056b6:	b2ad      	uxth	r5, r5
 80056b8:	3d0f      	subs	r5, #15
 80056ba:	3d0a      	subs	r5, #10
 80056bc:	f414 4ff8 	tst.w	r4, #31744	; 0x7c00
 80056c0:	d004      	beq.n	80056cc <??ZbZclParseFloat_9>
 80056c2:	05a7      	lsls	r7, r4, #22
 80056c4:	0dbf      	lsrs	r7, r7, #22
 80056c6:	f517 6780 	adds.w	r7, r7, #1024	; 0x400
 80056ca:	e002      	b.n	80056d2 <??ZbZclParseFloat_10>

080056cc <??ZbZclParseFloat_9>:
 80056cc:	1c6d      	adds	r5, r5, #1
 80056ce:	05a7      	lsls	r7, r4, #22
 80056d0:	0dbf      	lsrs	r7, r7, #22

080056d2 <??ZbZclParseFloat_10>:
 80056d2:	0038      	movs	r0, r7
 80056d4:	b280      	uxth	r0, r0
 80056d6:	f000 fcc9 	bl	800606c <__aeabi_ui2d>
 80056da:	ec41 0b18 	vmov	d8, r0, r1
 80056de:	0420      	lsls	r0, r4, #16
 80056e0:	d505      	bpl.n	80056ee <??ZbZclParseFloat_11>
 80056e2:	ec51 0b18 	vmov	r0, r1, d8
 80056e6:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80056ea:	ec41 0b18 	vmov	d8, r0, r1

080056ee <??ZbZclParseFloat_11>:
 80056ee:	0028      	movs	r0, r5
 80056f0:	eeb0 0a48 	vmov.f32	s0, s16
 80056f4:	eef0 0a68 	vmov.f32	s1, s17
 80056f8:	f000 f8ef 	bl	80058da <ZbZclFloatLdexp>
 80056fc:	e0e9      	b.n	80058d2 <??ZbZclParseFloat_6>

080056fe <??ZbZclParseFloat_3>:
 80056fe:	0030      	movs	r0, r6
 8005700:	f7fb fd8e 	bl	8001220 <pletoh32>
 8005704:	0004      	movs	r4, r0
 8005706:	f014 40ff 	ands.w	r0, r4, #2139095040	; 0x7f800000
 800570a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800570e:	d121      	bne.n	8005754 <??ZbZclParseFloat_12>
 8005710:	0260      	lsls	r0, r4, #9
 8005712:	d008      	beq.n	8005726 <??ZbZclParseFloat_13>
 8005714:	2000      	movs	r0, #0
 8005716:	2100      	movs	r1, #0
 8005718:	2200      	movs	r2, #0
 800571a:	2300      	movs	r3, #0
 800571c:	f000 fe4a 	bl	80063b4 <__aeabi_ddiv>
 8005720:	ec41 0b10 	vmov	d0, r0, r1
 8005724:	e0d5      	b.n	80058d2 <??ZbZclParseFloat_6>

08005726 <??ZbZclParseFloat_13>:
 8005726:	2c00      	cmp	r4, #0
 8005728:	d50a      	bpl.n	8005740 <??ZbZclParseFloat_14>
 800572a:	2000      	movs	r0, #0
 800572c:	f8df 153c 	ldr.w	r1, [pc, #1340]	; 8005c6c <??DataTable3_3>
 8005730:	2200      	movs	r2, #0
 8005732:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8005736:	f000 fe3d 	bl	80063b4 <__aeabi_ddiv>
 800573a:	ec41 0b10 	vmov	d0, r0, r1
 800573e:	e008      	b.n	8005752 <??ZbZclParseFloat_15>

08005740 <??ZbZclParseFloat_14>:
 8005740:	2000      	movs	r0, #0
 8005742:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 8005c6c <??DataTable3_3>
 8005746:	2200      	movs	r2, #0
 8005748:	2300      	movs	r3, #0
 800574a:	f000 fe33 	bl	80063b4 <__aeabi_ddiv>
 800574e:	ec41 0b10 	vmov	d0, r0, r1

08005752 <??ZbZclParseFloat_15>:
 8005752:	e0be      	b.n	80058d2 <??ZbZclParseFloat_6>

08005754 <??ZbZclParseFloat_12>:
 8005754:	0025      	movs	r5, r4
 8005756:	0ded      	lsrs	r5, r5, #23
 8005758:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800575c:	002f      	movs	r7, r5
 800575e:	b2bf      	uxth	r7, r7
 8005760:	3f7f      	subs	r7, #127	; 0x7f
 8005762:	3f17      	subs	r7, #23
 8005764:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8005768:	d006      	beq.n	8005778 <??ZbZclParseFloat_16>
 800576a:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800576e:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8005772:	f518 0800 	adds.w	r8, r8, #8388608	; 0x800000
 8005776:	e004      	b.n	8005782 <??ZbZclParseFloat_17>

08005778 <??ZbZclParseFloat_16>:
 8005778:	1c7f      	adds	r7, r7, #1
 800577a:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800577e:	ea5f 2858 	movs.w	r8, r8, lsr #9

08005782 <??ZbZclParseFloat_17>:
 8005782:	4640      	mov	r0, r8
 8005784:	f000 fc72 	bl	800606c <__aeabi_ui2d>
 8005788:	ec41 0b18 	vmov	d8, r0, r1
 800578c:	2c00      	cmp	r4, #0
 800578e:	d505      	bpl.n	800579c <??ZbZclParseFloat_18>
 8005790:	ec51 0b18 	vmov	r0, r1, d8
 8005794:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005798:	ec41 0b18 	vmov	d8, r0, r1

0800579c <??ZbZclParseFloat_18>:
 800579c:	0038      	movs	r0, r7
 800579e:	eeb0 0a48 	vmov.f32	s0, s16
 80057a2:	eef0 0a68 	vmov.f32	s1, s17
 80057a6:	f000 f898 	bl	80058da <ZbZclFloatLdexp>
 80057aa:	e092      	b.n	80058d2 <??ZbZclParseFloat_6>

080057ac <??ZbZclParseFloat_2>:
 80057ac:	0030      	movs	r0, r6
 80057ae:	f7fb fd64 	bl	800127a <pletoh64>
 80057b2:	0004      	movs	r4, r0
 80057b4:	000d      	movs	r5, r1
 80057b6:	2000      	movs	r0, #0
 80057b8:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005c64 <??DataTable3_1>
 80057bc:	ea14 0200 	ands.w	r2, r4, r0
 80057c0:	ea15 0301 	ands.w	r3, r5, r1
 80057c4:	f05f 0a00 	movs.w	sl, #0
 80057c8:	f8df b498 	ldr.w	fp, [pc, #1176]	; 8005c64 <??DataTable3_1>
 80057cc:	455b      	cmp	r3, fp
 80057ce:	d131      	bne.n	8005834 <??ZbZclParseFloat_19>
 80057d0:	4552      	cmp	r2, sl
 80057d2:	d12f      	bne.n	8005834 <??ZbZclParseFloat_19>
 80057d4:	f05f 30ff 	movs.w	r0, #4294967295
 80057d8:	f8df 148c 	ldr.w	r1, [pc, #1164]	; 8005c68 <??DataTable3_2>
 80057dc:	4020      	ands	r0, r4
 80057de:	4029      	ands	r1, r5
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d101      	bne.n	80057e8 <??ZbZclParseFloat_20>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d008      	beq.n	80057fa <??ZbZclParseFloat_21>

080057e8 <??ZbZclParseFloat_20>:
 80057e8:	2000      	movs	r0, #0
 80057ea:	2100      	movs	r1, #0
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	f000 fde0 	bl	80063b4 <__aeabi_ddiv>
 80057f4:	ec41 0b10 	vmov	d0, r0, r1
 80057f8:	e06b      	b.n	80058d2 <??ZbZclParseFloat_6>

080057fa <??ZbZclParseFloat_21>:
 80057fa:	f014 0000 	ands.w	r0, r4, #0
 80057fe:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 8005802:	2900      	cmp	r1, #0
 8005804:	d101      	bne.n	800580a <??ZbZclParseFloat_22>
 8005806:	2800      	cmp	r0, #0
 8005808:	d00a      	beq.n	8005820 <??ZbZclParseFloat_23>

0800580a <??ZbZclParseFloat_22>:
 800580a:	2000      	movs	r0, #0
 800580c:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 8005c6c <??DataTable3_3>
 8005810:	2200      	movs	r2, #0
 8005812:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8005816:	f000 fdcd 	bl	80063b4 <__aeabi_ddiv>
 800581a:	ec41 0b10 	vmov	d0, r0, r1
 800581e:	e008      	b.n	8005832 <??ZbZclParseFloat_24>

08005820 <??ZbZclParseFloat_23>:
 8005820:	2000      	movs	r0, #0
 8005822:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8005c6c <??DataTable3_3>
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	f000 fdc3 	bl	80063b4 <__aeabi_ddiv>
 800582e:	ec41 0b10 	vmov	d0, r0, r1

08005832 <??ZbZclParseFloat_24>:
 8005832:	e04e      	b.n	80058d2 <??ZbZclParseFloat_6>

08005834 <??ZbZclParseFloat_19>:
 8005834:	0022      	movs	r2, r4
 8005836:	002b      	movs	r3, r5
 8005838:	0d1a      	lsrs	r2, r3, #20
 800583a:	2300      	movs	r3, #0
 800583c:	4690      	mov	r8, r2
 800583e:	ea5f 5848 	movs.w	r8, r8, lsl #21
 8005842:	ea5f 5858 	movs.w	r8, r8, lsr #21
 8005846:	4647      	mov	r7, r8
 8005848:	b2bf      	uxth	r7, r7
 800584a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800584e:	3f34      	subs	r7, #52	; 0x34
 8005850:	4020      	ands	r0, r4
 8005852:	4029      	ands	r1, r5
 8005854:	2900      	cmp	r1, #0
 8005856:	d101      	bne.n	800585c <??ZbZclParseFloat_25>
 8005858:	2800      	cmp	r0, #0
 800585a:	d00a      	beq.n	8005872 <??ZbZclParseFloat_26>

0800585c <??ZbZclParseFloat_25>:
 800585c:	f05f 30ff 	movs.w	r0, #4294967295
 8005860:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 8005c68 <??DataTable3_2>
 8005864:	4020      	ands	r0, r4
 8005866:	4029      	ands	r1, r5
 8005868:	f110 0a00 	adds.w	sl, r0, #0
 800586c:	f551 1b80 	adcs.w	fp, r1, #1048576	; 0x100000
 8005870:	e008      	b.n	8005884 <??ZbZclParseFloat_27>

08005872 <??ZbZclParseFloat_26>:
 8005872:	1c7f      	adds	r7, r7, #1
 8005874:	f05f 30ff 	movs.w	r0, #4294967295
 8005878:	f8df 13ec 	ldr.w	r1, [pc, #1004]	; 8005c68 <??DataTable3_2>
 800587c:	ea14 0a00 	ands.w	sl, r4, r0
 8005880:	ea15 0b01 	ands.w	fp, r5, r1

08005884 <??ZbZclParseFloat_27>:
 8005884:	4650      	mov	r0, sl
 8005886:	4659      	mov	r1, fp
 8005888:	f000 fc34 	bl	80060f4 <__aeabi_ul2d>
 800588c:	ec41 0b18 	vmov	d8, r0, r1
 8005890:	f014 0000 	ands.w	r0, r4, #0
 8005894:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 8005898:	2900      	cmp	r1, #0
 800589a:	d101      	bne.n	80058a0 <??ZbZclParseFloat_28>
 800589c:	2800      	cmp	r0, #0
 800589e:	d005      	beq.n	80058ac <??ZbZclParseFloat_29>

080058a0 <??ZbZclParseFloat_28>:
 80058a0:	ec51 0b18 	vmov	r0, r1, d8
 80058a4:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80058a8:	ec41 0b18 	vmov	d8, r0, r1

080058ac <??ZbZclParseFloat_29>:
 80058ac:	0038      	movs	r0, r7
 80058ae:	eeb0 0a48 	vmov.f32	s0, s16
 80058b2:	eef0 0a68 	vmov.f32	s1, s17
 80058b6:	f000 f810 	bl	80058da <ZbZclFloatLdexp>
 80058ba:	e00a      	b.n	80058d2 <??ZbZclParseFloat_6>

080058bc <??ZbZclParseFloat_1>:
 80058bc:	208d      	movs	r0, #141	; 0x8d
 80058be:	f889 0000 	strb.w	r0, [r9]
 80058c2:	2000      	movs	r0, #0
 80058c4:	2100      	movs	r1, #0
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	f000 fd73 	bl	80063b4 <__aeabi_ddiv>
 80058ce:	ec41 0b10 	vmov	d0, r0, r1

080058d2 <??ZbZclParseFloat_6>:
 80058d2:	ecbd 8b02 	vpop	{d8}
 80058d6:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058da <ZbZclFloatLdexp>:
 80058da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058de:	ed2d 8b04 	vpush	{d8-d9}
 80058e2:	b084      	sub	sp, #16
 80058e4:	eeb0 8a40 	vmov.f32	s16, s0
 80058e8:	eef0 8a60 	vmov.f32	s17, s1
 80058ec:	0006      	movs	r6, r0
 80058ee:	2730      	movs	r7, #48	; 0x30
 80058f0:	ec53 2b18 	vmov	r2, r3, d8
 80058f4:	ec51 0b18 	vmov	r0, r1, d8
 80058f8:	f000 fe92 	bl	8006620 <__aeabi_cdcmpeq>
 80058fc:	d10c      	bne.n	8005918 <??ZbZclFloatLdexp_0>
 80058fe:	ec53 2b18 	vmov	r2, r3, d8
 8005902:	ec51 0b18 	vmov	r0, r1, d8
 8005906:	f000 fa75 	bl	8005df4 <__adddf3>
 800590a:	0002      	movs	r2, r0
 800590c:	000b      	movs	r3, r1
 800590e:	ec51 0b18 	vmov	r0, r1, d8
 8005912:	f000 fe85 	bl	8006620 <__aeabi_cdcmpeq>
 8005916:	d104      	bne.n	8005922 <??ZbZclFloatLdexp_1>

08005918 <??ZbZclFloatLdexp_0>:
 8005918:	eeb0 0a48 	vmov.f32	s0, s16
 800591c:	eef0 0a68 	vmov.f32	s1, s17
 8005920:	e06b      	b.n	80059fa <??ZbZclFloatLdexp_2>

08005922 <??ZbZclFloatLdexp_1>:
 8005922:	2e01      	cmp	r6, #1
 8005924:	db2c      	blt.n	8005980 <??ZbZclFloatLdexp_3>
 8005926:	2401      	movs	r4, #1
 8005928:	2500      	movs	r5, #0
 800592a:	0020      	movs	r0, r4
 800592c:	0029      	movs	r1, r5
 800592e:	003a      	movs	r2, r7
 8005930:	f000 fa4e 	bl	8005dd0 <__aeabi_llsl>
 8005934:	4680      	mov	r8, r0
 8005936:	4689      	mov	r9, r1
 8005938:	4640      	mov	r0, r8
 800593a:	4649      	mov	r1, r9
 800593c:	f000 fbda 	bl	80060f4 <__aeabi_ul2d>
 8005940:	ec41 0b19 	vmov	d9, r0, r1

08005944 <??ZbZclFloatLdexp_4>:
 8005944:	42be      	cmp	r6, r7
 8005946:	db09      	blt.n	800595c <??ZbZclFloatLdexp_5>
 8005948:	ec51 0b18 	vmov	r0, r1, d8
 800594c:	ec53 2b19 	vmov	r2, r3, d9
 8005950:	f000 fc06 	bl	8006160 <__aeabi_dmul>
 8005954:	ec41 0b18 	vmov	d8, r0, r1
 8005958:	1bf6      	subs	r6, r6, r7
 800595a:	e7f3      	b.n	8005944 <??ZbZclFloatLdexp_4>

0800595c <??ZbZclFloatLdexp_5>:
 800595c:	0020      	movs	r0, r4
 800595e:	0029      	movs	r1, r5
 8005960:	0032      	movs	r2, r6
 8005962:	f000 fa35 	bl	8005dd0 <__aeabi_llsl>
 8005966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800596a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596e:	f000 fbc1 	bl	80060f4 <__aeabi_ul2d>
 8005972:	ec53 2b18 	vmov	r2, r3, d8
 8005976:	f000 fbf3 	bl	8006160 <__aeabi_dmul>
 800597a:	ec41 0b18 	vmov	d8, r0, r1
 800597e:	e038      	b.n	80059f2 <??ZbZclFloatLdexp_6>

08005980 <??ZbZclFloatLdexp_3>:
 8005980:	2e00      	cmp	r6, #0
 8005982:	d536      	bpl.n	80059f2 <??ZbZclFloatLdexp_6>
 8005984:	2401      	movs	r4, #1
 8005986:	2500      	movs	r5, #0
 8005988:	0020      	movs	r0, r4
 800598a:	0029      	movs	r1, r5
 800598c:	003a      	movs	r2, r7
 800598e:	f000 fa1f 	bl	8005dd0 <__aeabi_llsl>
 8005992:	4682      	mov	sl, r0
 8005994:	468b      	mov	fp, r1
 8005996:	4650      	mov	r0, sl
 8005998:	4659      	mov	r1, fp
 800599a:	f000 fbab 	bl	80060f4 <__aeabi_ul2d>
 800599e:	0002      	movs	r2, r0
 80059a0:	000b      	movs	r3, r1
 80059a2:	2000      	movs	r0, #0
 80059a4:	49b1      	ldr	r1, [pc, #708]	; (8005c6c <??DataTable3_3>)
 80059a6:	f000 fd05 	bl	80063b4 <__aeabi_ddiv>
 80059aa:	ec41 0b19 	vmov	d9, r0, r1
 80059ae:	f1d6 0800 	rsbs	r8, r6, #0

080059b2 <??ZbZclFloatLdexp_7>:
 80059b2:	45b8      	cmp	r8, r7
 80059b4:	db0a      	blt.n	80059cc <??ZbZclFloatLdexp_8>
 80059b6:	ec53 2b18 	vmov	r2, r3, d8
 80059ba:	ec51 0b19 	vmov	r0, r1, d9
 80059be:	f000 fbcf 	bl	8006160 <__aeabi_dmul>
 80059c2:	ec41 0b18 	vmov	d8, r0, r1
 80059c6:	ebb8 0807 	subs.w	r8, r8, r7
 80059ca:	e7f2      	b.n	80059b2 <??ZbZclFloatLdexp_7>

080059cc <??ZbZclFloatLdexp_8>:
 80059cc:	0020      	movs	r0, r4
 80059ce:	0029      	movs	r1, r5
 80059d0:	4642      	mov	r2, r8
 80059d2:	f000 f9fd 	bl	8005dd0 <__aeabi_llsl>
 80059d6:	e9cd 0100 	strd	r0, r1, [sp]
 80059da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059de:	f000 fb89 	bl	80060f4 <__aeabi_ul2d>
 80059e2:	0002      	movs	r2, r0
 80059e4:	000b      	movs	r3, r1
 80059e6:	ec51 0b18 	vmov	r0, r1, d8
 80059ea:	f000 fce3 	bl	80063b4 <__aeabi_ddiv>
 80059ee:	ec41 0b18 	vmov	d8, r0, r1

080059f2 <??ZbZclFloatLdexp_6>:
 80059f2:	eeb0 0a48 	vmov.f32	s0, s16
 80059f6:	eef0 0a68 	vmov.f32	s1, s17

080059fa <??ZbZclFloatLdexp_2>:
 80059fa:	b004      	add	sp, #16
 80059fc:	ecbd 8b04 	vpop	{d8-d9}
 8005a00:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a04 <ZbZclFloatFrexp>:
 8005a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	ed2d 8b06 	vpush	{d8-d10}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8005a12:	eef0 8a60 	vmov.f32	s17, s1
 8005a16:	4682      	mov	sl, r0
 8005a18:	000e      	movs	r6, r1
 8005a1a:	4693      	mov	fp, r2
 8005a1c:	2730      	movs	r7, #48	; 0x30
 8005a1e:	f05f 0800 	movs.w	r8, #0
 8005a22:	f05f 0901 	movs.w	r9, #1
 8005a26:	eeb0 9a48 	vmov.f32	s18, s16
 8005a2a:	eef0 9a68 	vmov.f32	s19, s17
 8005a2e:	ec51 0b18 	vmov	r0, r1, d8
 8005a32:	2200      	movs	r2, #0
 8005a34:	2300      	movs	r3, #0
 8005a36:	f000 fdf3 	bl	8006620 <__aeabi_cdcmpeq>
 8005a3a:	d208      	bcs.n	8005a4e <??ZbZclFloatFrexp_0>
 8005a3c:	f05f 30ff 	movs.w	r0, #4294967295
 8005a40:	4681      	mov	r9, r0
 8005a42:	ec51 0b19 	vmov	r0, r1, d9
 8005a46:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005a4a:	ec41 0b19 	vmov	d9, r0, r1

08005a4e <??ZbZclFloatFrexp_0>:
 8005a4e:	ec53 2b19 	vmov	r2, r3, d9
 8005a52:	ec51 0b19 	vmov	r0, r1, d9
 8005a56:	f000 fde3 	bl	8006620 <__aeabi_cdcmpeq>
 8005a5a:	d00b      	beq.n	8005a74 <??ZbZclFloatFrexp_1>
 8005a5c:	f8ca 6000 	str.w	r6, [sl]
 8005a60:	4648      	mov	r0, r9
 8005a62:	f000 fb13 	bl	800608c <__aeabi_i2d>
 8005a66:	2200      	movs	r2, #0
 8005a68:	4b81      	ldr	r3, [pc, #516]	; (8005c70 <??DataTable3_4>)
 8005a6a:	f000 fb79 	bl	8006160 <__aeabi_dmul>
 8005a6e:	ec41 0b10 	vmov	d0, r0, r1
 8005a72:	e0ef      	b.n	8005c54 <??ZbZclFloatFrexp_2>

08005a74 <??ZbZclFloatFrexp_1>:
 8005a74:	2000      	movs	r0, #0
 8005a76:	497d      	ldr	r1, [pc, #500]	; (8005c6c <??DataTable3_3>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f000 fc9a 	bl	80063b4 <__aeabi_ddiv>
 8005a80:	ec53 2b19 	vmov	r2, r3, d9
 8005a84:	f000 fdcc 	bl	8006620 <__aeabi_cdcmpeq>
 8005a88:	d00b      	beq.n	8005aa2 <??ZbZclFloatFrexp_3>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	4977      	ldr	r1, [pc, #476]	; (8005c6c <??DataTable3_3>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8005a94:	f000 fc8e 	bl	80063b4 <__aeabi_ddiv>
 8005a98:	ec53 2b19 	vmov	r2, r3, d9
 8005a9c:	f000 fdc0 	bl	8006620 <__aeabi_cdcmpeq>
 8005aa0:	d107      	bne.n	8005ab2 <??ZbZclFloatFrexp_4>

08005aa2 <??ZbZclFloatFrexp_3>:
 8005aa2:	f8ca 6000 	str.w	r6, [sl]
 8005aa6:	4648      	mov	r0, r9
 8005aa8:	f000 faf0 	bl	800608c <__aeabi_i2d>
 8005aac:	ec41 0b10 	vmov	d0, r0, r1
 8005ab0:	e0d0      	b.n	8005c54 <??ZbZclFloatFrexp_2>

08005ab2 <??ZbZclFloatFrexp_4>:
 8005ab2:	ec53 2b19 	vmov	r2, r3, d9
 8005ab6:	ec51 0b19 	vmov	r0, r1, d9
 8005aba:	f000 f99b 	bl	8005df4 <__adddf3>
 8005abe:	ec53 2b19 	vmov	r2, r3, d9
 8005ac2:	f000 fdad 	bl	8006620 <__aeabi_cdcmpeq>
 8005ac6:	d10b      	bne.n	8005ae0 <??ZbZclFloatFrexp_5>
 8005ac8:	f8ca b000 	str.w	fp, [sl]
 8005acc:	4648      	mov	r0, r9
 8005ace:	f000 fadd 	bl	800608c <__aeabi_i2d>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f000 fb43 	bl	8006160 <__aeabi_dmul>
 8005ada:	ec41 0b10 	vmov	d0, r0, r1
 8005ade:	e0b9      	b.n	8005c54 <??ZbZclFloatFrexp_2>

08005ae0 <??ZbZclFloatFrexp_5>:
 8005ae0:	ec51 0b19 	vmov	r0, r1, d9
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8005aea:	f000 fd91 	bl	8006610 <__aeabi_cdrcmple>
 8005aee:	d854      	bhi.n	8005b9a <??ZbZclFloatFrexp_6>
 8005af0:	2001      	movs	r0, #1
 8005af2:	2100      	movs	r1, #0
 8005af4:	003a      	movs	r2, r7
 8005af6:	f000 f96b 	bl	8005dd0 <__aeabi_llsl>
 8005afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b02:	f000 faf7 	bl	80060f4 <__aeabi_ul2d>
 8005b06:	0002      	movs	r2, r0
 8005b08:	000b      	movs	r3, r1
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	4957      	ldr	r1, [pc, #348]	; (8005c6c <??DataTable3_3>)
 8005b0e:	f000 fc51 	bl	80063b4 <__aeabi_ddiv>
 8005b12:	ec41 0b1a 	vmov	d10, r0, r1
 8005b16:	2002      	movs	r0, #2
 8005b18:	2100      	movs	r1, #0
 8005b1a:	003a      	movs	r2, r7
 8005b1c:	f000 f958 	bl	8005dd0 <__aeabi_llsl>
 8005b20:	e9cd 0100 	strd	r0, r1, [sp]

08005b24 <??ZbZclFloatFrexp_7>:
 8005b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b28:	f000 fae4 	bl	80060f4 <__aeabi_ul2d>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	000b      	movs	r3, r1
 8005b30:	ec51 0b19 	vmov	r0, r1, d9
 8005b34:	f000 fd6c 	bl	8006610 <__aeabi_cdrcmple>
 8005b38:	d813      	bhi.n	8005b62 <??ZbZclFloatFrexp_8>
 8005b3a:	ec53 2b19 	vmov	r2, r3, d9
 8005b3e:	ec51 0b1a 	vmov	r0, r1, d10
 8005b42:	f000 fb0d 	bl	8006160 <__aeabi_dmul>
 8005b46:	ec41 0b19 	vmov	d9, r0, r1
 8005b4a:	eb17 0808 	adds.w	r8, r7, r8
 8005b4e:	45b0      	cmp	r8, r6
 8005b50:	dbe8      	blt.n	8005b24 <??ZbZclFloatFrexp_7>
 8005b52:	f8ca 6000 	str.w	r6, [sl]
 8005b56:	4648      	mov	r0, r9
 8005b58:	f000 fa98 	bl	800608c <__aeabi_i2d>
 8005b5c:	ec41 0b10 	vmov	d0, r0, r1
 8005b60:	e078      	b.n	8005c54 <??ZbZclFloatFrexp_2>

08005b62 <??ZbZclFloatFrexp_8>:
 8005b62:	ec51 0b19 	vmov	r0, r1, d9
 8005b66:	2200      	movs	r2, #0
 8005b68:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8005b6c:	f000 fd50 	bl	8006610 <__aeabi_cdrcmple>
 8005b70:	d865      	bhi.n	8005c3e <??ZbZclFloatFrexp_9>
 8005b72:	ec53 2b19 	vmov	r2, r3, d9
 8005b76:	2000      	movs	r0, #0
 8005b78:	493e      	ldr	r1, [pc, #248]	; (8005c74 <??DataTable3_5>)
 8005b7a:	f000 faf1 	bl	8006160 <__aeabi_dmul>
 8005b7e:	ec41 0b19 	vmov	d9, r0, r1
 8005b82:	f118 0801 	adds.w	r8, r8, #1
 8005b86:	45b0      	cmp	r8, r6
 8005b88:	dbeb      	blt.n	8005b62 <??ZbZclFloatFrexp_8>
 8005b8a:	f8ca 6000 	str.w	r6, [sl]
 8005b8e:	4648      	mov	r0, r9
 8005b90:	f000 fa7c 	bl	800608c <__aeabi_i2d>
 8005b94:	ec41 0b10 	vmov	d0, r0, r1
 8005b98:	e05c      	b.n	8005c54 <??ZbZclFloatFrexp_2>

08005b9a <??ZbZclFloatFrexp_6>:
 8005b9a:	ec51 0b19 	vmov	r0, r1, d9
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4b32      	ldr	r3, [pc, #200]	; (8005c6c <??DataTable3_3>)
 8005ba2:	f000 fd3d 	bl	8006620 <__aeabi_cdcmpeq>
 8005ba6:	d24a      	bcs.n	8005c3e <??ZbZclFloatFrexp_9>
 8005ba8:	2401      	movs	r4, #1
 8005baa:	2500      	movs	r5, #0
 8005bac:	0020      	movs	r0, r4
 8005bae:	0029      	movs	r1, r5
 8005bb0:	003a      	movs	r2, r7
 8005bb2:	f000 f90d 	bl	8005dd0 <__aeabi_llsl>
 8005bb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bbe:	f000 fa99 	bl	80060f4 <__aeabi_ul2d>
 8005bc2:	ec41 0b1a 	vmov	d10, r0, r1
 8005bc6:	0020      	movs	r0, r4
 8005bc8:	0029      	movs	r1, r5
 8005bca:	003a      	movs	r2, r7
 8005bcc:	f000 f900 	bl	8005dd0 <__aeabi_llsl>
 8005bd0:	e9cd 0100 	strd	r0, r1, [sp]

08005bd4 <??ZbZclFloatFrexp_10>:
 8005bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bd8:	f000 fa8c 	bl	80060f4 <__aeabi_ul2d>
 8005bdc:	0002      	movs	r2, r0
 8005bde:	000b      	movs	r3, r1
 8005be0:	2000      	movs	r0, #0
 8005be2:	4922      	ldr	r1, [pc, #136]	; (8005c6c <??DataTable3_3>)
 8005be4:	f000 fbe6 	bl	80063b4 <__aeabi_ddiv>
 8005be8:	0002      	movs	r2, r0
 8005bea:	000b      	movs	r3, r1
 8005bec:	ec51 0b18 	vmov	r0, r1, d8
 8005bf0:	f000 fd16 	bl	8006620 <__aeabi_cdcmpeq>
 8005bf4:	d20e      	bcs.n	8005c14 <??ZbZclFloatFrexp_11>
 8005bf6:	ebb8 0007 	subs.w	r0, r8, r7
 8005bfa:	4583      	cmp	fp, r0
 8005bfc:	da0a      	bge.n	8005c14 <??ZbZclFloatFrexp_11>

08005bfe <??ZbZclFloatFrexp_12>:
 8005bfe:	ec53 2b19 	vmov	r2, r3, d9
 8005c02:	ec51 0b1a 	vmov	r0, r1, d10
 8005c06:	f000 faab 	bl	8006160 <__aeabi_dmul>
 8005c0a:	ec41 0b19 	vmov	d9, r0, r1
 8005c0e:	ebb8 0807 	subs.w	r8, r8, r7
 8005c12:	e7df      	b.n	8005bd4 <??ZbZclFloatFrexp_10>

08005c14 <??ZbZclFloatFrexp_11>:
 8005c14:	ec51 0b19 	vmov	r0, r1, d9
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <??DataTable3_3>)
 8005c1c:	f000 fd00 	bl	8006620 <__aeabi_cdcmpeq>
 8005c20:	d20d      	bcs.n	8005c3e <??ZbZclFloatFrexp_9>
 8005c22:	f1b8 0801 	subs.w	r8, r8, #1
 8005c26:	45d8      	cmp	r8, fp
 8005c28:	d009      	beq.n	8005c3e <??ZbZclFloatFrexp_9>

08005c2a <??ZbZclFloatFrexp_13>:
 8005c2a:	ec53 2b19 	vmov	r2, r3, d9
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f05f 4180 	movs.w	r1, #1073741824	; 0x40000000
 8005c34:	f000 fa94 	bl	8006160 <__aeabi_dmul>
 8005c38:	ec41 0b19 	vmov	d9, r0, r1
 8005c3c:	e7ea      	b.n	8005c14 <??ZbZclFloatFrexp_11>

08005c3e <??ZbZclFloatFrexp_9>:
 8005c3e:	f8ca 8000 	str.w	r8, [sl]
 8005c42:	4648      	mov	r0, r9
 8005c44:	f000 fa22 	bl	800608c <__aeabi_i2d>
 8005c48:	ec53 2b19 	vmov	r2, r3, d9
 8005c4c:	f000 fa88 	bl	8006160 <__aeabi_dmul>
 8005c50:	ec41 0b10 	vmov	d0, r0, r1

08005c54 <??ZbZclFloatFrexp_2>:
 8005c54:	b006      	add	sp, #24
 8005c56:	ecbd 8b06 	vpop	{d8-d10}
 8005c5a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005c60 <??DataTable3>:
 8005c60:	fc01 ffff                                   ....

08005c64 <??DataTable3_1>:
 8005c64:	0000 7ff0                                   ....

08005c68 <??DataTable3_2>:
 8005c68:	ffff 000f                                   ....

08005c6c <??DataTable3_3>:
 8005c6c:	0000 3ff0                                   ...?

08005c70 <??DataTable3_4>:
 8005c70:	0000 3ff8                                   ...?

08005c74 <??DataTable3_5>:
 8005c74:	0000 3fe0                                   ...?

08005c78 <ZbZclAttrIsFloat>:
 8005c78:	0001      	movs	r1, r0
 8005c7a:	0008      	movs	r0, r1
 8005c7c:	b2c0      	uxtb	r0, r0
 8005c7e:	2838      	cmp	r0, #56	; 0x38
 8005c80:	db05      	blt.n	8005c8e <??ZbZclAttrIsFloat_0>
 8005c82:	0008      	movs	r0, r1
 8005c84:	b2c0      	uxtb	r0, r0
 8005c86:	283b      	cmp	r0, #59	; 0x3b
 8005c88:	da01      	bge.n	8005c8e <??ZbZclAttrIsFloat_0>
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	e000      	b.n	8005c90 <??ZbZclAttrIsFloat_1>

08005c8e <??ZbZclAttrIsFloat_0>:
 8005c8e:	2000      	movs	r0, #0

08005c90 <??ZbZclAttrIsFloat_1>:
 8005c90:	4770      	bx	lr

08005c92 <__aeabi_memset>:
 8005c92:	b470      	push	{r4, r5, r6}
 8005c94:	0784      	lsls	r4, r0, #30
 8005c96:	d046      	beq.n	8005d26 <__aeabi_memset+0x94>
 8005c98:	1e4c      	subs	r4, r1, #1
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d041      	beq.n	8005d22 <__aeabi_memset+0x90>
 8005c9e:	b2d5      	uxtb	r5, r2
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	e002      	b.n	8005caa <__aeabi_memset+0x18>
 8005ca4:	1e61      	subs	r1, r4, #1
 8005ca6:	b3e4      	cbz	r4, 8005d22 <__aeabi_memset+0x90>
 8005ca8:	460c      	mov	r4, r1
 8005caa:	f803 5b01 	strb.w	r5, [r3], #1
 8005cae:	0799      	lsls	r1, r3, #30
 8005cb0:	d1f8      	bne.n	8005ca4 <__aeabi_memset+0x12>
 8005cb2:	2c03      	cmp	r4, #3
 8005cb4:	d92e      	bls.n	8005d14 <__aeabi_memset+0x82>
 8005cb6:	b2d5      	uxtb	r5, r2
 8005cb8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005cbc:	2c0f      	cmp	r4, #15
 8005cbe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005cc2:	d919      	bls.n	8005cf8 <__aeabi_memset+0x66>
 8005cc4:	4626      	mov	r6, r4
 8005cc6:	f103 0110 	add.w	r1, r3, #16
 8005cca:	3e10      	subs	r6, #16
 8005ccc:	2e0f      	cmp	r6, #15
 8005cce:	f841 5c10 	str.w	r5, [r1, #-16]
 8005cd2:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005cd6:	f841 5c08 	str.w	r5, [r1, #-8]
 8005cda:	f841 5c04 	str.w	r5, [r1, #-4]
 8005cde:	f101 0110 	add.w	r1, r1, #16
 8005ce2:	d8f2      	bhi.n	8005cca <__aeabi_memset+0x38>
 8005ce4:	f1a4 0110 	sub.w	r1, r4, #16
 8005ce8:	f021 010f 	bic.w	r1, r1, #15
 8005cec:	f004 040f 	and.w	r4, r4, #15
 8005cf0:	3110      	adds	r1, #16
 8005cf2:	2c03      	cmp	r4, #3
 8005cf4:	440b      	add	r3, r1
 8005cf6:	d90d      	bls.n	8005d14 <__aeabi_memset+0x82>
 8005cf8:	461e      	mov	r6, r3
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	3904      	subs	r1, #4
 8005cfe:	2903      	cmp	r1, #3
 8005d00:	f846 5b04 	str.w	r5, [r6], #4
 8005d04:	d8fa      	bhi.n	8005cfc <__aeabi_memset+0x6a>
 8005d06:	1f21      	subs	r1, r4, #4
 8005d08:	f021 0103 	bic.w	r1, r1, #3
 8005d0c:	3104      	adds	r1, #4
 8005d0e:	440b      	add	r3, r1
 8005d10:	f004 0403 	and.w	r4, r4, #3
 8005d14:	b12c      	cbz	r4, 8005d22 <__aeabi_memset+0x90>
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	441c      	add	r4, r3
 8005d1a:	f803 2b01 	strb.w	r2, [r3], #1
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	d1fb      	bne.n	8005d1a <__aeabi_memset+0x88>
 8005d22:	bc70      	pop	{r4, r5, r6}
 8005d24:	4770      	bx	lr
 8005d26:	460c      	mov	r4, r1
 8005d28:	4603      	mov	r3, r0
 8005d2a:	e7c2      	b.n	8005cb2 <__aeabi_memset+0x20>
 8005d2c:	0000      	movs	r0, r0
	...

08005d30 <memchr>:
 8005d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005d34:	2a10      	cmp	r2, #16
 8005d36:	db2b      	blt.n	8005d90 <memchr+0x60>
 8005d38:	f010 0f07 	tst.w	r0, #7
 8005d3c:	d008      	beq.n	8005d50 <memchr+0x20>
 8005d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d42:	3a01      	subs	r2, #1
 8005d44:	428b      	cmp	r3, r1
 8005d46:	d02d      	beq.n	8005da4 <memchr+0x74>
 8005d48:	f010 0f07 	tst.w	r0, #7
 8005d4c:	b342      	cbz	r2, 8005da0 <memchr+0x70>
 8005d4e:	d1f6      	bne.n	8005d3e <memchr+0xe>
 8005d50:	b4f0      	push	{r4, r5, r6, r7}
 8005d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005d5a:	f022 0407 	bic.w	r4, r2, #7
 8005d5e:	f07f 0700 	mvns.w	r7, #0
 8005d62:	2300      	movs	r3, #0
 8005d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005d68:	3c08      	subs	r4, #8
 8005d6a:	ea85 0501 	eor.w	r5, r5, r1
 8005d6e:	ea86 0601 	eor.w	r6, r6, r1
 8005d72:	fa85 f547 	uadd8	r5, r5, r7
 8005d76:	faa3 f587 	sel	r5, r3, r7
 8005d7a:	fa86 f647 	uadd8	r6, r6, r7
 8005d7e:	faa5 f687 	sel	r6, r5, r7
 8005d82:	b98e      	cbnz	r6, 8005da8 <memchr+0x78>
 8005d84:	d1ee      	bne.n	8005d64 <memchr+0x34>
 8005d86:	bcf0      	pop	{r4, r5, r6, r7}
 8005d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005d8c:	f002 0207 	and.w	r2, r2, #7
 8005d90:	b132      	cbz	r2, 8005da0 <memchr+0x70>
 8005d92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d96:	3a01      	subs	r2, #1
 8005d98:	ea83 0301 	eor.w	r3, r3, r1
 8005d9c:	b113      	cbz	r3, 8005da4 <memchr+0x74>
 8005d9e:	d1f8      	bne.n	8005d92 <memchr+0x62>
 8005da0:	2000      	movs	r0, #0
 8005da2:	4770      	bx	lr
 8005da4:	3801      	subs	r0, #1
 8005da6:	4770      	bx	lr
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	bf06      	itte	eq
 8005dac:	4635      	moveq	r5, r6
 8005dae:	3803      	subeq	r0, #3
 8005db0:	3807      	subne	r0, #7
 8005db2:	f015 0f01 	tst.w	r5, #1
 8005db6:	d107      	bne.n	8005dc8 <memchr+0x98>
 8005db8:	3001      	adds	r0, #1
 8005dba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005dbe:	bf02      	ittt	eq
 8005dc0:	3001      	addeq	r0, #1
 8005dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005dc6:	3001      	addeq	r0, #1
 8005dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8005dca:	3801      	subs	r0, #1
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <__aeabi_llsl>:
 8005dd0:	4091      	lsls	r1, r2
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	4090      	lsls	r0, r2
 8005dd6:	469c      	mov	ip, r3
 8005dd8:	3a20      	subs	r2, #32
 8005dda:	4093      	lsls	r3, r2
 8005ddc:	4319      	orrs	r1, r3
 8005dde:	4252      	negs	r2, r2
 8005de0:	4663      	mov	r3, ip
 8005de2:	40d3      	lsrs	r3, r2
 8005de4:	4319      	orrs	r1, r3
 8005de6:	4770      	bx	lr

08005de8 <__aeabi_drsub>:
 8005de8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005dec:	e002      	b.n	8005df4 <__adddf3>
 8005dee:	bf00      	nop

08005df0 <__aeabi_dsub>:
 8005df0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005df4 <__adddf3>:
 8005df4:	b530      	push	{r4, r5, lr}
 8005df6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005dfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005dfe:	ea94 0f05 	teq	r4, r5
 8005e02:	bf08      	it	eq
 8005e04:	ea90 0f02 	teqeq	r0, r2
 8005e08:	bf1f      	itttt	ne
 8005e0a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005e0e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005e12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005e16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005e1a:	f000 80e2 	beq.w	8005fe2 <__adddf3+0x1ee>
 8005e1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005e22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005e26:	bfb8      	it	lt
 8005e28:	426d      	neglt	r5, r5
 8005e2a:	dd0c      	ble.n	8005e46 <__adddf3+0x52>
 8005e2c:	442c      	add	r4, r5
 8005e2e:	ea80 0202 	eor.w	r2, r0, r2
 8005e32:	ea81 0303 	eor.w	r3, r1, r3
 8005e36:	ea82 0000 	eor.w	r0, r2, r0
 8005e3a:	ea83 0101 	eor.w	r1, r3, r1
 8005e3e:	ea80 0202 	eor.w	r2, r0, r2
 8005e42:	ea81 0303 	eor.w	r3, r1, r3
 8005e46:	2d36      	cmp	r5, #54	; 0x36
 8005e48:	bf88      	it	hi
 8005e4a:	bd30      	pophi	{r4, r5, pc}
 8005e4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005e58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e5c:	d002      	beq.n	8005e64 <__adddf3+0x70>
 8005e5e:	4240      	negs	r0, r0
 8005e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e70:	d002      	beq.n	8005e78 <__adddf3+0x84>
 8005e72:	4252      	negs	r2, r2
 8005e74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e78:	ea94 0f05 	teq	r4, r5
 8005e7c:	f000 80a7 	beq.w	8005fce <__adddf3+0x1da>
 8005e80:	f1a4 0401 	sub.w	r4, r4, #1
 8005e84:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e88:	db0d      	blt.n	8005ea6 <__adddf3+0xb2>
 8005e8a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e8e:	fa22 f205 	lsr.w	r2, r2, r5
 8005e92:	1880      	adds	r0, r0, r2
 8005e94:	f141 0100 	adc.w	r1, r1, #0
 8005e98:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e9c:	1880      	adds	r0, r0, r2
 8005e9e:	fa43 f305 	asr.w	r3, r3, r5
 8005ea2:	4159      	adcs	r1, r3
 8005ea4:	e00e      	b.n	8005ec4 <__adddf3+0xd0>
 8005ea6:	f1a5 0520 	sub.w	r5, r5, #32
 8005eaa:	f10e 0e20 	add.w	lr, lr, #32
 8005eae:	2a01      	cmp	r2, #1
 8005eb0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005eb4:	bf28      	it	cs
 8005eb6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005eba:	fa43 f305 	asr.w	r3, r3, r5
 8005ebe:	18c0      	adds	r0, r0, r3
 8005ec0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005ec4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ec8:	d507      	bpl.n	8005eda <__adddf3+0xe6>
 8005eca:	f04f 0e00 	mov.w	lr, #0
 8005ece:	f1dc 0c00 	rsbs	ip, ip, #0
 8005ed2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005ed6:	eb6e 0101 	sbc.w	r1, lr, r1
 8005eda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005ede:	d31b      	bcc.n	8005f18 <__adddf3+0x124>
 8005ee0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005ee4:	d30c      	bcc.n	8005f00 <__adddf3+0x10c>
 8005ee6:	0849      	lsrs	r1, r1, #1
 8005ee8:	ea5f 0030 	movs.w	r0, r0, rrx
 8005eec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ef0:	f104 0401 	add.w	r4, r4, #1
 8005ef4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ef8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005efc:	f080 809a 	bcs.w	8006034 <__adddf3+0x240>
 8005f00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005f04:	bf08      	it	eq
 8005f06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005f0a:	f150 0000 	adcs.w	r0, r0, #0
 8005f0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005f12:	ea41 0105 	orr.w	r1, r1, r5
 8005f16:	bd30      	pop	{r4, r5, pc}
 8005f18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005f1c:	4140      	adcs	r0, r0
 8005f1e:	eb41 0101 	adc.w	r1, r1, r1
 8005f22:	3c01      	subs	r4, #1
 8005f24:	bf28      	it	cs
 8005f26:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005f2a:	d2e9      	bcs.n	8005f00 <__adddf3+0x10c>
 8005f2c:	f091 0f00 	teq	r1, #0
 8005f30:	bf04      	itt	eq
 8005f32:	4601      	moveq	r1, r0
 8005f34:	2000      	moveq	r0, #0
 8005f36:	fab1 f381 	clz	r3, r1
 8005f3a:	bf08      	it	eq
 8005f3c:	3320      	addeq	r3, #32
 8005f3e:	f1a3 030b 	sub.w	r3, r3, #11
 8005f42:	f1b3 0220 	subs.w	r2, r3, #32
 8005f46:	da0c      	bge.n	8005f62 <__adddf3+0x16e>
 8005f48:	320c      	adds	r2, #12
 8005f4a:	dd08      	ble.n	8005f5e <__adddf3+0x16a>
 8005f4c:	f102 0c14 	add.w	ip, r2, #20
 8005f50:	f1c2 020c 	rsb	r2, r2, #12
 8005f54:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f58:	fa21 f102 	lsr.w	r1, r1, r2
 8005f5c:	e00c      	b.n	8005f78 <__adddf3+0x184>
 8005f5e:	f102 0214 	add.w	r2, r2, #20
 8005f62:	bfd8      	it	le
 8005f64:	f1c2 0c20 	rsble	ip, r2, #32
 8005f68:	fa01 f102 	lsl.w	r1, r1, r2
 8005f6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f70:	bfdc      	itt	le
 8005f72:	ea41 010c 	orrle.w	r1, r1, ip
 8005f76:	4090      	lslle	r0, r2
 8005f78:	1ae4      	subs	r4, r4, r3
 8005f7a:	bfa2      	ittt	ge
 8005f7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f80:	4329      	orrge	r1, r5
 8005f82:	bd30      	popge	{r4, r5, pc}
 8005f84:	ea6f 0404 	mvn.w	r4, r4
 8005f88:	3c1f      	subs	r4, #31
 8005f8a:	da1c      	bge.n	8005fc6 <__adddf3+0x1d2>
 8005f8c:	340c      	adds	r4, #12
 8005f8e:	dc0e      	bgt.n	8005fae <__adddf3+0x1ba>
 8005f90:	f104 0414 	add.w	r4, r4, #20
 8005f94:	f1c4 0220 	rsb	r2, r4, #32
 8005f98:	fa20 f004 	lsr.w	r0, r0, r4
 8005f9c:	fa01 f302 	lsl.w	r3, r1, r2
 8005fa0:	ea40 0003 	orr.w	r0, r0, r3
 8005fa4:	fa21 f304 	lsr.w	r3, r1, r4
 8005fa8:	ea45 0103 	orr.w	r1, r5, r3
 8005fac:	bd30      	pop	{r4, r5, pc}
 8005fae:	f1c4 040c 	rsb	r4, r4, #12
 8005fb2:	f1c4 0220 	rsb	r2, r4, #32
 8005fb6:	fa20 f002 	lsr.w	r0, r0, r2
 8005fba:	fa01 f304 	lsl.w	r3, r1, r4
 8005fbe:	ea40 0003 	orr.w	r0, r0, r3
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	bd30      	pop	{r4, r5, pc}
 8005fc6:	fa21 f004 	lsr.w	r0, r1, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	bd30      	pop	{r4, r5, pc}
 8005fce:	f094 0f00 	teq	r4, #0
 8005fd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005fd6:	bf06      	itte	eq
 8005fd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005fdc:	3401      	addeq	r4, #1
 8005fde:	3d01      	subne	r5, #1
 8005fe0:	e74e      	b.n	8005e80 <__adddf3+0x8c>
 8005fe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005fe6:	bf18      	it	ne
 8005fe8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fec:	d029      	beq.n	8006042 <__adddf3+0x24e>
 8005fee:	ea94 0f05 	teq	r4, r5
 8005ff2:	bf08      	it	eq
 8005ff4:	ea90 0f02 	teqeq	r0, r2
 8005ff8:	d005      	beq.n	8006006 <__adddf3+0x212>
 8005ffa:	ea54 0c00 	orrs.w	ip, r4, r0
 8005ffe:	bf04      	itt	eq
 8006000:	4619      	moveq	r1, r3
 8006002:	4610      	moveq	r0, r2
 8006004:	bd30      	pop	{r4, r5, pc}
 8006006:	ea91 0f03 	teq	r1, r3
 800600a:	bf1e      	ittt	ne
 800600c:	2100      	movne	r1, #0
 800600e:	2000      	movne	r0, #0
 8006010:	bd30      	popne	{r4, r5, pc}
 8006012:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006016:	d105      	bne.n	8006024 <__adddf3+0x230>
 8006018:	0040      	lsls	r0, r0, #1
 800601a:	4149      	adcs	r1, r1
 800601c:	bf28      	it	cs
 800601e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006028:	bf3c      	itt	cc
 800602a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800602e:	bd30      	popcc	{r4, r5, pc}
 8006030:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006034:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006038:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800603c:	f04f 0000 	mov.w	r0, #0
 8006040:	bd30      	pop	{r4, r5, pc}
 8006042:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006046:	bf1a      	itte	ne
 8006048:	4619      	movne	r1, r3
 800604a:	4610      	movne	r0, r2
 800604c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006050:	bf1c      	itt	ne
 8006052:	460b      	movne	r3, r1
 8006054:	4602      	movne	r2, r0
 8006056:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800605a:	bf06      	itte	eq
 800605c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006060:	ea91 0f03 	teqeq	r1, r3
 8006064:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006068:	bd30      	pop	{r4, r5, pc}
 800606a:	bf00      	nop

0800606c <__aeabi_ui2d>:
 800606c:	f090 0f00 	teq	r0, #0
 8006070:	bf04      	itt	eq
 8006072:	2100      	moveq	r1, #0
 8006074:	4770      	bxeq	lr
 8006076:	b530      	push	{r4, r5, lr}
 8006078:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800607c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006080:	f04f 0500 	mov.w	r5, #0
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	e750      	b.n	8005f2c <__adddf3+0x138>
 800608a:	bf00      	nop

0800608c <__aeabi_i2d>:
 800608c:	f090 0f00 	teq	r0, #0
 8006090:	bf04      	itt	eq
 8006092:	2100      	moveq	r1, #0
 8006094:	4770      	bxeq	lr
 8006096:	b530      	push	{r4, r5, lr}
 8006098:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800609c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80060a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80060a4:	bf48      	it	mi
 80060a6:	4240      	negmi	r0, r0
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	e73e      	b.n	8005f2c <__adddf3+0x138>
 80060ae:	bf00      	nop

080060b0 <__aeabi_f2d>:
 80060b0:	0042      	lsls	r2, r0, #1
 80060b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80060b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80060ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80060be:	bf1f      	itttt	ne
 80060c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80060c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80060c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80060cc:	4770      	bxne	lr
 80060ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80060d2:	bf08      	it	eq
 80060d4:	4770      	bxeq	lr
 80060d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80060da:	bf04      	itt	eq
 80060dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80060e0:	4770      	bxeq	lr
 80060e2:	b530      	push	{r4, r5, lr}
 80060e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80060e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80060ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80060f0:	e71c      	b.n	8005f2c <__adddf3+0x138>
 80060f2:	bf00      	nop

080060f4 <__aeabi_ul2d>:
 80060f4:	ea50 0201 	orrs.w	r2, r0, r1
 80060f8:	bf08      	it	eq
 80060fa:	4770      	bxeq	lr
 80060fc:	b530      	push	{r4, r5, lr}
 80060fe:	f04f 0500 	mov.w	r5, #0
 8006102:	e00a      	b.n	800611a <__aeabi_l2d+0x16>

08006104 <__aeabi_l2d>:
 8006104:	ea50 0201 	orrs.w	r2, r0, r1
 8006108:	bf08      	it	eq
 800610a:	4770      	bxeq	lr
 800610c:	b530      	push	{r4, r5, lr}
 800610e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006112:	d502      	bpl.n	800611a <__aeabi_l2d+0x16>
 8006114:	4240      	negs	r0, r0
 8006116:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800611a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800611e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006122:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006126:	f43f aed8 	beq.w	8005eda <__adddf3+0xe6>
 800612a:	f04f 0203 	mov.w	r2, #3
 800612e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006132:	bf18      	it	ne
 8006134:	3203      	addne	r2, #3
 8006136:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800613a:	bf18      	it	ne
 800613c:	3203      	addne	r2, #3
 800613e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006142:	f1c2 0320 	rsb	r3, r2, #32
 8006146:	fa00 fc03 	lsl.w	ip, r0, r3
 800614a:	fa20 f002 	lsr.w	r0, r0, r2
 800614e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006152:	ea40 000e 	orr.w	r0, r0, lr
 8006156:	fa21 f102 	lsr.w	r1, r1, r2
 800615a:	4414      	add	r4, r2
 800615c:	e6bd      	b.n	8005eda <__adddf3+0xe6>
 800615e:	bf00      	nop

08006160 <__aeabi_dmul>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800616a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800616e:	bf1d      	ittte	ne
 8006170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006174:	ea94 0f0c 	teqne	r4, ip
 8006178:	ea95 0f0c 	teqne	r5, ip
 800617c:	f000 f8de 	bleq	800633c <__aeabi_dmul+0x1dc>
 8006180:	442c      	add	r4, r5
 8006182:	ea81 0603 	eor.w	r6, r1, r3
 8006186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800618a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800618e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006192:	bf18      	it	ne
 8006194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800619c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a0:	d038      	beq.n	8006214 <__aeabi_dmul+0xb4>
 80061a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80061a6:	f04f 0500 	mov.w	r5, #0
 80061aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80061ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80061b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80061b6:	f04f 0600 	mov.w	r6, #0
 80061ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80061be:	f09c 0f00 	teq	ip, #0
 80061c2:	bf18      	it	ne
 80061c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80061c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80061cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80061d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80061d4:	d204      	bcs.n	80061e0 <__aeabi_dmul+0x80>
 80061d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80061da:	416d      	adcs	r5, r5
 80061dc:	eb46 0606 	adc.w	r6, r6, r6
 80061e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80061e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80061e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80061ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80061f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80061f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80061f8:	bf88      	it	hi
 80061fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80061fe:	d81e      	bhi.n	800623e <__aeabi_dmul+0xde>
 8006200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006204:	bf08      	it	eq
 8006206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800620a:	f150 0000 	adcs.w	r0, r0, #0
 800620e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006218:	ea46 0101 	orr.w	r1, r6, r1
 800621c:	ea40 0002 	orr.w	r0, r0, r2
 8006220:	ea81 0103 	eor.w	r1, r1, r3
 8006224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006228:	bfc2      	ittt	gt
 800622a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800622e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006232:	bd70      	popgt	{r4, r5, r6, pc}
 8006234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006238:	f04f 0e00 	mov.w	lr, #0
 800623c:	3c01      	subs	r4, #1
 800623e:	f300 80ab 	bgt.w	8006398 <__aeabi_dmul+0x238>
 8006242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006246:	bfde      	ittt	le
 8006248:	2000      	movle	r0, #0
 800624a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800624e:	bd70      	pople	{r4, r5, r6, pc}
 8006250:	f1c4 0400 	rsb	r4, r4, #0
 8006254:	3c20      	subs	r4, #32
 8006256:	da35      	bge.n	80062c4 <__aeabi_dmul+0x164>
 8006258:	340c      	adds	r4, #12
 800625a:	dc1b      	bgt.n	8006294 <__aeabi_dmul+0x134>
 800625c:	f104 0414 	add.w	r4, r4, #20
 8006260:	f1c4 0520 	rsb	r5, r4, #32
 8006264:	fa00 f305 	lsl.w	r3, r0, r5
 8006268:	fa20 f004 	lsr.w	r0, r0, r4
 800626c:	fa01 f205 	lsl.w	r2, r1, r5
 8006270:	ea40 0002 	orr.w	r0, r0, r2
 8006274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800627c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006280:	fa21 f604 	lsr.w	r6, r1, r4
 8006284:	eb42 0106 	adc.w	r1, r2, r6
 8006288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800628c:	bf08      	it	eq
 800628e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	f1c4 040c 	rsb	r4, r4, #12
 8006298:	f1c4 0520 	rsb	r5, r4, #32
 800629c:	fa00 f304 	lsl.w	r3, r0, r4
 80062a0:	fa20 f005 	lsr.w	r0, r0, r5
 80062a4:	fa01 f204 	lsl.w	r2, r1, r4
 80062a8:	ea40 0002 	orr.w	r0, r0, r2
 80062ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80062b4:	f141 0100 	adc.w	r1, r1, #0
 80062b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062bc:	bf08      	it	eq
 80062be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	f1c4 0520 	rsb	r5, r4, #32
 80062c8:	fa00 f205 	lsl.w	r2, r0, r5
 80062cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80062d0:	fa20 f304 	lsr.w	r3, r0, r4
 80062d4:	fa01 f205 	lsl.w	r2, r1, r5
 80062d8:	ea43 0302 	orr.w	r3, r3, r2
 80062dc:	fa21 f004 	lsr.w	r0, r1, r4
 80062e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062e4:	fa21 f204 	lsr.w	r2, r1, r4
 80062e8:	ea20 0002 	bic.w	r0, r0, r2
 80062ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80062f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062f4:	bf08      	it	eq
 80062f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f094 0f00 	teq	r4, #0
 8006300:	d10f      	bne.n	8006322 <__aeabi_dmul+0x1c2>
 8006302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006306:	0040      	lsls	r0, r0, #1
 8006308:	eb41 0101 	adc.w	r1, r1, r1
 800630c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006310:	bf08      	it	eq
 8006312:	3c01      	subeq	r4, #1
 8006314:	d0f7      	beq.n	8006306 <__aeabi_dmul+0x1a6>
 8006316:	ea41 0106 	orr.w	r1, r1, r6
 800631a:	f095 0f00 	teq	r5, #0
 800631e:	bf18      	it	ne
 8006320:	4770      	bxne	lr
 8006322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	eb43 0303 	adc.w	r3, r3, r3
 800632c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006330:	bf08      	it	eq
 8006332:	3d01      	subeq	r5, #1
 8006334:	d0f7      	beq.n	8006326 <__aeabi_dmul+0x1c6>
 8006336:	ea43 0306 	orr.w	r3, r3, r6
 800633a:	4770      	bx	lr
 800633c:	ea94 0f0c 	teq	r4, ip
 8006340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006344:	bf18      	it	ne
 8006346:	ea95 0f0c 	teqne	r5, ip
 800634a:	d00c      	beq.n	8006366 <__aeabi_dmul+0x206>
 800634c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006350:	bf18      	it	ne
 8006352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006356:	d1d1      	bne.n	80062fc <__aeabi_dmul+0x19c>
 8006358:	ea81 0103 	eor.w	r1, r1, r3
 800635c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006360:	f04f 0000 	mov.w	r0, #0
 8006364:	bd70      	pop	{r4, r5, r6, pc}
 8006366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800636a:	bf06      	itte	eq
 800636c:	4610      	moveq	r0, r2
 800636e:	4619      	moveq	r1, r3
 8006370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006374:	d019      	beq.n	80063aa <__aeabi_dmul+0x24a>
 8006376:	ea94 0f0c 	teq	r4, ip
 800637a:	d102      	bne.n	8006382 <__aeabi_dmul+0x222>
 800637c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006380:	d113      	bne.n	80063aa <__aeabi_dmul+0x24a>
 8006382:	ea95 0f0c 	teq	r5, ip
 8006386:	d105      	bne.n	8006394 <__aeabi_dmul+0x234>
 8006388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800638c:	bf1c      	itt	ne
 800638e:	4610      	movne	r0, r2
 8006390:	4619      	movne	r1, r3
 8006392:	d10a      	bne.n	80063aa <__aeabi_dmul+0x24a>
 8006394:	ea81 0103 	eor.w	r1, r1, r3
 8006398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800639c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80063a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80063ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80063b2:	bd70      	pop	{r4, r5, r6, pc}

080063b4 <__aeabi_ddiv>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80063ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80063be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80063c2:	bf1d      	ittte	ne
 80063c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80063c8:	ea94 0f0c 	teqne	r4, ip
 80063cc:	ea95 0f0c 	teqne	r5, ip
 80063d0:	f000 f8a7 	bleq	8006522 <__aeabi_ddiv+0x16e>
 80063d4:	eba4 0405 	sub.w	r4, r4, r5
 80063d8:	ea81 0e03 	eor.w	lr, r1, r3
 80063dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80063e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063e4:	f000 8088 	beq.w	80064f8 <__aeabi_ddiv+0x144>
 80063e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80063f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80063f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80063f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80063fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006400:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006404:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006408:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800640c:	429d      	cmp	r5, r3
 800640e:	bf08      	it	eq
 8006410:	4296      	cmpeq	r6, r2
 8006412:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006416:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800641a:	d202      	bcs.n	8006422 <__aeabi_ddiv+0x6e>
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006422:	1ab6      	subs	r6, r6, r2
 8006424:	eb65 0503 	sbc.w	r5, r5, r3
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	ea4f 0232 	mov.w	r2, r2, rrx
 800642e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006432:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006436:	ebb6 0e02 	subs.w	lr, r6, r2
 800643a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800643e:	bf22      	ittt	cs
 8006440:	1ab6      	subcs	r6, r6, r2
 8006442:	4675      	movcs	r5, lr
 8006444:	ea40 000c 	orrcs.w	r0, r0, ip
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	ea4f 0232 	mov.w	r2, r2, rrx
 800644e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006452:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006456:	bf22      	ittt	cs
 8006458:	1ab6      	subcs	r6, r6, r2
 800645a:	4675      	movcs	r5, lr
 800645c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	ea4f 0232 	mov.w	r2, r2, rrx
 8006466:	ebb6 0e02 	subs.w	lr, r6, r2
 800646a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800646e:	bf22      	ittt	cs
 8006470:	1ab6      	subcs	r6, r6, r2
 8006472:	4675      	movcs	r5, lr
 8006474:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	ea4f 0232 	mov.w	r2, r2, rrx
 800647e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006482:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006486:	bf22      	ittt	cs
 8006488:	1ab6      	subcs	r6, r6, r2
 800648a:	4675      	movcs	r5, lr
 800648c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006490:	ea55 0e06 	orrs.w	lr, r5, r6
 8006494:	d018      	beq.n	80064c8 <__aeabi_ddiv+0x114>
 8006496:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800649a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800649e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80064a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80064a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80064aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80064ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80064b2:	d1c0      	bne.n	8006436 <__aeabi_ddiv+0x82>
 80064b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064b8:	d10b      	bne.n	80064d2 <__aeabi_ddiv+0x11e>
 80064ba:	ea41 0100 	orr.w	r1, r1, r0
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80064c6:	e7b6      	b.n	8006436 <__aeabi_ddiv+0x82>
 80064c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064cc:	bf04      	itt	eq
 80064ce:	4301      	orreq	r1, r0
 80064d0:	2000      	moveq	r0, #0
 80064d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80064d6:	bf88      	it	hi
 80064d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80064dc:	f63f aeaf 	bhi.w	800623e <__aeabi_dmul+0xde>
 80064e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80064e4:	bf04      	itt	eq
 80064e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80064ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80064ee:	f150 0000 	adcs.w	r0, r0, #0
 80064f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80064fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006500:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006504:	bfc2      	ittt	gt
 8006506:	ebd4 050c 	rsbsgt	r5, r4, ip
 800650a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800650e:	bd70      	popgt	{r4, r5, r6, pc}
 8006510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006514:	f04f 0e00 	mov.w	lr, #0
 8006518:	3c01      	subs	r4, #1
 800651a:	e690      	b.n	800623e <__aeabi_dmul+0xde>
 800651c:	ea45 0e06 	orr.w	lr, r5, r6
 8006520:	e68d      	b.n	800623e <__aeabi_dmul+0xde>
 8006522:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006526:	ea94 0f0c 	teq	r4, ip
 800652a:	bf08      	it	eq
 800652c:	ea95 0f0c 	teqeq	r5, ip
 8006530:	f43f af3b 	beq.w	80063aa <__aeabi_dmul+0x24a>
 8006534:	ea94 0f0c 	teq	r4, ip
 8006538:	d10a      	bne.n	8006550 <__aeabi_ddiv+0x19c>
 800653a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800653e:	f47f af34 	bne.w	80063aa <__aeabi_dmul+0x24a>
 8006542:	ea95 0f0c 	teq	r5, ip
 8006546:	f47f af25 	bne.w	8006394 <__aeabi_dmul+0x234>
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	e72c      	b.n	80063aa <__aeabi_dmul+0x24a>
 8006550:	ea95 0f0c 	teq	r5, ip
 8006554:	d106      	bne.n	8006564 <__aeabi_ddiv+0x1b0>
 8006556:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800655a:	f43f aefd 	beq.w	8006358 <__aeabi_dmul+0x1f8>
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	e722      	b.n	80063aa <__aeabi_dmul+0x24a>
 8006564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006568:	bf18      	it	ne
 800656a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800656e:	f47f aec5 	bne.w	80062fc <__aeabi_dmul+0x19c>
 8006572:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006576:	f47f af0d 	bne.w	8006394 <__aeabi_dmul+0x234>
 800657a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800657e:	f47f aeeb 	bne.w	8006358 <__aeabi_dmul+0x1f8>
 8006582:	e712      	b.n	80063aa <__aeabi_dmul+0x24a>

08006584 <__gedf2>:
 8006584:	f04f 3cff 	mov.w	ip, #4294967295
 8006588:	e006      	b.n	8006598 <__cmpdf2+0x4>
 800658a:	bf00      	nop

0800658c <__ledf2>:
 800658c:	f04f 0c01 	mov.w	ip, #1
 8006590:	e002      	b.n	8006598 <__cmpdf2+0x4>
 8006592:	bf00      	nop

08006594 <__cmpdf2>:
 8006594:	f04f 0c01 	mov.w	ip, #1
 8006598:	f84d cd04 	str.w	ip, [sp, #-4]!
 800659c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065a8:	bf18      	it	ne
 80065aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80065ae:	d01b      	beq.n	80065e8 <__cmpdf2+0x54>
 80065b0:	b001      	add	sp, #4
 80065b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80065b6:	bf0c      	ite	eq
 80065b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80065bc:	ea91 0f03 	teqne	r1, r3
 80065c0:	bf02      	ittt	eq
 80065c2:	ea90 0f02 	teqeq	r0, r2
 80065c6:	2000      	moveq	r0, #0
 80065c8:	4770      	bxeq	lr
 80065ca:	f110 0f00 	cmn.w	r0, #0
 80065ce:	ea91 0f03 	teq	r1, r3
 80065d2:	bf58      	it	pl
 80065d4:	4299      	cmppl	r1, r3
 80065d6:	bf08      	it	eq
 80065d8:	4290      	cmpeq	r0, r2
 80065da:	bf2c      	ite	cs
 80065dc:	17d8      	asrcs	r0, r3, #31
 80065de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80065e2:	f040 0001 	orr.w	r0, r0, #1
 80065e6:	4770      	bx	lr
 80065e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065f0:	d102      	bne.n	80065f8 <__cmpdf2+0x64>
 80065f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80065f6:	d107      	bne.n	8006608 <__cmpdf2+0x74>
 80065f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006600:	d1d6      	bne.n	80065b0 <__cmpdf2+0x1c>
 8006602:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006606:	d0d3      	beq.n	80065b0 <__cmpdf2+0x1c>
 8006608:	f85d 0b04 	ldr.w	r0, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <__aeabi_cdrcmple>:
 8006610:	4684      	mov	ip, r0
 8006612:	4610      	mov	r0, r2
 8006614:	4662      	mov	r2, ip
 8006616:	468c      	mov	ip, r1
 8006618:	4619      	mov	r1, r3
 800661a:	4663      	mov	r3, ip
 800661c:	e000      	b.n	8006620 <__aeabi_cdcmpeq>
 800661e:	bf00      	nop

08006620 <__aeabi_cdcmpeq>:
 8006620:	b501      	push	{r0, lr}
 8006622:	f7ff ffb7 	bl	8006594 <__cmpdf2>
 8006626:	2800      	cmp	r0, #0
 8006628:	bf48      	it	mi
 800662a:	f110 0f00 	cmnmi.w	r0, #0
 800662e:	bd01      	pop	{r0, pc}

08006630 <__aeabi_dcmpeq>:
 8006630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006634:	f7ff fff4 	bl	8006620 <__aeabi_cdcmpeq>
 8006638:	bf0c      	ite	eq
 800663a:	2001      	moveq	r0, #1
 800663c:	2000      	movne	r0, #0
 800663e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006642:	bf00      	nop

08006644 <__aeabi_dcmplt>:
 8006644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006648:	f7ff ffea 	bl	8006620 <__aeabi_cdcmpeq>
 800664c:	bf34      	ite	cc
 800664e:	2001      	movcc	r0, #1
 8006650:	2000      	movcs	r0, #0
 8006652:	f85d fb08 	ldr.w	pc, [sp], #8
 8006656:	bf00      	nop

08006658 <__aeabi_dcmple>:
 8006658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800665c:	f7ff ffe0 	bl	8006620 <__aeabi_cdcmpeq>
 8006660:	bf94      	ite	ls
 8006662:	2001      	movls	r0, #1
 8006664:	2000      	movhi	r0, #0
 8006666:	f85d fb08 	ldr.w	pc, [sp], #8
 800666a:	bf00      	nop

0800666c <__aeabi_dcmpge>:
 800666c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006670:	f7ff ffce 	bl	8006610 <__aeabi_cdrcmple>
 8006674:	bf94      	ite	ls
 8006676:	2001      	movls	r0, #1
 8006678:	2000      	movhi	r0, #0
 800667a:	f85d fb08 	ldr.w	pc, [sp], #8
 800667e:	bf00      	nop

08006680 <__aeabi_dcmpgt>:
 8006680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006684:	f7ff ffc4 	bl	8006610 <__aeabi_cdrcmple>
 8006688:	bf34      	ite	cc
 800668a:	2001      	movcc	r0, #1
 800668c:	2000      	movcs	r0, #0
 800668e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006692:	bf00      	nop

08006694 <__aeabi_d2iz>:
 8006694:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006698:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800669c:	d215      	bcs.n	80066ca <__aeabi_d2iz+0x36>
 800669e:	d511      	bpl.n	80066c4 <__aeabi_d2iz+0x30>
 80066a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80066a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066a8:	d912      	bls.n	80066d0 <__aeabi_d2iz+0x3c>
 80066aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80066b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80066ba:	fa23 f002 	lsr.w	r0, r3, r2
 80066be:	bf18      	it	ne
 80066c0:	4240      	negne	r0, r0
 80066c2:	4770      	bx	lr
 80066c4:	f04f 0000 	mov.w	r0, #0
 80066c8:	4770      	bx	lr
 80066ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80066ce:	d105      	bne.n	80066dc <__aeabi_d2iz+0x48>
 80066d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80066d4:	bf08      	it	eq
 80066d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80066da:	4770      	bx	lr
 80066dc:	f04f 0000 	mov.w	r0, #0
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <__aeabi_d2uiz>:
 80066e4:	004a      	lsls	r2, r1, #1
 80066e6:	d211      	bcs.n	800670c <__aeabi_d2uiz+0x28>
 80066e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80066ec:	d211      	bcs.n	8006712 <__aeabi_d2uiz+0x2e>
 80066ee:	d50d      	bpl.n	800670c <__aeabi_d2uiz+0x28>
 80066f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80066f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066f8:	d40e      	bmi.n	8006718 <__aeabi_d2uiz+0x34>
 80066fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006702:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006706:	fa23 f002 	lsr.w	r0, r3, r2
 800670a:	4770      	bx	lr
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	4770      	bx	lr
 8006712:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006716:	d102      	bne.n	800671e <__aeabi_d2uiz+0x3a>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	4770      	bx	lr
 800671e:	f04f 0000 	mov.w	r0, #0
 8006722:	4770      	bx	lr

08006724 <__aeabi_uldivmod>:
 8006724:	b953      	cbnz	r3, 800673c <__aeabi_uldivmod+0x18>
 8006726:	b94a      	cbnz	r2, 800673c <__aeabi_uldivmod+0x18>
 8006728:	2900      	cmp	r1, #0
 800672a:	bf08      	it	eq
 800672c:	2800      	cmpeq	r0, #0
 800672e:	bf1c      	itt	ne
 8006730:	f04f 31ff 	movne.w	r1, #4294967295
 8006734:	f04f 30ff 	movne.w	r0, #4294967295
 8006738:	f000 b9a6 	b.w	8006a88 <__aeabi_idiv0>
 800673c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006740:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006744:	f000 f83c 	bl	80067c0 <__udivmoddi4>
 8006748:	f8dd e004 	ldr.w	lr, [sp, #4]
 800674c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006750:	b004      	add	sp, #16
 8006752:	4770      	bx	lr

08006754 <__aeabi_d2lz>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	2200      	movs	r2, #0
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	460d      	mov	r5, r1
 800675e:	f7ff ff71 	bl	8006644 <__aeabi_dcmplt>
 8006762:	b928      	cbnz	r0, 8006770 <__aeabi_d2lz+0x1c>
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800676c:	f000 b80a 	b.w	8006784 <__aeabi_d2ulz>
 8006770:	4620      	mov	r0, r4
 8006772:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8006776:	f000 f805 	bl	8006784 <__aeabi_d2ulz>
 800677a:	4240      	negs	r0, r0
 800677c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006780:	bd38      	pop	{r3, r4, r5, pc}
 8006782:	bf00      	nop

08006784 <__aeabi_d2ulz>:
 8006784:	b5d0      	push	{r4, r6, r7, lr}
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <__aeabi_d2ulz+0x34>)
 8006788:	2200      	movs	r2, #0
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	f7ff fce7 	bl	8006160 <__aeabi_dmul>
 8006792:	f7ff ffa7 	bl	80066e4 <__aeabi_d2uiz>
 8006796:	4604      	mov	r4, r0
 8006798:	f7ff fc68 	bl	800606c <__aeabi_ui2d>
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <__aeabi_d2ulz+0x38>)
 800679e:	2200      	movs	r2, #0
 80067a0:	f7ff fcde 	bl	8006160 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7ff fb20 	bl	8005df0 <__aeabi_dsub>
 80067b0:	f7ff ff98 	bl	80066e4 <__aeabi_d2uiz>
 80067b4:	4621      	mov	r1, r4
 80067b6:	bdd0      	pop	{r4, r6, r7, pc}
 80067b8:	3df00000 	.word	0x3df00000
 80067bc:	41f00000 	.word	0x41f00000

080067c0 <__udivmoddi4>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	9e08      	ldr	r6, [sp, #32]
 80067c6:	460d      	mov	r5, r1
 80067c8:	4604      	mov	r4, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d14a      	bne.n	8006866 <__udivmoddi4+0xa6>
 80067d0:	428a      	cmp	r2, r1
 80067d2:	4694      	mov	ip, r2
 80067d4:	d965      	bls.n	80068a2 <__udivmoddi4+0xe2>
 80067d6:	fab2 f382 	clz	r3, r2
 80067da:	b143      	cbz	r3, 80067ee <__udivmoddi4+0x2e>
 80067dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80067e0:	f1c3 0220 	rsb	r2, r3, #32
 80067e4:	409f      	lsls	r7, r3
 80067e6:	fa20 f202 	lsr.w	r2, r0, r2
 80067ea:	4317      	orrs	r7, r2
 80067ec:	409c      	lsls	r4, r3
 80067ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80067f2:	fa1f f58c 	uxth.w	r5, ip
 80067f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80067fa:	0c22      	lsrs	r2, r4, #16
 80067fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8006800:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006804:	fb01 f005 	mul.w	r0, r1, r5
 8006808:	4290      	cmp	r0, r2
 800680a:	d90a      	bls.n	8006822 <__udivmoddi4+0x62>
 800680c:	eb1c 0202 	adds.w	r2, ip, r2
 8006810:	f101 37ff 	add.w	r7, r1, #4294967295
 8006814:	f080 811c 	bcs.w	8006a50 <__udivmoddi4+0x290>
 8006818:	4290      	cmp	r0, r2
 800681a:	f240 8119 	bls.w	8006a50 <__udivmoddi4+0x290>
 800681e:	3902      	subs	r1, #2
 8006820:	4462      	add	r2, ip
 8006822:	1a12      	subs	r2, r2, r0
 8006824:	b2a4      	uxth	r4, r4
 8006826:	fbb2 f0fe 	udiv	r0, r2, lr
 800682a:	fb0e 2210 	mls	r2, lr, r0, r2
 800682e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006832:	fb00 f505 	mul.w	r5, r0, r5
 8006836:	42a5      	cmp	r5, r4
 8006838:	d90a      	bls.n	8006850 <__udivmoddi4+0x90>
 800683a:	eb1c 0404 	adds.w	r4, ip, r4
 800683e:	f100 32ff 	add.w	r2, r0, #4294967295
 8006842:	f080 8107 	bcs.w	8006a54 <__udivmoddi4+0x294>
 8006846:	42a5      	cmp	r5, r4
 8006848:	f240 8104 	bls.w	8006a54 <__udivmoddi4+0x294>
 800684c:	4464      	add	r4, ip
 800684e:	3802      	subs	r0, #2
 8006850:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	2100      	movs	r1, #0
 8006858:	b11e      	cbz	r6, 8006862 <__udivmoddi4+0xa2>
 800685a:	40dc      	lsrs	r4, r3
 800685c:	2300      	movs	r3, #0
 800685e:	e9c6 4300 	strd	r4, r3, [r6]
 8006862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006866:	428b      	cmp	r3, r1
 8006868:	d908      	bls.n	800687c <__udivmoddi4+0xbc>
 800686a:	2e00      	cmp	r6, #0
 800686c:	f000 80ed 	beq.w	8006a4a <__udivmoddi4+0x28a>
 8006870:	2100      	movs	r1, #0
 8006872:	e9c6 0500 	strd	r0, r5, [r6]
 8006876:	4608      	mov	r0, r1
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	fab3 f183 	clz	r1, r3
 8006880:	2900      	cmp	r1, #0
 8006882:	d149      	bne.n	8006918 <__udivmoddi4+0x158>
 8006884:	42ab      	cmp	r3, r5
 8006886:	d302      	bcc.n	800688e <__udivmoddi4+0xce>
 8006888:	4282      	cmp	r2, r0
 800688a:	f200 80f8 	bhi.w	8006a7e <__udivmoddi4+0x2be>
 800688e:	1a84      	subs	r4, r0, r2
 8006890:	eb65 0203 	sbc.w	r2, r5, r3
 8006894:	2001      	movs	r0, #1
 8006896:	4617      	mov	r7, r2
 8006898:	2e00      	cmp	r6, #0
 800689a:	d0e2      	beq.n	8006862 <__udivmoddi4+0xa2>
 800689c:	e9c6 4700 	strd	r4, r7, [r6]
 80068a0:	e7df      	b.n	8006862 <__udivmoddi4+0xa2>
 80068a2:	b902      	cbnz	r2, 80068a6 <__udivmoddi4+0xe6>
 80068a4:	deff      	udf	#255	; 0xff
 80068a6:	fab2 f382 	clz	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8090 	bne.w	80069d0 <__udivmoddi4+0x210>
 80068b0:	1a8a      	subs	r2, r1, r2
 80068b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80068b6:	fa1f fe8c 	uxth.w	lr, ip
 80068ba:	2101      	movs	r1, #1
 80068bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80068c0:	fb07 2015 	mls	r0, r7, r5, r2
 80068c4:	0c22      	lsrs	r2, r4, #16
 80068c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068ca:	fb0e f005 	mul.w	r0, lr, r5
 80068ce:	4290      	cmp	r0, r2
 80068d0:	d908      	bls.n	80068e4 <__udivmoddi4+0x124>
 80068d2:	eb1c 0202 	adds.w	r2, ip, r2
 80068d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80068da:	d202      	bcs.n	80068e2 <__udivmoddi4+0x122>
 80068dc:	4290      	cmp	r0, r2
 80068de:	f200 80cb 	bhi.w	8006a78 <__udivmoddi4+0x2b8>
 80068e2:	4645      	mov	r5, r8
 80068e4:	1a12      	subs	r2, r2, r0
 80068e6:	b2a4      	uxth	r4, r4
 80068e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80068ec:	fb07 2210 	mls	r2, r7, r0, r2
 80068f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80068f4:	fb0e fe00 	mul.w	lr, lr, r0
 80068f8:	45a6      	cmp	lr, r4
 80068fa:	d908      	bls.n	800690e <__udivmoddi4+0x14e>
 80068fc:	eb1c 0404 	adds.w	r4, ip, r4
 8006900:	f100 32ff 	add.w	r2, r0, #4294967295
 8006904:	d202      	bcs.n	800690c <__udivmoddi4+0x14c>
 8006906:	45a6      	cmp	lr, r4
 8006908:	f200 80bb 	bhi.w	8006a82 <__udivmoddi4+0x2c2>
 800690c:	4610      	mov	r0, r2
 800690e:	eba4 040e 	sub.w	r4, r4, lr
 8006912:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006916:	e79f      	b.n	8006858 <__udivmoddi4+0x98>
 8006918:	f1c1 0720 	rsb	r7, r1, #32
 800691c:	408b      	lsls	r3, r1
 800691e:	fa22 fc07 	lsr.w	ip, r2, r7
 8006922:	ea4c 0c03 	orr.w	ip, ip, r3
 8006926:	fa05 f401 	lsl.w	r4, r5, r1
 800692a:	fa20 f307 	lsr.w	r3, r0, r7
 800692e:	40fd      	lsrs	r5, r7
 8006930:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006934:	4323      	orrs	r3, r4
 8006936:	fbb5 f8f9 	udiv	r8, r5, r9
 800693a:	fa1f fe8c 	uxth.w	lr, ip
 800693e:	fb09 5518 	mls	r5, r9, r8, r5
 8006942:	0c1c      	lsrs	r4, r3, #16
 8006944:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006948:	fb08 f50e 	mul.w	r5, r8, lr
 800694c:	42a5      	cmp	r5, r4
 800694e:	fa02 f201 	lsl.w	r2, r2, r1
 8006952:	fa00 f001 	lsl.w	r0, r0, r1
 8006956:	d90b      	bls.n	8006970 <__udivmoddi4+0x1b0>
 8006958:	eb1c 0404 	adds.w	r4, ip, r4
 800695c:	f108 3aff 	add.w	sl, r8, #4294967295
 8006960:	f080 8088 	bcs.w	8006a74 <__udivmoddi4+0x2b4>
 8006964:	42a5      	cmp	r5, r4
 8006966:	f240 8085 	bls.w	8006a74 <__udivmoddi4+0x2b4>
 800696a:	f1a8 0802 	sub.w	r8, r8, #2
 800696e:	4464      	add	r4, ip
 8006970:	1b64      	subs	r4, r4, r5
 8006972:	b29d      	uxth	r5, r3
 8006974:	fbb4 f3f9 	udiv	r3, r4, r9
 8006978:	fb09 4413 	mls	r4, r9, r3, r4
 800697c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006980:	fb03 fe0e 	mul.w	lr, r3, lr
 8006984:	45a6      	cmp	lr, r4
 8006986:	d908      	bls.n	800699a <__udivmoddi4+0x1da>
 8006988:	eb1c 0404 	adds.w	r4, ip, r4
 800698c:	f103 35ff 	add.w	r5, r3, #4294967295
 8006990:	d26c      	bcs.n	8006a6c <__udivmoddi4+0x2ac>
 8006992:	45a6      	cmp	lr, r4
 8006994:	d96a      	bls.n	8006a6c <__udivmoddi4+0x2ac>
 8006996:	3b02      	subs	r3, #2
 8006998:	4464      	add	r4, ip
 800699a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800699e:	fba3 9502 	umull	r9, r5, r3, r2
 80069a2:	eba4 040e 	sub.w	r4, r4, lr
 80069a6:	42ac      	cmp	r4, r5
 80069a8:	46c8      	mov	r8, r9
 80069aa:	46ae      	mov	lr, r5
 80069ac:	d356      	bcc.n	8006a5c <__udivmoddi4+0x29c>
 80069ae:	d053      	beq.n	8006a58 <__udivmoddi4+0x298>
 80069b0:	b156      	cbz	r6, 80069c8 <__udivmoddi4+0x208>
 80069b2:	ebb0 0208 	subs.w	r2, r0, r8
 80069b6:	eb64 040e 	sbc.w	r4, r4, lr
 80069ba:	fa04 f707 	lsl.w	r7, r4, r7
 80069be:	40ca      	lsrs	r2, r1
 80069c0:	40cc      	lsrs	r4, r1
 80069c2:	4317      	orrs	r7, r2
 80069c4:	e9c6 7400 	strd	r7, r4, [r6]
 80069c8:	4618      	mov	r0, r3
 80069ca:	2100      	movs	r1, #0
 80069cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d0:	f1c3 0120 	rsb	r1, r3, #32
 80069d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80069d8:	fa20 f201 	lsr.w	r2, r0, r1
 80069dc:	fa25 f101 	lsr.w	r1, r5, r1
 80069e0:	409d      	lsls	r5, r3
 80069e2:	432a      	orrs	r2, r5
 80069e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80069e8:	fa1f fe8c 	uxth.w	lr, ip
 80069ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80069f0:	fb07 1510 	mls	r5, r7, r0, r1
 80069f4:	0c11      	lsrs	r1, r2, #16
 80069f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80069fa:	fb00 f50e 	mul.w	r5, r0, lr
 80069fe:	428d      	cmp	r5, r1
 8006a00:	fa04 f403 	lsl.w	r4, r4, r3
 8006a04:	d908      	bls.n	8006a18 <__udivmoddi4+0x258>
 8006a06:	eb1c 0101 	adds.w	r1, ip, r1
 8006a0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8006a0e:	d22f      	bcs.n	8006a70 <__udivmoddi4+0x2b0>
 8006a10:	428d      	cmp	r5, r1
 8006a12:	d92d      	bls.n	8006a70 <__udivmoddi4+0x2b0>
 8006a14:	3802      	subs	r0, #2
 8006a16:	4461      	add	r1, ip
 8006a18:	1b49      	subs	r1, r1, r5
 8006a1a:	b292      	uxth	r2, r2
 8006a1c:	fbb1 f5f7 	udiv	r5, r1, r7
 8006a20:	fb07 1115 	mls	r1, r7, r5, r1
 8006a24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a28:	fb05 f10e 	mul.w	r1, r5, lr
 8006a2c:	4291      	cmp	r1, r2
 8006a2e:	d908      	bls.n	8006a42 <__udivmoddi4+0x282>
 8006a30:	eb1c 0202 	adds.w	r2, ip, r2
 8006a34:	f105 38ff 	add.w	r8, r5, #4294967295
 8006a38:	d216      	bcs.n	8006a68 <__udivmoddi4+0x2a8>
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	d914      	bls.n	8006a68 <__udivmoddi4+0x2a8>
 8006a3e:	3d02      	subs	r5, #2
 8006a40:	4462      	add	r2, ip
 8006a42:	1a52      	subs	r2, r2, r1
 8006a44:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8006a48:	e738      	b.n	80068bc <__udivmoddi4+0xfc>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	e708      	b.n	8006862 <__udivmoddi4+0xa2>
 8006a50:	4639      	mov	r1, r7
 8006a52:	e6e6      	b.n	8006822 <__udivmoddi4+0x62>
 8006a54:	4610      	mov	r0, r2
 8006a56:	e6fb      	b.n	8006850 <__udivmoddi4+0x90>
 8006a58:	4548      	cmp	r0, r9
 8006a5a:	d2a9      	bcs.n	80069b0 <__udivmoddi4+0x1f0>
 8006a5c:	ebb9 0802 	subs.w	r8, r9, r2
 8006a60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006a64:	3b01      	subs	r3, #1
 8006a66:	e7a3      	b.n	80069b0 <__udivmoddi4+0x1f0>
 8006a68:	4645      	mov	r5, r8
 8006a6a:	e7ea      	b.n	8006a42 <__udivmoddi4+0x282>
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	e794      	b.n	800699a <__udivmoddi4+0x1da>
 8006a70:	4640      	mov	r0, r8
 8006a72:	e7d1      	b.n	8006a18 <__udivmoddi4+0x258>
 8006a74:	46d0      	mov	r8, sl
 8006a76:	e77b      	b.n	8006970 <__udivmoddi4+0x1b0>
 8006a78:	3d02      	subs	r5, #2
 8006a7a:	4462      	add	r2, ip
 8006a7c:	e732      	b.n	80068e4 <__udivmoddi4+0x124>
 8006a7e:	4608      	mov	r0, r1
 8006a80:	e70a      	b.n	8006898 <__udivmoddi4+0xd8>
 8006a82:	4464      	add	r4, ip
 8006a84:	3802      	subs	r0, #2
 8006a86:	e742      	b.n	800690e <__udivmoddi4+0x14e>

08006a88 <__aeabi_idiv0>:
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop

08006a8c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <LL_C2_PWR_SetPowerMode+0x28>)
 8006a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9a:	f023 0207 	bic.w	r2, r3, #7
 8006a9e:	4905      	ldr	r1, [pc, #20]	; (8006ab4 <LL_C2_PWR_SetPowerMode+0x28>)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	58000400 	.word	0x58000400

08006ab8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <LL_EXTI_EnableIT_32_63+0x24>)
 8006ac2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ac6:	4905      	ldr	r1, [pc, #20]	; (8006adc <LL_EXTI_EnableIT_32_63+0x24>)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	58000800 	.word	0x58000800

08006ae0 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8006ae8:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8006aea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006aee:	4905      	ldr	r1, [pc, #20]	; (8006b04 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	58000800 	.word	0x58000800

08006b08 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b14:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8006b16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b22:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	cafecafe 	.word	0xcafecafe

08006b44 <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 8006b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8006b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ba2:	bf00      	nop
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8006bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be2:	d101      	bne.n	8006be8 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c08:	d101      	bne.n	8006c0e <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	605a      	str	r2, [r3, #4]
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695a      	ldr	r2, [r3, #20]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	615a      	str	r2, [r3, #20]
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	615a      	str	r2, [r3, #20]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	609a      	str	r2, [r3, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	619a      	str	r2, [r3, #24]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <LL_LPM_EnableSleep+0x1c>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	4a04      	ldr	r2, [pc, #16]	; (8006d2c <LL_LPM_EnableSleep+0x1c>)
 8006d1a:	f023 0304 	bic.w	r3, r3, #4
 8006d1e:	6113      	str	r3, [r2, #16]
}
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	e000ed00 	.word	0xe000ed00

08006d30 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	22ff      	movs	r2, #255	; 0xff
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	22ca      	movs	r2, #202	; 0xca
 8006d56:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2253      	movs	r2, #83	; 0x53
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f023 0207 	bic.w	r2, r3, #7
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006d94:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <MX_APPE_Config+0x18>)
 8006d96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d9a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8006d9c:	f000 f834 	bl	8006e08 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8006da0:	f000 f874 	bl	8006e8c <Config_HSE>

  return;
 8006da4:	bf00      	nop
}
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	58004000 	.word	0x58004000

08006dac <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8006db0:	f000 f880 	bl	8006eb4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8006db4:	f000 f898 	bl	8006ee8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8006db8:	4904      	ldr	r1, [pc, #16]	; (8006dcc <MX_APPE_Init+0x20>)
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f000 f9da 	bl	8007174 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8006dc0:	f000 f814 	bl	8006dec <Init_Debug>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8006dc4:	f000 f8a8 	bl	8006f18 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8006dc8:	bf00      	nop
}
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200001b0 	.word	0x200001b0

08006dd0 <Init_Smps>:

void Init_Smps(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8006dd4:	bf00      	nop
}
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <Init_Exti>:

void Init_Exti(void)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8006de2:	2050      	movs	r0, #80	; 0x50
 8006de4:	f7ff fe68 	bl	8006ab8 <LL_EXTI_EnableIT_32_63>

  return;
 8006de8:	bf00      	nop
}
 8006dea:	bd80      	pop	{r7, pc}

08006dec <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8006df0:	f001 f9d2 	bl	8008198 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006df4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006df8:	f7ff fe5e 	bl	8006ab8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006dfc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006e00:	f7ff fe6e 	bl	8006ae0 <LL_C2_EXTI_EnableIT_32_63>

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8006e04:	bf00      	nop
}
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <Reset_Device>:
static void Reset_Device(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8006e0c:	f000 f804 	bl	8006e18 <Reset_BackupDomain>

  Reset_IPCC();
 8006e10:	f000 f81a 	bl	8006e48 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8006e14:	bf00      	nop
}
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8006e1c:	f7ff fed7 	bl	8006bce <LL_RCC_IsActiveFlag_PINRST>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <Reset_BackupDomain+0x2a>
 8006e26:	f7ff fee5 	bl	8006bf4 <LL_RCC_IsActiveFlag_SFTRST>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d108      	bne.n	8006e42 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006e30:	f001 ff60 	bl	8008cf4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8006e34:	f001 ff5e 	bl	8008cf4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8006e38:	f7ff fea7 	bl	8006b8a <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8006e3c:	f7ff feb6 	bl	8006bac <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
}
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8006e4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006e50:	f7ff fee3 	bl	8006c1a <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8006e54:	213f      	movs	r1, #63	; 0x3f
 8006e56:	480c      	ldr	r0, [pc, #48]	; (8006e88 <Reset_IPCC+0x40>)
 8006e58:	f7ff ff3e 	bl	8006cd8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8006e5c:	213f      	movs	r1, #63	; 0x3f
 8006e5e:	480a      	ldr	r0, [pc, #40]	; (8006e88 <Reset_IPCC+0x40>)
 8006e60:	f7ff ff48 	bl	8006cf4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8006e64:	213f      	movs	r1, #63	; 0x3f
 8006e66:	4808      	ldr	r0, [pc, #32]	; (8006e88 <Reset_IPCC+0x40>)
 8006e68:	f7ff fef0 	bl	8006c4c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8006e6c:	213f      	movs	r1, #63	; 0x3f
 8006e6e:	4806      	ldr	r0, [pc, #24]	; (8006e88 <Reset_IPCC+0x40>)
 8006e70:	f7ff ff0f 	bl	8006c92 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8006e74:	213f      	movs	r1, #63	; 0x3f
 8006e76:	4804      	ldr	r0, [pc, #16]	; (8006e88 <Reset_IPCC+0x40>)
 8006e78:	f7ff fefa 	bl	8006c70 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8006e7c:	213f      	movs	r1, #63	; 0x3f
 8006e7e:	4802      	ldr	r0, [pc, #8]	; (8006e88 <Reset_IPCC+0x40>)
 8006e80:	f7ff ff19 	bl	8006cb6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8006e84:	bf00      	nop
}
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	58000c00 	.word	0x58000c00

08006e8c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006e92:	2000      	movs	r0, #0
 8006e94:	f005 fd70 	bl	800c978 <OTP_Read>
 8006e98:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	799b      	ldrb	r3, [r3, #6]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff fe2f 	bl	8006b08 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
}
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <System_Init>:

static void System_Init(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  Init_Smps();
 8006eb8:	f7ff ff8a 	bl	8006dd0 <Init_Smps>

  Init_Exti();
 8006ebc:	f7ff ff8f 	bl	8006dde <Init_Exti>

  Init_Rtc();
 8006ec0:	f000 f802 	bl	8006ec8 <Init_Rtc>

  return;
 8006ec4:	bf00      	nop
}
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <Init_Rtc>:

static void Init_Rtc(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8006ecc:	4805      	ldr	r0, [pc, #20]	; (8006ee4 <Init_Rtc+0x1c>)
 8006ece:	f7ff ff3c 	bl	8006d4a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4803      	ldr	r0, [pc, #12]	; (8006ee4 <Init_Rtc+0x1c>)
 8006ed6:	f7ff ff48 	bl	8006d6a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8006eda:	4802      	ldr	r0, [pc, #8]	; (8006ee4 <Init_Rtc+0x1c>)
 8006edc:	f7ff ff28 	bl	8006d30 <LL_RTC_EnableWriteProtection>

  return;
 8006ee0:	bf00      	nop
}
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40002800 	.word	0x40002800

08006ee8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 8006eec:	f7ff fe2a 	bl	8006b44 <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006ef0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006ef4:	f7ff fe35 	bl	8006b62 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006ef8:	f009 f9e0 	bl	80102bc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8006efc:	2004      	movs	r0, #4
 8006efe:	f7ff fdc5 	bl	8006a8c <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006f02:	2101      	movs	r1, #1
 8006f04:	2001      	movs	r0, #1
 8006f06:	f009 fa1b 	bl	8010340 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f009 f9e7 	bl	80102e0 <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8006f12:	bf00      	nop
}
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8006f1e:	f005 fad1 	bl	800c4c4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8006f22:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <appe_Tl_Init+0x50>)
 8006f24:	2100      	movs	r1, #0
 8006f26:	2008      	movs	r0, #8
 8006f28:	f009 fb36 	bl	8010598 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <appe_Tl_Init+0x54>)
 8006f2e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <appe_Tl_Init+0x58>)
 8006f32:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8006f34:	463b      	mov	r3, r7
 8006f36:	4619      	mov	r1, r3
 8006f38:	480e      	ldr	r0, [pc, #56]	; (8006f74 <appe_Tl_Init+0x5c>)
 8006f3a:	f005 f985 	bl	800c248 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <appe_Tl_Init+0x60>)
 8006f44:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <appe_Tl_Init+0x64>)
 8006f48:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8006f4a:	f240 533c 	movw	r3, #1340	; 0x53c
 8006f4e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8006f50:	f107 0308 	add.w	r3, r7, #8
 8006f54:	4618      	mov	r0, r3
 8006f56:	f005 fc11 	bl	800c77c <TL_MM_Init>

  TL_Enable();
 8006f5a:	f005 faad 	bl	800c4b8 <TL_Enable>

  return;
 8006f5e:	bf00      	nop
}
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	0800c281 	.word	0x0800c281
 8006f6c:	20030620 	.word	0x20030620
 8006f70:	08006f81 	.word	0x08006f81
 8006f74:	08006f97 	.word	0x08006f97
 8006f78:	2003072c 	.word	0x2003072c
 8006f7c:	200300e4 	.word	0x200300e4

08006f80 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8006f8a:	bf00      	nop
}
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	330b      	adds	r3, #11
 8006fa4:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8006fb0:	d004      	beq.n	8006fbc <APPE_SysUserEvtRx+0x26>
 8006fb2:	f249 2201 	movw	r2, #37377	; 0x9201
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8006fba:	e008      	b.n	8006fce <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8006fbc:	f000 f82a 	bl	8007014 <APPE_SysEvtReadyProcessing>
         break;
 8006fc0:	e005      	b.n	8006fce <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	789b      	ldrb	r3, [r3, #2]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 f806 	bl	8006fd8 <APPE_SysEvtError>
         break;
 8006fcc:	bf00      	nop
  }
  return;
 8006fce:	bf00      	nop
}
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	2bc8      	cmp	r3, #200	; 0xc8
 8006fe6:	d105      	bne.n	8006ff4 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8006fe8:	4a08      	ldr	r2, [pc, #32]	; (800700c <APPE_SysEvtError+0x34>)
 8006fea:	2101      	movs	r1, #1
 8006fec:	2000      	movs	r0, #0
 8006fee:	f000 fecf 	bl	8007d90 <logApplication>
       break;
 8006ff2:	e006      	b.n	8007002 <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	4a06      	ldr	r2, [pc, #24]	; (8007010 <APPE_SysEvtError+0x38>)
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	f000 fec8 	bl	8007d90 <logApplication>
       break;
 8007000:	bf00      	nop
  }
  return;
 8007002:	bf00      	nop
}
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	08011ae0 	.word	0x08011ae0
 8007010:	08011b00 	.word	0x08011b00

08007014 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8007018:	f005 fc24 	bl	800c864 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 800701c:	f008 fa82 	bl	800f524 <APP_ZIGBEE_Init>
  return;
 8007020:	bf00      	nop
}
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800702c:	f001 f890 	bl	8008150 <HAL_GetTick>
 8007030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d00a      	beq.n	8007054 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800703e:	f001 f89f 	bl	8008180 <HAL_GetTickFreq>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800704c:	e002      	b.n	8007054 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800704e:	f7ff fe5f 	bl	8006d10 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8007052:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8007054:	f001 f87c 	bl	8008150 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	429a      	cmp	r2, r3
 8007062:	d8f4      	bhi.n	800704e <HAL_Delay+0x2a>
  }
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007072:	f04f 30ff 	mov.w	r0, #4294967295
 8007076:	f009 f993 	bl	80103a0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}

0800707e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800707e:	b480      	push	{r7}
 8007080:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8007082:	bf00      	nop
}
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d003      	beq.n	80070a4 <UTIL_SEQ_EvtIdle+0x18>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d004      	beq.n	80070ac <UTIL_SEQ_EvtIdle+0x20>
 80070a2:	e00a      	b.n	80070ba <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 80070a4:	2002      	movs	r0, #2
 80070a6:	f009 f97b 	bl	80103a0 <UTIL_SEQ_Run>
    break;
 80070aa:	e00b      	b.n	80070c4 <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80070ac:	2004      	movs	r0, #4
 80070ae:	f009 fac1 	bl	8010634 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 80070b2:	2003      	movs	r0, #3
 80070b4:	f009 f974 	bl	80103a0 <UTIL_SEQ_Run>
    break;
 80070b8:	e004      	b.n	80070c4 <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295
 80070be:	f009 f96f 	bl	80103a0 <UTIL_SEQ_Run>
    break;
 80070c2:	bf00      	nop
  }
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 80070d4:	2100      	movs	r1, #0
 80070d6:	2008      	movs	r0, #8
 80070d8:	f009 fa80 	bl	80105dc <UTIL_SEQ_SetTask>
  return;
 80070dc:	bf00      	nop
}
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80070ec:	2001      	movs	r0, #1
 80070ee:	f009 faa1 	bl	8010634 <UTIL_SEQ_SetEvt>
  return;
 80070f2:	bf00      	nop
}
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8007102:	2001      	movs	r0, #1
 8007104:	f009 fab6 	bl	8010674 <UTIL_SEQ_WaitEvt>
  return;
 8007108:	bf00      	nop
}
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f005 fb6b 	bl	800c7f4 <TL_MM_EvtDone>
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <LL_EXTI_EnableIT_0_31>:
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <LL_EXTI_EnableIT_0_31+0x24>)
 8007132:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007136:	4905      	ldr	r1, [pc, #20]	; (800714c <LL_EXTI_EnableIT_0_31+0x24>)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	58000800 	.word	0x58000800

08007150 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007158:	4b05      	ldr	r3, [pc, #20]	; (8007170 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4904      	ldr	r1, [pc, #16]	; (8007170 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4313      	orrs	r3, r2
 8007162:	600b      	str	r3, [r1, #0]

}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	58000800 	.word	0x58000800

08007174 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007180:	4b5e      	ldr	r3, [pc, #376]	; (80072fc <HW_TS_Init+0x188>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	22ca      	movs	r2, #202	; 0xca
 8007186:	625a      	str	r2, [r3, #36]	; 0x24
 8007188:	4b5c      	ldr	r3, [pc, #368]	; (80072fc <HW_TS_Init+0x188>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2253      	movs	r2, #83	; 0x53
 800718e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007190:	4b5b      	ldr	r3, [pc, #364]	; (8007300 <HW_TS_Init+0x18c>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4a5a      	ldr	r2, [pc, #360]	; (8007300 <HW_TS_Init+0x18c>)
 8007196:	f043 0320 	orr.w	r3, r3, #32
 800719a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800719c:	4b58      	ldr	r3, [pc, #352]	; (8007300 <HW_TS_Init+0x18c>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f1c3 0304 	rsb	r3, r3, #4
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	4b55      	ldr	r3, [pc, #340]	; (8007304 <HW_TS_Init+0x190>)
 80071b0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80071b2:	4b53      	ldr	r3, [pc, #332]	; (8007300 <HW_TS_Init+0x18c>)
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071ba:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80071be:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	fa92 f2a2 	rbit	r2, r2
 80071c6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	d101      	bne.n	80071d6 <HW_TS_Init+0x62>
  {
    return 32U;
 80071d2:	2220      	movs	r2, #32
 80071d4:	e003      	b.n	80071de <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	fab2 f282 	clz	r2, r2
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	40d3      	lsrs	r3, r2
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	4b48      	ldr	r3, [pc, #288]	; (8007308 <HW_TS_Init+0x194>)
 80071e8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80071ea:	4b45      	ldr	r3, [pc, #276]	; (8007300 <HW_TS_Init+0x18c>)
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3301      	adds	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	4b44      	ldr	r3, [pc, #272]	; (800730c <HW_TS_Init+0x198>)
 80071fc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80071fe:	4b43      	ldr	r3, [pc, #268]	; (800730c <HW_TS_Init+0x198>)
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	3b01      	subs	r3, #1
 8007204:	4a40      	ldr	r2, [pc, #256]	; (8007308 <HW_TS_Init+0x194>)
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007210:	4a3c      	ldr	r2, [pc, #240]	; (8007304 <HW_TS_Init+0x190>)
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	40d3      	lsrs	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800721e:	4293      	cmp	r3, r2
 8007220:	d904      	bls.n	800722c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8007222:	4b3b      	ldr	r3, [pc, #236]	; (8007310 <HW_TS_Init+0x19c>)
 8007224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007228:	801a      	strh	r2, [r3, #0]
 800722a:	e003      	b.n	8007234 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	b29a      	uxth	r2, r3
 8007230:	4b37      	ldr	r3, [pc, #220]	; (8007310 <HW_TS_Init+0x19c>)
 8007232:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007234:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007238:	f7ff ff8a 	bl	8007150 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800723c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007240:	f7ff ff72 	bl	8007128 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d13d      	bne.n	80072c6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800724a:	4b32      	ldr	r3, [pc, #200]	; (8007314 <HW_TS_Init+0x1a0>)
 800724c:	2201      	movs	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8007250:	4b31      	ldr	r3, [pc, #196]	; (8007318 <HW_TS_Init+0x1a4>)
 8007252:	f04f 32ff 	mov.w	r2, #4294967295
 8007256:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007258:	2300      	movs	r3, #0
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e00c      	b.n	8007278 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800725e:	7ffa      	ldrb	r2, [r7, #31]
 8007260:	492e      	ldr	r1, [pc, #184]	; (800731c <HW_TS_Init+0x1a8>)
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	440b      	add	r3, r1
 800726c:	330c      	adds	r3, #12
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007272:	7ffb      	ldrb	r3, [r7, #31]
 8007274:	3301      	adds	r3, #1
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	7ffb      	ldrb	r3, [r7, #31]
 800727a:	2b05      	cmp	r3, #5
 800727c:	d9ef      	bls.n	800725e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800727e:	4b28      	ldr	r3, [pc, #160]	; (8007320 <HW_TS_Init+0x1ac>)
 8007280:	2206      	movs	r2, #6
 8007282:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8007284:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <HW_TS_Init+0x188>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <HW_TS_Init+0x188>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007292:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <HW_TS_Init+0x188>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	4b17      	ldr	r3, [pc, #92]	; (80072fc <HW_TS_Init+0x188>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80072a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <HW_TS_Init+0x1b0>)
 80072a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80072ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80072ae:	2003      	movs	r0, #3
 80072b0:	f001 f8d1 	bl	8008456 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80072b4:	4b11      	ldr	r3, [pc, #68]	; (80072fc <HW_TS_Init+0x188>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <HW_TS_Init+0x188>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	e009      	b.n	80072da <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <HW_TS_Init+0x188>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80072d4:	2003      	movs	r0, #3
 80072d6:	f001 f8b0 	bl	800843a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80072da:	4b08      	ldr	r3, [pc, #32]	; (80072fc <HW_TS_Init+0x188>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80072e2:	2200      	movs	r2, #0
 80072e4:	2103      	movs	r1, #3
 80072e6:	2003      	movs	r0, #3
 80072e8:	f001 f873 	bl	80083d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80072ec:	2003      	movs	r0, #3
 80072ee:	f001 f88a 	bl	8008406 <HAL_NVIC_EnableIRQ>

  return;
 80072f2:	bf00      	nop
}
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	200001b0 	.word	0x200001b0
 8007300:	40002800 	.word	0x40002800
 8007304:	20000155 	.word	0x20000155
 8007308:	20000156 	.word	0x20000156
 800730c:	20000158 	.word	0x20000158
 8007310:	2000015a 	.word	0x2000015a
 8007314:	20000154 	.word	0x20000154
 8007318:	20000150 	.word	0x20000150
 800731c:	200000bc 	.word	0x200000bc
 8007320:	2000014c 	.word	0x2000014c
 8007324:	58000800 	.word	0x58000800

08007328 <LL_RCC_LSE_SetDriveCapability>:
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8007330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007338:	f023 0218 	bic.w	r2, r3, #24
 800733c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <LL_AHB2_GRP1_EnableClock>:
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4313      	orrs	r3, r2
 800736a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800736c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4013      	ands	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007378:	68fb      	ldr	r3, [r7, #12]
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
	...

08007388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800738c:	f000 fe72 	bl	8008074 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8007390:	f7ff fcfe 	bl	8006d90 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007394:	f000 f834 	bl	8007400 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007398:	f000 f8aa 	bl	80074f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800739c:	f000 f9f0 	bl	8007780 <MX_GPIO_Init>
  MX_I2C1_Init();
 80073a0:	f000 f8c6 	bl	8007530 <MX_I2C1_Init>
  MX_SPI1_Init();
 80073a4:	f000 f93c 	bl	8007620 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80073a8:	f000 f974 	bl	8007694 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80073ac:	f000 f9c0 	bl	8007730 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 80073b0:	f000 f8fe 	bl	80075b0 <MX_MEMORYMAP_Init>
  MX_RTC_Init();
 80073b4:	f000 f90a 	bl	80075cc <MX_RTC_Init>
  MX_RF_Init();
 80073b8:	f000 f901 	bl	80075be <MX_RF_Init>

  /* USER CODE BEGIN 2 */
  MX_LPUART1_UART_Init();
 80073bc:	f000 fa28 	bl	8007810 <MX_LPUART1_UART_Init>

  /* Register task */
    //Task associated with the SPI reception and read
  	UTIL_SEQ_RegTask(1U << CFG_TASK_SPI_read, UTIL_SEQ_RFU, APP_SPIread_Process);
 80073c0:	4a0b      	ldr	r2, [pc, #44]	; (80073f0 <main+0x68>)
 80073c2:	2100      	movs	r1, #0
 80073c4:	2010      	movs	r0, #16
 80073c6:	f009 f8e7 	bl	8010598 <UTIL_SEQ_RegTask>

  /*##-1- Start the Full Duplex Communication process ########################*/
  /* While the SPI in TransmitReceive process, user can transmit data through
     "aTxBuffer" buffer & receive data through "aRxBuffer" */
  if (HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 80073ca:	230c      	movs	r3, #12
 80073cc:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <main+0x6c>)
 80073ce:	490a      	ldr	r1, [pc, #40]	; (80073f8 <main+0x70>)
 80073d0:	480a      	ldr	r0, [pc, #40]	; (80073fc <main+0x74>)
 80073d2:	f003 fc15 	bl	800ac00 <HAL_SPI_TransmitReceive_IT>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <main+0x58>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 80073dc:	f000 fab0 	bl	8007940 <Error_Handler>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80073e0:	f7ff fce4 	bl	8006dac <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(50);
 80073e4:	2032      	movs	r0, #50	; 0x32
 80073e6:	f7ff fe1d 	bl	8007024 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80073ea:	f7ff fe40 	bl	800706e <MX_APPE_Process>
 80073ee:	e7fc      	b.n	80073ea <main+0x62>
 80073f0:	08007905 	.word	0x08007905
 80073f4:	20000654 	.word	0x20000654
 80073f8:	20000008 	.word	0x20000008
 80073fc:	200001d4 	.word	0x200001d4

08007400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b09a      	sub	sp, #104	; 0x68
 8007404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007406:	f107 0320 	add.w	r3, r7, #32
 800740a:	2248      	movs	r2, #72	; 0x48
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f009 fbd5 	bl	8010bbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007414:	1d3b      	adds	r3, r7, #4
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	609a      	str	r2, [r3, #8]
 800741e:	60da      	str	r2, [r3, #12]
 8007420:	611a      	str	r2, [r3, #16]
 8007422:	615a      	str	r2, [r3, #20]
 8007424:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8007436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f023 0303 	bic.w	r3, r3, #3
 8007440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800744a:	f001 fc53 	bl	8008cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800744e:	2000      	movs	r0, #0
 8007450:	f7ff ff6a 	bl	8007328 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <SystemClock_Config+0xec>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800745c:	4a23      	ldr	r2, [pc, #140]	; (80074ec <SystemClock_Config+0xec>)
 800745e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <SystemClock_Config+0xec>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800746c:	603b      	str	r3, [r7, #0]
 800746e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef strufcture.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8007470:	232f      	movs	r3, #47	; 0x2f
 8007472:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800747a:	2301      	movs	r3, #1
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800747e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007484:	2301      	movs	r3, #1
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007488:	2340      	movs	r3, #64	; 0x40
 800748a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800748c:	2300      	movs	r3, #0
 800748e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007490:	2360      	movs	r3, #96	; 0x60
 8007492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007494:	2305      	movs	r3, #5
 8007496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007498:	2300      	movs	r3, #0
 800749a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800749c:	f107 0320 	add.w	r3, r7, #32
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 ffbb 	bl	800941c <HAL_RCC_OscConfig>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80074ac:	f000 fa48 	bl	8007940 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80074b0:	236f      	movs	r3, #111	; 0x6f
 80074b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80074b4:	2302      	movs	r3, #2
 80074b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	2101      	movs	r1, #1
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 fb17 	bl	8009b04 <HAL_RCC_ClockConfig>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80074dc:	f000 fa30 	bl	8007940 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80074e0:	f003 f8d2 	bl	800a688 <HAL_RCCEx_EnableMSIPLLMode>
}
 80074e4:	bf00      	nop
 80074e6:	3768      	adds	r7, #104	; 0x68
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	58000400 	.word	0x58000400

080074f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b094      	sub	sp, #80	; 0x50
 80074f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80074f6:	463b      	mov	r3, r7
 80074f8:	2250      	movs	r2, #80	; 0x50
 80074fa:	2100      	movs	r1, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f009 fb5e 	bl	8010bbe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8007502:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007506:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8007508:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800750c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800750e:	2300      	movs	r3, #0
 8007510:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8007512:	2300      	movs	r3, #0
 8007514:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007516:	463b      	mov	r3, r7
 8007518:	4618      	mov	r0, r3
 800751a:	f002 ff3f 	bl	800a39c <HAL_RCCEx_PeriphCLKConfig>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8007524:	f000 fa0c 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8007528:	bf00      	nop
 800752a:	3750      	adds	r7, #80	; 0x50
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007534:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <MX_I2C1_Init+0x78>)
 8007538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800753a:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <MX_I2C1_Init+0x74>)
 800753c:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <MX_I2C1_Init+0x7c>)
 800753e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007542:	2200      	movs	r2, #0
 8007544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007546:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007548:	2201      	movs	r2, #1
 800754a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800754c:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <MX_I2C1_Init+0x74>)
 800754e:	2200      	movs	r2, #0
 8007550:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007554:	2200      	movs	r2, #0
 8007556:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007558:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <MX_I2C1_Init+0x74>)
 800755a:	2200      	movs	r2, #0
 800755c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800755e:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007560:	2200      	movs	r2, #0
 8007562:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007564:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007566:	2200      	movs	r2, #0
 8007568:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800756a:	480e      	ldr	r0, [pc, #56]	; (80075a4 <MX_I2C1_Init+0x74>)
 800756c:	f001 f98c 	bl	8008888 <HAL_I2C_Init>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007576:	f000 f9e3 	bl	8007940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800757a:	2100      	movs	r1, #0
 800757c:	4809      	ldr	r0, [pc, #36]	; (80075a4 <MX_I2C1_Init+0x74>)
 800757e:	f001 fa1e 	bl	80089be <HAL_I2CEx_ConfigAnalogFilter>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007588:	f000 f9da 	bl	8007940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800758c:	2100      	movs	r1, #0
 800758e:	4805      	ldr	r0, [pc, #20]	; (80075a4 <MX_I2C1_Init+0x74>)
 8007590:	f001 fa60 	bl	8008a54 <HAL_I2CEx_ConfigDigitalFilter>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800759a:	f000 f9d1 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800759e:	bf00      	nop
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	2000015c 	.word	0x2000015c
 80075a8:	40005400 	.word	0x40005400
 80075ac:	00707cbb 	.word	0x00707cbb

080075b0 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80075be:	b480      	push	{r7}
 80075c0:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80075c2:	bf00      	nop
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80075d0:	4b11      	ldr	r3, [pc, #68]	; (8007618 <MX_RTC_Init+0x4c>)
 80075d2:	4a12      	ldr	r2, [pc, #72]	; (800761c <MX_RTC_Init+0x50>)
 80075d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <MX_RTC_Init+0x4c>)
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <MX_RTC_Init+0x4c>)
 80075de:	220f      	movs	r2, #15
 80075e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80075e2:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <MX_RTC_Init+0x4c>)
 80075e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80075e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80075ea:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <MX_RTC_Init+0x4c>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80075f0:	4b09      	ldr	r3, [pc, #36]	; (8007618 <MX_RTC_Init+0x4c>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80075f6:	4b08      	ldr	r3, [pc, #32]	; (8007618 <MX_RTC_Init+0x4c>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <MX_RTC_Init+0x4c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007602:	4805      	ldr	r0, [pc, #20]	; (8007618 <MX_RTC_Init+0x4c>)
 8007604:	f003 f958 	bl	800a8b8 <HAL_RTC_Init>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800760e:	f000 f997 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200001b0 	.word	0x200001b0
 800761c:	40002800 	.word	0x40002800

08007620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <MX_SPI1_Init+0x6c>)
 8007626:	4a1a      	ldr	r2, [pc, #104]	; (8007690 <MX_SPI1_Init+0x70>)
 8007628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800762a:	4b18      	ldr	r3, [pc, #96]	; (800768c <MX_SPI1_Init+0x6c>)
 800762c:	2200      	movs	r2, #0
 800762e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007630:	4b16      	ldr	r3, [pc, #88]	; (800768c <MX_SPI1_Init+0x6c>)
 8007632:	2200      	movs	r2, #0
 8007634:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007636:	4b15      	ldr	r3, [pc, #84]	; (800768c <MX_SPI1_Init+0x6c>)
 8007638:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800763c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <MX_SPI1_Init+0x6c>)
 8007640:	2200      	movs	r2, #0
 8007642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <MX_SPI1_Init+0x6c>)
 8007646:	2200      	movs	r2, #0
 8007648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800764a:	4b10      	ldr	r3, [pc, #64]	; (800768c <MX_SPI1_Init+0x6c>)
 800764c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007650:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007652:	4b0e      	ldr	r3, [pc, #56]	; (800768c <MX_SPI1_Init+0x6c>)
 8007654:	2200      	movs	r2, #0
 8007656:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <MX_SPI1_Init+0x6c>)
 800765a:	2200      	movs	r2, #0
 800765c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <MX_SPI1_Init+0x6c>)
 8007660:	2200      	movs	r2, #0
 8007662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <MX_SPI1_Init+0x6c>)
 8007666:	2207      	movs	r2, #7
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <MX_SPI1_Init+0x6c>)
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007670:	4b06      	ldr	r3, [pc, #24]	; (800768c <MX_SPI1_Init+0x6c>)
 8007672:	2200      	movs	r2, #0
 8007674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007676:	4805      	ldr	r0, [pc, #20]	; (800768c <MX_SPI1_Init+0x6c>)
 8007678:	f003 fa1e 	bl	800aab8 <HAL_SPI_Init>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8007682:	f000 f95d 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	200001d4 	.word	0x200001d4
 8007690:	40013000 	.word	0x40013000

08007694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007698:	4b23      	ldr	r3, [pc, #140]	; (8007728 <MX_USART1_UART_Init+0x94>)
 800769a:	4a24      	ldr	r2, [pc, #144]	; (800772c <MX_USART1_UART_Init+0x98>)
 800769c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800769e:	4b22      	ldr	r3, [pc, #136]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80076a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80076a6:	4b20      	ldr	r3, [pc, #128]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80076ae:	4b1e      	ldr	r3, [pc, #120]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076bc:	220c      	movs	r2, #12
 80076be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80076c6:	4b18      	ldr	r3, [pc, #96]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80076cc:	4b16      	ldr	r3, [pc, #88]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076d8:	4b13      	ldr	r3, [pc, #76]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076da:	2200      	movs	r2, #0
 80076dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80076de:	4812      	ldr	r0, [pc, #72]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076e0:	f003 ff20 	bl	800b524 <HAL_UART_Init>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80076ea:	f000 f929 	bl	8007940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076ee:	2100      	movs	r1, #0
 80076f0:	480d      	ldr	r0, [pc, #52]	; (8007728 <MX_USART1_UART_Init+0x94>)
 80076f2:	f004 fbe1 	bl	800beb8 <HAL_UARTEx_SetTxFifoThreshold>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80076fc:	f000 f920 	bl	8007940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007700:	2100      	movs	r1, #0
 8007702:	4809      	ldr	r0, [pc, #36]	; (8007728 <MX_USART1_UART_Init+0x94>)
 8007704:	f004 fc16 	bl	800bf34 <HAL_UARTEx_SetRxFifoThreshold>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800770e:	f000 f917 	bl	8007940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007712:	4805      	ldr	r0, [pc, #20]	; (8007728 <MX_USART1_UART_Init+0x94>)
 8007714:	f004 fb97 	bl	800be46 <HAL_UARTEx_DisableFifoMode>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800771e:	f000 f90f 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20000238 	.word	0x20000238
 800772c:	40013800 	.word	0x40013800

08007730 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007734:	4b10      	ldr	r3, [pc, #64]	; (8007778 <MX_USB_PCD_Init+0x48>)
 8007736:	4a11      	ldr	r2, [pc, #68]	; (800777c <MX_USB_PCD_Init+0x4c>)
 8007738:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <MX_USB_PCD_Init+0x48>)
 800773c:	2208      	movs	r2, #8
 800773e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <MX_USB_PCD_Init+0x48>)
 8007742:	2202      	movs	r2, #2
 8007744:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <MX_USB_PCD_Init+0x48>)
 8007748:	2202      	movs	r2, #2
 800774a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <MX_USB_PCD_Init+0x48>)
 800774e:	2200      	movs	r2, #0
 8007750:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007752:	4b09      	ldr	r3, [pc, #36]	; (8007778 <MX_USB_PCD_Init+0x48>)
 8007754:	2200      	movs	r2, #0
 8007756:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <MX_USB_PCD_Init+0x48>)
 800775a:	2200      	movs	r2, #0
 800775c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <MX_USB_PCD_Init+0x48>)
 8007760:	2200      	movs	r2, #0
 8007762:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007764:	4804      	ldr	r0, [pc, #16]	; (8007778 <MX_USB_PCD_Init+0x48>)
 8007766:	f001 f9c1 	bl	8008aec <HAL_PCD_Init>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8007770:	f000 f8e6 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007774:	bf00      	nop
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200002cc 	.word	0x200002cc
 800777c:	40006800 	.word	0x40006800

08007780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007786:	1d3b      	adds	r3, r7, #4
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	60da      	str	r2, [r3, #12]
 8007792:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007794:	2004      	movs	r0, #4
 8007796:	f7ff fddd 	bl	8007354 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800779a:	2002      	movs	r0, #2
 800779c:	f7ff fdda 	bl	8007354 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7ff fdd7 	bl	8007354 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80077a6:	2008      	movs	r0, #8
 80077a8:	f7ff fdd4 	bl	8007354 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80077ac:	2200      	movs	r2, #0
 80077ae:	2123      	movs	r1, #35	; 0x23
 80077b0:	4814      	ldr	r0, [pc, #80]	; (8007804 <MX_GPIO_Init+0x84>)
 80077b2:	f001 f82d 	bl	8008810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80077b6:	2310      	movs	r3, #16
 80077b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80077c2:	1d3b      	adds	r3, r7, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4810      	ldr	r0, [pc, #64]	; (8007808 <MX_GPIO_Init+0x88>)
 80077c8:	f000 feb2 	bl	8008530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80077cc:	2323      	movs	r3, #35	; 0x23
 80077ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077d0:	2301      	movs	r3, #1
 80077d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077dc:	1d3b      	adds	r3, r7, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4808      	ldr	r0, [pc, #32]	; (8007804 <MX_GPIO_Init+0x84>)
 80077e2:	f000 fea5 	bl	8008530 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80077e6:	2303      	movs	r3, #3
 80077e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077f2:	1d3b      	adds	r3, r7, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4805      	ldr	r0, [pc, #20]	; (800780c <MX_GPIO_Init+0x8c>)
 80077f8:	f000 fe9a 	bl	8008530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80077fc:	bf00      	nop
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	48000400 	.word	0x48000400
 8007808:	48000800 	.word	0x48000800
 800780c:	48000c00 	.word	0x48000c00

08007810 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007814:	4b22      	ldr	r3, [pc, #136]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007816:	4a23      	ldr	r2, [pc, #140]	; (80078a4 <MX_LPUART1_UART_Init+0x94>)
 8007818:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800781c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007820:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007822:	4b1f      	ldr	r3, [pc, #124]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007824:	2200      	movs	r2, #0
 8007826:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007828:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800782a:	2200      	movs	r2, #0
 800782c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007830:	2200      	movs	r2, #0
 8007832:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007836:	220c      	movs	r2, #12
 8007838:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800783c:	2200      	movs	r2, #0
 800783e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007842:	2200      	movs	r2, #0
 8007844:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007848:	2200      	movs	r2, #0
 800784a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800784c:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800784e:	2200      	movs	r2, #0
 8007850:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8007852:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 8007854:	2200      	movs	r2, #0
 8007856:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007858:	4811      	ldr	r0, [pc, #68]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800785a:	f003 fe63 	bl	800b524 <HAL_UART_Init>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8007864:	f000 f86c 	bl	8007940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007868:	2100      	movs	r1, #0
 800786a:	480d      	ldr	r0, [pc, #52]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800786c:	f004 fb24 	bl	800beb8 <HAL_UARTEx_SetTxFifoThreshold>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007876:	f000 f863 	bl	8007940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800787a:	2100      	movs	r1, #0
 800787c:	4808      	ldr	r0, [pc, #32]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800787e:	f004 fb59 	bl	800bf34 <HAL_UARTEx_SetRxFifoThreshold>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007888:	f000 f85a 	bl	8007940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800788c:	4804      	ldr	r0, [pc, #16]	; (80078a0 <MX_LPUART1_UART_Init+0x90>)
 800788e:	f004 fada 	bl	800be46 <HAL_UARTEx_DisableFifoMode>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007898:	f000 f852 	bl	8007940 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800789c:	bf00      	nop
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200005c0 	.word	0x200005c0
 80078a4:	40008000 	.word	0x40008000

080078a8 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* Turn 1 on: Transfer in transmission process is complete */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80078b0:	2201      	movs	r2, #1
 80078b2:	2120      	movs	r1, #32
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <HAL_SPI_TxRxCpltCallback+0x34>)
 80078b6:	f000 ffab 	bl	8008810 <HAL_GPIO_WritePin>
  /* Turn 2 on: Transfer in reception process is complete */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80078ba:	2201      	movs	r2, #1
 80078bc:	2101      	movs	r1, #1
 80078be:	4807      	ldr	r0, [pc, #28]	; (80078dc <HAL_SPI_TxRxCpltCallback+0x34>)
 80078c0:	f000 ffa6 	bl	8008810 <HAL_GPIO_WritePin>
	wTransferState = TRANSFER_COMPLETE;
 80078c4:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <HAL_SPI_TxRxCpltCallback+0x38>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
	UTIL_SEQ_SetTask(1U << CFG_TASK_SPI_read, CFG_SCH_PRIO_0);
 80078ca:	2100      	movs	r1, #0
 80078cc:	2010      	movs	r0, #16
 80078ce:	f008 fe85 	bl	80105dc <UTIL_SEQ_SetTask>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	48000400 	.word	0x48000400
 80078e0:	20000660 	.word	0x20000660

080078e4 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <HAL_SPI_ErrorCallback+0x1c>)
 80078ee:	2202      	movs	r2, #2
 80078f0:	601a      	str	r2, [r3, #0]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000660 	.word	0x20000660

08007904 <APP_SPIread_Process>:


void APP_SPIread_Process(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
	if (wTransferState == TRANSFER_COMPLETE){
 8007908:	4b09      	ldr	r3, [pc, #36]	; (8007930 <APP_SPIread_Process+0x2c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10d      	bne.n	800792c <APP_SPIread_Process+0x28>
	      /*##-Read Buffer  ##############################*/
		wTransferState = TRANSFER_WAIT;
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <APP_SPIread_Process+0x2c>)
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
	    	if (HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8007916:	230c      	movs	r3, #12
 8007918:	4a06      	ldr	r2, [pc, #24]	; (8007934 <APP_SPIread_Process+0x30>)
 800791a:	4907      	ldr	r1, [pc, #28]	; (8007938 <APP_SPIread_Process+0x34>)
 800791c:	4807      	ldr	r0, [pc, #28]	; (800793c <APP_SPIread_Process+0x38>)
 800791e:	f003 f96f 	bl	800ac00 <HAL_SPI_TransmitReceive_IT>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <APP_SPIread_Process+0x28>
	    	  {
	    	    /* Transfer error in transmission process */
	    	    Error_Handler();
 8007928:	f000 f80a 	bl	8007940 <Error_Handler>
	    	  }
	    }
}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000660 	.word	0x20000660
 8007934:	20000654 	.word	0x20000654
 8007938:	20000008 	.word	0x20000008
 800793c:	200001d4 	.word	0x200001d4

08007940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007944:	b672      	cpsid	i
}
 8007946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007948:	e7fe      	b.n	8007948 <Error_Handler+0x8>

0800794a <LL_RCC_EnableRTC>:
{
 800794a:	b480      	push	{r7}
 800794c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800794e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800795a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <LL_AHB2_GRP1_EnableClock>:
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800797a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4313      	orrs	r3, r2
 8007982:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4013      	ands	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007990:	68fb      	ldr	r3, [r7, #12]
}
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <LL_AHB3_GRP1_EnableClock>:
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80079a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80079b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4013      	ands	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80079c2:	68fb      	ldr	r3, [r7, #12]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80079d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80079e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4013      	ands	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80079f4:	68fb      	ldr	r3, [r7, #12]
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4013      	ands	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8007a38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007a3c:	f7ff ffaf 	bl	800799e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8007a40:	2200      	movs	r2, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	202e      	movs	r0, #46	; 0x2e
 8007a46:	f000 fcc4 	bl	80083d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8007a4a:	202e      	movs	r0, #46	; 0x2e
 8007a4c:	f000 fcdb 	bl	8008406 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a50:	bf00      	nop
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b09c      	sub	sp, #112	; 0x70
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	60da      	str	r2, [r3, #12]
 8007a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	2250      	movs	r2, #80	; 0x50
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f009 f8a2 	bl	8010bbe <memset>
  if(hi2c->Instance==I2C1)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a17      	ldr	r2, [pc, #92]	; (8007adc <HAL_I2C_MspInit+0x88>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d126      	bne.n	8007ad2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007a84:	2304      	movs	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007a88:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	4618      	mov	r0, r3
 8007a94:	f002 fc82 	bl	800a39c <HAL_RCCEx_PeriphCLKConfig>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007a9e:	f7ff ff4f 	bl	8007940 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aa2:	2002      	movs	r0, #2
 8007aa4:	f7ff ff62 	bl	800796c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007aa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007aac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007aae:	2312      	movs	r3, #18
 8007ab0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007aba:	2304      	movs	r3, #4
 8007abc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007abe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4806      	ldr	r0, [pc, #24]	; (8007ae0 <HAL_I2C_MspInit+0x8c>)
 8007ac6:	f000 fd33 	bl	8008530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007aca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007ace:	f7ff ff7f 	bl	80079d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007ad2:	bf00      	nop
 8007ad4:	3770      	adds	r7, #112	; 0x70
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40005400 	.word	0x40005400
 8007ae0:	48000400 	.word	0x48000400

08007ae4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b096      	sub	sp, #88	; 0x58
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007aec:	f107 0308 	add.w	r3, r7, #8
 8007af0:	2250      	movs	r2, #80	; 0x50
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f009 f862 	bl	8010bbe <memset>
  if(hrtc->Instance==RTC)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a0e      	ldr	r2, [pc, #56]	; (8007b38 <HAL_RTC_MspInit+0x54>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d115      	bne.n	8007b30 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b0e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b10:	f107 0308 	add.w	r3, r7, #8
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 fc41 	bl	800a39c <HAL_RCCEx_PeriphCLKConfig>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8007b20:	f7ff ff0e 	bl	8007940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007b24:	f7ff ff11 	bl	800794a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007b28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007b2c:	f7ff ff50 	bl	80079d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007b30:	bf00      	nop
 8007b32:	3758      	adds	r7, #88	; 0x58
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40002800 	.word	0x40002800

08007b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b44:	f107 030c 	add.w	r3, r7, #12
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	609a      	str	r2, [r3, #8]
 8007b50:	60da      	str	r2, [r3, #12]
 8007b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <HAL_SPI_MspInit+0x8c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d130      	bne.n	8007bc0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b62:	f7ff ff4e 	bl	8007a02 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b66:	2001      	movs	r0, #1
 8007b68:	f7ff ff00 	bl	800796c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007b6c:	2360      	movs	r3, #96	; 0x60
 8007b6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b70:	2302      	movs	r3, #2
 8007b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b7c:	2305      	movs	r3, #5
 8007b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b80:	f107 030c 	add.w	r3, r7, #12
 8007b84:	4619      	mov	r1, r3
 8007b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b8a:	f000 fcd1 	bl	8008530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007b8e:	2380      	movs	r3, #128	; 0x80
 8007b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b92:	2302      	movs	r3, #2
 8007b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007b96:	2302      	movs	r3, #2
 8007b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b9e:	2305      	movs	r3, #5
 8007ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba2:	f107 030c 	add.w	r3, r7, #12
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bac:	f000 fcc0 	bl	8008530 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2022      	movs	r0, #34	; 0x22
 8007bb6:	f000 fc0c 	bl	80083d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007bba:	2022      	movs	r0, #34	; 0x22
 8007bbc:	f000 fc23 	bl	8008406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007bc0:	bf00      	nop
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40013000 	.word	0x40013000

08007bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b09c      	sub	sp, #112	; 0x70
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	2250      	movs	r2, #80	; 0x50
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f008 ffe6 	bl	8010bbe <memset>
  if(huart->Instance==USART1)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a16      	ldr	r2, [pc, #88]	; (8007c50 <HAL_UART_MspInit+0x84>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d124      	bne.n	8007c46 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007c00:	2300      	movs	r3, #0
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c04:	f107 030c 	add.w	r3, r7, #12
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f002 fbc7 	bl	800a39c <HAL_RCCEx_PeriphCLKConfig>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007c14:	f7ff fe94 	bl	8007940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007c1c:	f7ff fef1 	bl	8007a02 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c20:	2002      	movs	r0, #2
 8007c22:	f7ff fea3 	bl	800796c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007c26:	23c0      	movs	r3, #192	; 0xc0
 8007c28:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c32:	2300      	movs	r3, #0
 8007c34:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007c36:	2307      	movs	r3, #7
 8007c38:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4804      	ldr	r0, [pc, #16]	; (8007c54 <HAL_UART_MspInit+0x88>)
 8007c42:	f000 fc75 	bl	8008530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c46:	bf00      	nop
 8007c48:	3770      	adds	r7, #112	; 0x70
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40013800 	.word	0x40013800
 8007c54:	48000400 	.word	0x48000400

08007c58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b09c      	sub	sp, #112	; 0x70
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	60da      	str	r2, [r3, #12]
 8007c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007c70:	f107 030c 	add.w	r3, r7, #12
 8007c74:	2250      	movs	r2, #80	; 0x50
 8007c76:	2100      	movs	r1, #0
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f008 ffa0 	bl	8010bbe <memset>
  if(hpcd->Instance==USB)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1f      	ldr	r2, [pc, #124]	; (8007d00 <HAL_PCD_MspInit+0xa8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d136      	bne.n	8007cf6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8007c8e:	2318      	movs	r3, #24
 8007c90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8007c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8007c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8007c9e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007ca2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8007ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ca8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8007caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007cae:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cb0:	f107 030c 	add.w	r3, r7, #12
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 fb71 	bl	800a39c <HAL_RCCEx_PeriphCLKConfig>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8007cc0:	f7ff fe3e 	bl	8007940 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7ff fe51 	bl	800796c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8007cdc:	230a      	movs	r3, #10
 8007cde:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cea:	f000 fc21 	bl	8008530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007cf2:	f7ff fe6d 	bl	80079d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8007cf6:	bf00      	nop
 8007cf8:	3770      	adds	r7, #112	; 0x70
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	40006800 	.word	0x40006800

08007d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d08:	e7fe      	b.n	8007d08 <NMI_Handler+0x4>

08007d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d0e:	e7fe      	b.n	8007d0e <HardFault_Handler+0x4>

08007d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d14:	e7fe      	b.n	8007d14 <MemManage_Handler+0x4>

08007d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d16:	b480      	push	{r7}
 8007d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d1a:	e7fe      	b.n	8007d1a <BusFault_Handler+0x4>

08007d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d20:	e7fe      	b.n	8007d20 <UsageFault_Handler+0x4>

08007d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d22:	b480      	push	{r7}
 8007d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d42:	bf00      	nop
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d50:	f000 f9ea 	bl	8008128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d54:	bf00      	nop
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007d5c:	f000 fd70 	bl	8008840 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007d60:	bf00      	nop
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <SPI1_IRQHandler>:

/* USER CODE BEGIN 1 */


void SPI1_IRQHandler(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007d68:	4802      	ldr	r0, [pc, #8]	; (8007d74 <SPI1_IRQHandler+0x10>)
 8007d6a:	f002 fff7 	bl	800ad5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007d6e:	bf00      	nop
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200001d4 	.word	0x200001d4

08007d78 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
    HW_IPCC_Tx_Handler();
 8007d7c:	f008 f93e 	bl	800fffc <HW_IPCC_Tx_Handler>

    return;
 8007d80:	bf00      	nop
}
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
    HW_IPCC_Rx_Handler();
 8007d88:	f008 f8e2 	bl	800ff50 <HW_IPCC_Rx_Handler>
    return;
 8007d8c:	bf00      	nop
}
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8007d90:	b40c      	push	{r2, r3}
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	4603      	mov	r3, r0
 8007d9a:	460a      	mov	r2, r1
 8007d9c:	71fb      	strb	r3, [r7, #7]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	b002      	add	sp, #8
 8007dae:	4770      	bx	lr

08007db0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  return 1;
 8007db4:	2301      	movs	r3, #1
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <_kill>:

int _kill(int pid, int sig)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007dca:	f008 ff63 	bl	8010c94 <__errno>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2216      	movs	r2, #22
 8007dd2:	601a      	str	r2, [r3, #0]
  return -1;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <_exit>:

void _exit (int status)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007de8:	f04f 31ff 	mov.w	r1, #4294967295
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ffe7 	bl	8007dc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007df2:	e7fe      	b.n	8007df2 <_exit+0x12>

08007df4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e00a      	b.n	8007e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007e06:	f3af 8000 	nop.w
 8007e0a:	4601      	mov	r1, r0
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	60ba      	str	r2, [r7, #8]
 8007e12:	b2ca      	uxtb	r2, r1
 8007e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	dbf0      	blt.n	8007e06 <_read+0x12>
  }

  return len;
 8007e24:	687b      	ldr	r3, [r7, #4]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e009      	b.n	8007e54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	60ba      	str	r2, [r7, #8]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	3301      	adds	r3, #1
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	dbf1      	blt.n	8007e40 <_write+0x12>
  }
  return len;
 8007e5c:	687b      	ldr	r3, [r7, #4]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <_close>:

int _close(int file)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e8e:	605a      	str	r2, [r3, #4]
  return 0;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <_isatty>:

int _isatty(int file)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007ea6:	2301      	movs	r3, #1
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ed8:	4a14      	ldr	r2, [pc, #80]	; (8007f2c <_sbrk+0x5c>)
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <_sbrk+0x60>)
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ee4:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <_sbrk+0x64>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007eec:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <_sbrk+0x64>)
 8007eee:	4a12      	ldr	r2, [pc, #72]	; (8007f38 <_sbrk+0x68>)
 8007ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007ef2:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <_sbrk+0x64>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d207      	bcs.n	8007f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f00:	f008 fec8 	bl	8010c94 <__errno>
 8007f04:	4603      	mov	r3, r0
 8007f06:	220c      	movs	r2, #12
 8007f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0e:	e009      	b.n	8007f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f10:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <_sbrk+0x64>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f16:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <_sbrk+0x64>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4a05      	ldr	r2, [pc, #20]	; (8007f34 <_sbrk+0x64>)
 8007f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f22:	68fb      	ldr	r3, [r7, #12]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20030000 	.word	0x20030000
 8007f30:	00000400 	.word	0x00000400
 8007f34:	20000664 	.word	0x20000664
 8007f38:	20000af0 	.word	0x20000af0

08007f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8007f40:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <SystemInit+0x98>)
 8007f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f46:	4a23      	ldr	r2, [pc, #140]	; (8007fd4 <SystemInit+0x98>)
 8007f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f64:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007f68:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f74:	4b18      	ldr	r3, [pc, #96]	; (8007fd8 <SystemInit+0x9c>)
 8007f76:	4013      	ands	r3, r2
 8007f78:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f86:	f023 0305 	bic.w	r3, r3, #5
 8007f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa6:	4a0d      	ldr	r2, [pc, #52]	; (8007fdc <SystemInit+0xa0>)
 8007fa8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fae:	4a0b      	ldr	r2, [pc, #44]	; (8007fdc <SystemInit+0xa0>)
 8007fb0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	619a      	str	r2, [r3, #24]
}
 8007fca:	bf00      	nop
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	e000ed00 	.word	0xe000ed00
 8007fd8:	faf6fefb 	.word	0xfaf6fefb
 8007fdc:	22041000 	.word	0x22041000

08007fe0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007fe0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fe2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fe4:	3304      	adds	r3, #4

08007fe6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007fe6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007fe8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007fea:	d3f9      	bcc.n	8007fe0 <CopyDataInit>
  bx lr
 8007fec:	4770      	bx	lr

08007fee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007fee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007ff0:	3004      	adds	r0, #4

08007ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007ff2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007ff4:	d3fb      	bcc.n	8007fee <FillZerobss>
  bx lr
 8007ff6:	4770      	bx	lr

08007ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007ff8:	480c      	ldr	r0, [pc, #48]	; (800802c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007ffa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007ffc:	f7ff ff9e 	bl	8007f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8008000:	480b      	ldr	r0, [pc, #44]	; (8008030 <LoopForever+0x6>)
 8008002:	490c      	ldr	r1, [pc, #48]	; (8008034 <LoopForever+0xa>)
 8008004:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <LoopForever+0xe>)
 8008006:	2300      	movs	r3, #0
 8008008:	f7ff ffed 	bl	8007fe6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800800c:	480b      	ldr	r0, [pc, #44]	; (800803c <LoopForever+0x12>)
 800800e:	490c      	ldr	r1, [pc, #48]	; (8008040 <LoopForever+0x16>)
 8008010:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <LoopForever+0x1a>)
 8008012:	2300      	movs	r3, #0
 8008014:	f7ff ffe7 	bl	8007fe6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8008018:	480b      	ldr	r0, [pc, #44]	; (8008048 <LoopForever+0x1e>)
 800801a:	490c      	ldr	r1, [pc, #48]	; (800804c <LoopForever+0x22>)
 800801c:	2300      	movs	r3, #0
 800801e:	f7ff ffe8 	bl	8007ff2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008022:	f008 fe3d 	bl	8010ca0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008026:	f7ff f9af 	bl	8007388 <main>

0800802a <LoopForever>:

LoopForever:
  b LoopForever
 800802a:	e7fe      	b.n	800802a <LoopForever>
  ldr   r0, =_estack
 800802c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8008030:	20000008 	.word	0x20000008
 8008034:	2000008c 	.word	0x2000008c
 8008038:	08012500 	.word	0x08012500
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800803c:	200300e4 	.word	0x200300e4
 8008040:	20030b5a 	.word	0x20030b5a
 8008044:	08012595 	.word	0x08012595
  INIT_BSS _sbss, _ebss
 8008048:	200000a0 	.word	0x200000a0
 800804c:	20000aec 	.word	0x20000aec

08008050 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008050:	e7fe      	b.n	8008050 <ADC1_IRQHandler>
	...

08008054 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	4a04      	ldr	r2, [pc, #16]	; (8008070 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	6053      	str	r3, [r2, #4]
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	e0042000 	.word	0xe0042000

08008074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <HAL_Init+0x3c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a0b      	ldr	r2, [pc, #44]	; (80080b0 <HAL_Init+0x3c>)
 8008084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008088:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800808a:	2003      	movs	r0, #3
 800808c:	f000 f996 	bl	80083bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008090:	2000      	movs	r0, #0
 8008092:	f000 f80f 	bl	80080b4 <HAL_InitTick>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	71fb      	strb	r3, [r7, #7]
 80080a0:	e001      	b.n	80080a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80080a2:	f7ff fcc7 	bl	8007a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80080a6:	79fb      	ldrb	r3, [r7, #7]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	58004000 	.word	0x58004000

080080b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80080c0:	4b17      	ldr	r3, [pc, #92]	; (8008120 <HAL_InitTick+0x6c>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d024      	beq.n	8008112 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80080c8:	f001 fec8 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 80080cc:	4602      	mov	r2, r0
 80080ce:	4b14      	ldr	r3, [pc, #80]	; (8008120 <HAL_InitTick+0x6c>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	4619      	mov	r1, r3
 80080d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80080dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f99e 	bl	8008422 <HAL_SYSTICK_Config>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10f      	bne.n	800810c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d809      	bhi.n	8008106 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080f2:	2200      	movs	r2, #0
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295
 80080fa:	f000 f96a 	bl	80083d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80080fe:	4a09      	ldr	r2, [pc, #36]	; (8008124 <HAL_InitTick+0x70>)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e007      	b.n	8008116 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	73fb      	strb	r3, [r7, #15]
 800810a:	e004      	b.n	8008116 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	e001      	b.n	8008116 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000020 	.word	0x20000020
 8008124:	2000001c 	.word	0x2000001c

08008128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <HAL_IncTick+0x20>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	4b06      	ldr	r3, [pc, #24]	; (800814c <HAL_IncTick+0x24>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4413      	add	r3, r2
 8008138:	4a04      	ldr	r2, [pc, #16]	; (800814c <HAL_IncTick+0x24>)
 800813a:	6013      	str	r3, [r2, #0]
}
 800813c:	bf00      	nop
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20000020 	.word	0x20000020
 800814c:	20000668 	.word	0x20000668

08008150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  return uwTick;
 8008154:	4b03      	ldr	r3, [pc, #12]	; (8008164 <HAL_GetTick+0x14>)
 8008156:	681b      	ldr	r3, [r3, #0]
}
 8008158:	4618      	mov	r0, r3
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000668 	.word	0x20000668

08008168 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800816c:	4b03      	ldr	r3, [pc, #12]	; (800817c <HAL_GetTickPrio+0x14>)
 800816e:	681b      	ldr	r3, [r3, #0]
}
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	2000001c 	.word	0x2000001c

08008180 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8008184:	4b03      	ldr	r3, [pc, #12]	; (8008194 <HAL_GetTickFreq+0x14>)
 8008186:	781b      	ldrb	r3, [r3, #0]
}
 8008188:	4618      	mov	r0, r3
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000020 	.word	0x20000020

08008198 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800819c:	f7ff ff5a 	bl	8008054 <LL_DBGMCU_EnableDBGSleepMode>
}
 80081a0:	bf00      	nop
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <__NVIC_SetPriorityGrouping+0x44>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80081c0:	4013      	ands	r3, r2
 80081c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80081cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80081d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80081d6:	4a04      	ldr	r2, [pc, #16]	; (80081e8 <__NVIC_SetPriorityGrouping+0x44>)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	60d3      	str	r3, [r2, #12]
}
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	e000ed00 	.word	0xe000ed00

080081ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <__NVIC_GetPriorityGrouping+0x18>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	f003 0307 	and.w	r3, r3, #7
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	e000ed00 	.word	0xe000ed00

08008208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008216:	2b00      	cmp	r3, #0
 8008218:	db0b      	blt.n	8008232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	f003 021f 	and.w	r2, r3, #31
 8008220:	4907      	ldr	r1, [pc, #28]	; (8008240 <__NVIC_EnableIRQ+0x38>)
 8008222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	2001      	movs	r0, #1
 800822a:	fa00 f202 	lsl.w	r2, r0, r2
 800822e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e100 	.word	0xe000e100

08008244 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800824e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	db0c      	blt.n	8008270 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	f003 021f 	and.w	r2, r3, #31
 800825c:	4907      	ldr	r1, [pc, #28]	; (800827c <__NVIC_SetPendingIRQ+0x38>)
 800825e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	2001      	movs	r0, #1
 8008266:	fa00 f202 	lsl.w	r2, r0, r2
 800826a:	3340      	adds	r3, #64	; 0x40
 800826c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	e000e100 	.word	0xe000e100

08008280 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800828a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828e:	2b00      	cmp	r3, #0
 8008290:	db0c      	blt.n	80082ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	f003 021f 	and.w	r2, r3, #31
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <__NVIC_ClearPendingIRQ+0x38>)
 800829a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	2001      	movs	r0, #1
 80082a2:	fa00 f202 	lsl.w	r2, r0, r2
 80082a6:	3360      	adds	r3, #96	; 0x60
 80082a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	e000e100 	.word	0xe000e100

080082bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	db0a      	blt.n	80082e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	490c      	ldr	r1, [pc, #48]	; (8008308 <__NVIC_SetPriority+0x4c>)
 80082d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082da:	0112      	lsls	r2, r2, #4
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	440b      	add	r3, r1
 80082e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082e4:	e00a      	b.n	80082fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	4908      	ldr	r1, [pc, #32]	; (800830c <__NVIC_SetPriority+0x50>)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	3b04      	subs	r3, #4
 80082f4:	0112      	lsls	r2, r2, #4
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	440b      	add	r3, r1
 80082fa:	761a      	strb	r2, [r3, #24]
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	e000e100 	.word	0xe000e100
 800830c:	e000ed00 	.word	0xe000ed00

08008310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008310:	b480      	push	{r7}
 8008312:	b089      	sub	sp, #36	; 0x24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f1c3 0307 	rsb	r3, r3, #7
 800832a:	2b04      	cmp	r3, #4
 800832c:	bf28      	it	cs
 800832e:	2304      	movcs	r3, #4
 8008330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	3304      	adds	r3, #4
 8008336:	2b06      	cmp	r3, #6
 8008338:	d902      	bls.n	8008340 <NVIC_EncodePriority+0x30>
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	3b03      	subs	r3, #3
 800833e:	e000      	b.n	8008342 <NVIC_EncodePriority+0x32>
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008344:	f04f 32ff 	mov.w	r2, #4294967295
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	43da      	mvns	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	401a      	ands	r2, r3
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008358:	f04f 31ff 	mov.w	r1, #4294967295
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	fa01 f303 	lsl.w	r3, r1, r3
 8008362:	43d9      	mvns	r1, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008368:	4313      	orrs	r3, r2
         );
}
 800836a:	4618      	mov	r0, r3
 800836c:	3724      	adds	r7, #36	; 0x24
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
	...

08008378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3b01      	subs	r3, #1
 8008384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008388:	d301      	bcc.n	800838e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800838a:	2301      	movs	r3, #1
 800838c:	e00f      	b.n	80083ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800838e:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <SysTick_Config+0x40>)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3b01      	subs	r3, #1
 8008394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008396:	210f      	movs	r1, #15
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	f7ff ff8e 	bl	80082bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <SysTick_Config+0x40>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083a6:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <SysTick_Config+0x40>)
 80083a8:	2207      	movs	r2, #7
 80083aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	e000e010 	.word	0xe000e010

080083bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff feed 	bl	80081a4 <__NVIC_SetPriorityGrouping>
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b086      	sub	sp, #24
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	4603      	mov	r3, r0
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80083e0:	f7ff ff04 	bl	80081ec <__NVIC_GetPriorityGrouping>
 80083e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	6978      	ldr	r0, [r7, #20]
 80083ec:	f7ff ff90 	bl	8008310 <NVIC_EncodePriority>
 80083f0:	4602      	mov	r2, r0
 80083f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff ff5f 	bl	80082bc <__NVIC_SetPriority>
}
 80083fe:	bf00      	nop
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	4603      	mov	r3, r0
 800840e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fef7 	bl	8008208 <__NVIC_EnableIRQ>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff ffa4 	bl	8008378 <SysTick_Config>
 8008430:	4603      	mov	r3, r0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	4603      	mov	r3, r0
 8008442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fefb 	bl	8008244 <__NVIC_SetPendingIRQ>
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	4603      	mov	r3, r0
 800845e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff ff0b 	bl	8008280 <__NVIC_ClearPendingIRQ>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d005      	beq.n	8008496 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2204      	movs	r2, #4
 800848e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e047      	b.n	8008526 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 020e 	bic.w	r2, r2, #14
 80084a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ca:	f003 021c 	and.w	r2, r3, #28
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	2101      	movs	r1, #1
 80084d4:	fa01 f202 	lsl.w	r2, r1, r2
 80084d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00c      	beq.n	8008506 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008504:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
    }
  }
  return status;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800853e:	e14c      	b.n	80087da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	2101      	movs	r1, #1
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	fa01 f303 	lsl.w	r3, r1, r3
 800854c:	4013      	ands	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 813e 	beq.w	80087d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d005      	beq.n	8008570 <HAL_GPIO_Init+0x40>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d130      	bne.n	80085d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	2203      	movs	r2, #3
 800857c:	fa02 f303 	lsl.w	r3, r2, r3
 8008580:	43db      	mvns	r3, r3
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	4013      	ands	r3, r2
 8008586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085a6:	2201      	movs	r2, #1
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	43db      	mvns	r3, r3
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4013      	ands	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	091b      	lsrs	r3, r3, #4
 80085bc:	f003 0201 	and.w	r2, r3, #1
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f003 0303 	and.w	r3, r3, #3
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d017      	beq.n	800860e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	2203      	movs	r2, #3
 80085ea:	fa02 f303 	lsl.w	r3, r2, r3
 80085ee:	43db      	mvns	r3, r3
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	4013      	ands	r3, r2
 80085f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4313      	orrs	r3, r2
 8008606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d123      	bne.n	8008662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	08da      	lsrs	r2, r3, #3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3208      	adds	r2, #8
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	220f      	movs	r2, #15
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	43db      	mvns	r3, r3
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4013      	ands	r3, r2
 800863c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	691a      	ldr	r2, [r3, #16]
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	08da      	lsrs	r2, r3, #3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3208      	adds	r2, #8
 800865c:	6939      	ldr	r1, [r7, #16]
 800865e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	2203      	movs	r2, #3
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	43db      	mvns	r3, r3
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4013      	ands	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f003 0203 	and.w	r2, r3, #3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8098 	beq.w	80087d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80086a4:	4a54      	ldr	r2, [pc, #336]	; (80087f8 <HAL_GPIO_Init+0x2c8>)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	089b      	lsrs	r3, r3, #2
 80086aa:	3302      	adds	r3, #2
 80086ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	220f      	movs	r2, #15
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	43db      	mvns	r3, r3
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4013      	ands	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80086ce:	d019      	beq.n	8008704 <HAL_GPIO_Init+0x1d4>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a4a      	ldr	r2, [pc, #296]	; (80087fc <HAL_GPIO_Init+0x2cc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <HAL_GPIO_Init+0x1d0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a49      	ldr	r2, [pc, #292]	; (8008800 <HAL_GPIO_Init+0x2d0>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00d      	beq.n	80086fc <HAL_GPIO_Init+0x1cc>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a48      	ldr	r2, [pc, #288]	; (8008804 <HAL_GPIO_Init+0x2d4>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d007      	beq.n	80086f8 <HAL_GPIO_Init+0x1c8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a47      	ldr	r2, [pc, #284]	; (8008808 <HAL_GPIO_Init+0x2d8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d101      	bne.n	80086f4 <HAL_GPIO_Init+0x1c4>
 80086f0:	2304      	movs	r3, #4
 80086f2:	e008      	b.n	8008706 <HAL_GPIO_Init+0x1d6>
 80086f4:	2307      	movs	r3, #7
 80086f6:	e006      	b.n	8008706 <HAL_GPIO_Init+0x1d6>
 80086f8:	2303      	movs	r3, #3
 80086fa:	e004      	b.n	8008706 <HAL_GPIO_Init+0x1d6>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e002      	b.n	8008706 <HAL_GPIO_Init+0x1d6>
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <HAL_GPIO_Init+0x1d6>
 8008704:	2300      	movs	r3, #0
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	f002 0203 	and.w	r2, r2, #3
 800870c:	0092      	lsls	r2, r2, #2
 800870e:	4093      	lsls	r3, r2
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008716:	4938      	ldr	r1, [pc, #224]	; (80087f8 <HAL_GPIO_Init+0x2c8>)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	089b      	lsrs	r3, r3, #2
 800871c:	3302      	adds	r3, #2
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008724:	4b39      	ldr	r3, [pc, #228]	; (800880c <HAL_GPIO_Init+0x2dc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	43db      	mvns	r3, r3
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4013      	ands	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d003      	beq.n	8008748 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008748:	4a30      	ldr	r2, [pc, #192]	; (800880c <HAL_GPIO_Init+0x2dc>)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800874e:	4b2f      	ldr	r3, [pc, #188]	; (800880c <HAL_GPIO_Init+0x2dc>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	43db      	mvns	r3, r3
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4013      	ands	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008772:	4a26      	ldr	r2, [pc, #152]	; (800880c <HAL_GPIO_Init+0x2dc>)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008778:	4b24      	ldr	r3, [pc, #144]	; (800880c <HAL_GPIO_Init+0x2dc>)
 800877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800877e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	43db      	mvns	r3, r3
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4013      	ands	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800879e:	4a1b      	ldr	r2, [pc, #108]	; (800880c <HAL_GPIO_Init+0x2dc>)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80087a6:	4b19      	ldr	r3, [pc, #100]	; (800880c <HAL_GPIO_Init+0x2dc>)
 80087a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4013      	ands	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80087cc:	4a0f      	ldr	r2, [pc, #60]	; (800880c <HAL_GPIO_Init+0x2dc>)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3301      	adds	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f47f aeab 	bne.w	8008540 <HAL_GPIO_Init+0x10>
  }
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40010000 	.word	0x40010000
 80087fc:	48000400 	.word	0x48000400
 8008800:	48000800 	.word	0x48000800
 8008804:	48000c00 	.word	0x48000c00
 8008808:	48001000 	.word	0x48001000
 800880c:	58000800 	.word	0x58000800

08008810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	807b      	strh	r3, [r7, #2]
 800881c:	4613      	mov	r3, r2
 800881e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008820:	787b      	ldrb	r3, [r7, #1]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008826:	887a      	ldrh	r2, [r7, #2]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800882c:	e002      	b.n	8008834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800882e:	887a      	ldrh	r2, [r7, #2]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008846:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_HSEM_IRQHandler+0x30>)
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <HAL_HSEM_IRQHandler+0x30>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	43db      	mvns	r3, r3
 8008854:	4906      	ldr	r1, [pc, #24]	; (8008870 <HAL_HSEM_IRQHandler+0x30>)
 8008856:	4013      	ands	r3, r2
 8008858:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800885a:	4a05      	ldr	r2, [pc, #20]	; (8008870 <HAL_HSEM_IRQHandler+0x30>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f807 	bl	8008874 <HAL_HSEM_FreeCallback>
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	58001500 	.word	0x58001500

08008874 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e08d      	b.n	80089b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff f8d0 	bl	8007a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2224      	movs	r2, #36	; 0x24
 80088b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d107      	bne.n	8008902 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	e006      	b.n	8008910 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689a      	ldr	r2, [r3, #8]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800890e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d108      	bne.n	800892a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008926:	605a      	str	r2, [r3, #4]
 8008928:	e007      	b.n	800893a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6812      	ldr	r2, [r2, #0]
 8008944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800895c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69d9      	ldr	r1, [r3, #28]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1a      	ldr	r2, [r3, #32]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d138      	bne.n	8008a46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089de:	2302      	movs	r3, #2
 80089e0:	e032      	b.n	8008a48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	; 0x24
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e000      	b.n	8008a48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a46:	2302      	movs	r3, #2
  }
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	d139      	bne.n	8008ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e033      	b.n	8008ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2224      	movs	r2, #36	; 0x24
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0201 	bic.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f042 0201 	orr.w	r2, r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e000      	b.n	8008ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ade:	2302      	movs	r3, #2
  }
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	b08b      	sub	sp, #44	; 0x2c
 8008af0:	af06      	add	r7, sp, #24
 8008af2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e0cb      	b.n	8008c96 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff f8a0 	bl	8007c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f003 fa91 	bl	800c04c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
 8008b2e:	e040      	b.n	8008bb2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	440b      	add	r3, r1
 8008b40:	3301      	adds	r3, #1
 8008b42:	2201      	movs	r2, #1
 8008b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	440b      	add	r3, r1
 8008b56:	7bfa      	ldrb	r2, [r7, #15]
 8008b58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	440b      	add	r3, r1
 8008b6a:	3303      	adds	r3, #3
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008b70:	7bfa      	ldrb	r2, [r7, #15]
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	440b      	add	r3, r1
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008b84:	7bfa      	ldrb	r2, [r7, #15]
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	440b      	add	r3, r1
 8008b92:	333c      	adds	r3, #60	; 0x3c
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b98:	7bfa      	ldrb	r2, [r7, #15]
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3340      	adds	r3, #64	; 0x40
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
 8008bb2:	7bfa      	ldrb	r2, [r7, #15]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d3b9      	bcc.n	8008b30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
 8008bc0:	e044      	b.n	8008c4c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008bc2:	7bfa      	ldrb	r2, [r7, #15]
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	440b      	add	r3, r1
 8008bd0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008bd8:	7bfa      	ldrb	r2, [r7, #15]
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	440b      	add	r3, r1
 8008be6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008bea:	7bfa      	ldrb	r2, [r7, #15]
 8008bec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008bee:	7bfa      	ldrb	r2, [r7, #15]
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	440b      	add	r3, r1
 8008bfc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008c04:	7bfa      	ldrb	r2, [r7, #15]
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	440b      	add	r3, r1
 8008c12:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008c1a:	7bfa      	ldrb	r2, [r7, #15]
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	440b      	add	r3, r1
 8008c28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c30:	7bfa      	ldrb	r2, [r7, #15]
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	440b      	add	r3, r1
 8008c3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
 8008c4c:	7bfa      	ldrb	r2, [r7, #15]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d3b5      	bcc.n	8008bc2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	687e      	ldr	r6, [r7, #4]
 8008c5e:	466d      	mov	r5, sp
 8008c60:	f106 0410 	add.w	r4, r6, #16
 8008c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	1d33      	adds	r3, r6, #4
 8008c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c70:	6838      	ldr	r0, [r7, #0]
 8008c72:	f003 fa06 	bl	800c082 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d102      	bne.n	8008c94 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f805 	bl	8008c9e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c9e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a04      	ldr	r2, [pc, #16]	; (8008d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d02:	6013      	str	r3, [r2, #0]
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	58000400 	.word	0x58000400

08008d14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	58000400 	.word	0x58000400

08008d30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d42:	d101      	bne.n	8008d48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <LL_RCC_HSE_Enable>:
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d66:	6013      	str	r3, [r2, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <LL_RCC_HSE_Disable>:
{
 8008d72:	b480      	push	{r7}
 8008d74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d84:	6013      	str	r3, [r2, #0]
}
 8008d86:	bf00      	nop
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <LL_RCC_HSE_IsReady>:
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da2:	d101      	bne.n	8008da8 <LL_RCC_HSE_IsReady+0x18>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <LL_RCC_HSE_IsReady+0x1a>
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <LL_RCC_HSI_Enable>:
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <LL_RCC_HSI_Disable>:
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008de4:	6013      	str	r3, [r2, #0]
}
 8008de6:	bf00      	nop
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <LL_RCC_HSI_IsReady>:
{
 8008df0:	b480      	push	{r7}
 8008df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e02:	d101      	bne.n	8008e08 <LL_RCC_HSI_IsReady+0x18>
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <LL_RCC_HSI_IsReady+0x1a>
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	061b      	lsls	r3, r3, #24
 8008e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	604b      	str	r3, [r1, #4]
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <LL_RCC_HSI48_Enable>:
{
 8008e3e:	b480      	push	{r7}
 8008e40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008e56:	bf00      	nop
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <LL_RCC_HSI48_Disable>:
{
 8008e60:	b480      	push	{r7}
 8008e62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e70:	f023 0301 	bic.w	r3, r3, #1
 8008e74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8008e78:	bf00      	nop
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <LL_RCC_HSI48_IsReady>:
{
 8008e82:	b480      	push	{r7}
 8008e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d101      	bne.n	8008e9a <LL_RCC_HSI48_IsReady+0x18>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <LL_RCC_HSI48_IsReady+0x1a>
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <LL_RCC_LSE_Enable>:
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008ebe:	bf00      	nop
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <LL_RCC_LSE_Disable>:
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008ee0:	bf00      	nop
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <LL_RCC_LSE_EnableBypass>:
{
 8008eea:	b480      	push	{r7}
 8008eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008efa:	f043 0304 	orr.w	r3, r3, #4
 8008efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f02:	bf00      	nop
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <LL_RCC_LSE_DisableBypass>:
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f1c:	f023 0304 	bic.w	r3, r3, #4
 8008f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f24:	bf00      	nop
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <LL_RCC_LSE_IsReady>:
{
 8008f2e:	b480      	push	{r7}
 8008f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d101      	bne.n	8008f46 <LL_RCC_LSE_IsReady+0x18>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <LL_RCC_LSE_IsReady+0x1a>
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <LL_RCC_LSI1_Enable>:
{
 8008f52:	b480      	push	{r7}
 8008f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f62:	f043 0301 	orr.w	r3, r3, #1
 8008f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008f6a:	bf00      	nop
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <LL_RCC_LSI1_Disable>:
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008f8c:	bf00      	nop
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <LL_RCC_LSI1_IsReady>:
{
 8008f96:	b480      	push	{r7}
 8008f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d101      	bne.n	8008fae <LL_RCC_LSI1_IsReady+0x18>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <LL_RCC_LSI1_IsReady+0x1a>
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <LL_RCC_LSI2_Enable>:
{
 8008fba:	b480      	push	{r7}
 8008fbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fca:	f043 0304 	orr.w	r3, r3, #4
 8008fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008fd2:	bf00      	nop
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <LL_RCC_LSI2_Disable>:
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fec:	f023 0304 	bic.w	r3, r3, #4
 8008ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <LL_RCC_LSI2_IsReady>:
{
 8008ffe:	b480      	push	{r7}
 8009000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8009002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b08      	cmp	r3, #8
 8009010:	d101      	bne.n	8009016 <LL_RCC_LSI2_IsReady+0x18>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <LL_RCC_LSI2_IsReady+0x1a>
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <LL_RCC_LSI2_SetTrimming>:
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800902a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009032:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <LL_RCC_MSI_Enable>:
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	6013      	str	r3, [r2, #0]
}
 8009064:	bf00      	nop
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <LL_RCC_MSI_Disable>:
{
 800906e:	b480      	push	{r7}
 8009070:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800907c:	f023 0301 	bic.w	r3, r3, #1
 8009080:	6013      	str	r3, [r2, #0]
}
 8009082:	bf00      	nop
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <LL_RCC_MSI_IsReady>:
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b02      	cmp	r3, #2
 800909c:	d101      	bne.n	80090a2 <LL_RCC_MSI_IsReady+0x16>
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <LL_RCC_MSI_IsReady+0x18>
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <LL_RCC_MSI_SetRange>:
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80090b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <LL_RCC_MSI_GetRange>:
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80090dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2bb0      	cmp	r3, #176	; 0xb0
 80090ec:	d901      	bls.n	80090f2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80090ee:	23b0      	movs	r3, #176	; 0xb0
 80090f0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80090f2:	687b      	ldr	r3, [r7, #4]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800911a:	4313      	orrs	r3, r2
 800911c:	604b      	str	r3, [r1, #4]
}
 800911e:	bf00      	nop
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <LL_RCC_SetSysClkSource>:
{
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f023 0203 	bic.w	r2, r3, #3
 800913c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4313      	orrs	r3, r2
 8009144:	608b      	str	r3, [r1, #8]
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <LL_RCC_GetSysClkSource>:
{
 8009152:	b480      	push	{r7}
 8009154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f003 030c 	and.w	r3, r3, #12
}
 8009160:	4618      	mov	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <LL_RCC_SetAHBPrescaler>:
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800917c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4313      	orrs	r3, r2
 8009184:	608b      	str	r3, [r1, #8]
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <LL_C2_RCC_SetAHBPrescaler>:
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800919a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800919e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80091a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <LL_RCC_SetAHB4Prescaler>:
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80091c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80091ce:	f023 020f 	bic.w	r2, r3, #15
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091da:	4313      	orrs	r3, r2
 80091dc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <LL_RCC_SetAPB1Prescaler>:
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80091f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4313      	orrs	r3, r2
 8009206:	608b      	str	r3, [r1, #8]
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <LL_RCC_SetAPB2Prescaler>:
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800921c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4313      	orrs	r3, r2
 800922e:	608b      	str	r3, [r1, #8]
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <LL_RCC_GetAHBPrescaler>:
{
 800923c:	b480      	push	{r7}
 800923e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800924a:	4618      	mov	r0, r3
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <LL_RCC_GetAHB4Prescaler>:
{
 8009254:	b480      	push	{r7}
 8009256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800925c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009266:	4618      	mov	r0, r3
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <LL_RCC_GetAPB1Prescaler>:
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800927e:	4618      	mov	r0, r3
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <LL_RCC_GetAPB2Prescaler>:
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800928c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009296:	4618      	mov	r0, r3
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <LL_RCC_PLL_Enable>:
{
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80092a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092b2:	6013      	str	r3, [r2, #0]
}
 80092b4:	bf00      	nop
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <LL_RCC_PLL_Disable>:
{
 80092be:	b480      	push	{r7}
 80092c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80092c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092d0:	6013      	str	r3, [r2, #0]
}
 80092d2:	bf00      	nop
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <LL_RCC_PLL_IsReady>:
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80092e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ee:	d101      	bne.n	80092f4 <LL_RCC_PLL_IsReady+0x18>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <LL_RCC_PLL_IsReady+0x1a>
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <LL_RCC_PLL_GetN>:
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009310:	4618      	mov	r0, r3
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <LL_RCC_PLL_GetR>:
{
 800931a:	b480      	push	{r7}
 800931c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800931e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8009328:	4618      	mov	r0, r3
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <LL_RCC_PLL_GetDivider>:
{
 8009332:	b480      	push	{r7}
 8009334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009340:	4618      	mov	r0, r3
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <LL_RCC_PLL_GetMainSource>:
{
 800934a:	b480      	push	{r7}
 800934c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800934e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0303 	and.w	r3, r3, #3
}
 8009358:	4618      	mov	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <LL_RCC_IsActiveFlag_HPRE>:
{
 8009362:	b480      	push	{r7}
 8009364:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009374:	d101      	bne.n	800937a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8009386:	b480      	push	{r7}
 8009388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800938a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939a:	d101      	bne.n	80093a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80093b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80093b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c0:	d101      	bne.n	80093c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80093d2:	b480      	push	{r7}
 80093d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80093d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093e4:	d101      	bne.n	80093ea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80093f6:	b480      	push	{r7}
 80093f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80093fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009408:	d101      	bne.n	800940e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800941c:	b590      	push	{r4, r7, lr}
 800941e:	b08d      	sub	sp, #52	; 0x34
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e363      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 808d 	beq.w	8009556 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800943c:	f7ff fe89 	bl	8009152 <LL_RCC_GetSysClkSource>
 8009440:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009442:	f7ff ff82 	bl	800934a <LL_RCC_PLL_GetMainSource>
 8009446:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <HAL_RCC_OscConfig+0x3e>
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	2b0c      	cmp	r3, #12
 8009452:	d147      	bne.n	80094e4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	2b01      	cmp	r3, #1
 8009458:	d144      	bne.n	80094e4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e347      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800946a:	f7ff fe34 	bl	80090d6 <LL_RCC_MSI_GetRange>
 800946e:	4603      	mov	r3, r0
 8009470:	429c      	cmp	r4, r3
 8009472:	d914      	bls.n	800949e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fd2f 	bl	8009edc <RCC_SetFlashLatencyFromMSIRange>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e336      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff fe0e 	bl	80090ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fe32 	bl	8009100 <LL_RCC_MSI_SetCalibTrimming>
 800949c:	e013      	b.n	80094c6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fe03 	bl	80090ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff fe27 	bl	8009100 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fd10 	bl	8009edc <RCC_SetFlashLatencyFromMSIRange>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e317      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80094c6:	f000 fcc9 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4aa4      	ldr	r2, [pc, #656]	; (8009760 <HAL_RCC_OscConfig+0x344>)
 80094ce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80094d0:	4ba4      	ldr	r3, [pc, #656]	; (8009764 <HAL_RCC_OscConfig+0x348>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fded 	bl	80080b4 <HAL_InitTick>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d039      	beq.n	8009554 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e308      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01e      	beq.n	800952a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80094ec:	f7ff fdb0 	bl	8009050 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80094f0:	f7fe fe2e 	bl	8008150 <HAL_GetTick>
 80094f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80094f6:	e008      	b.n	800950a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80094f8:	f7fe fe2a 	bl	8008150 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b02      	cmp	r3, #2
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e2f5      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800950a:	f7ff fdbf 	bl	800908c <LL_RCC_MSI_IsReady>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f1      	beq.n	80094f8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fdc8 	bl	80090ae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff fdec 	bl	8009100 <LL_RCC_MSI_SetCalibTrimming>
 8009528:	e015      	b.n	8009556 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800952a:	f7ff fda0 	bl	800906e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800952e:	f7fe fe0f 	bl	8008150 <HAL_GetTick>
 8009532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009534:	e008      	b.n	8009548 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009536:	f7fe fe0b 	bl	8008150 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d901      	bls.n	8009548 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e2d6      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009548:	f7ff fda0 	bl	800908c <LL_RCC_MSI_IsReady>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f1      	bne.n	8009536 <HAL_RCC_OscConfig+0x11a>
 8009552:	e000      	b.n	8009556 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009554:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d047      	beq.n	80095f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009562:	f7ff fdf6 	bl	8009152 <LL_RCC_GetSysClkSource>
 8009566:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009568:	f7ff feef 	bl	800934a <LL_RCC_PLL_GetMainSource>
 800956c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d005      	beq.n	8009580 <HAL_RCC_OscConfig+0x164>
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	2b0c      	cmp	r3, #12
 8009578:	d108      	bne.n	800958c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	2b03      	cmp	r3, #3
 800957e:	d105      	bne.n	800958c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d134      	bne.n	80095f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e2b4      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009594:	d102      	bne.n	800959c <HAL_RCC_OscConfig+0x180>
 8009596:	f7ff fbdd 	bl	8008d54 <LL_RCC_HSE_Enable>
 800959a:	e001      	b.n	80095a0 <HAL_RCC_OscConfig+0x184>
 800959c:	f7ff fbe9 	bl	8008d72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d012      	beq.n	80095ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7fe fdd2 	bl	8008150 <HAL_GetTick>
 80095ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095b0:	f7fe fdce 	bl	8008150 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b64      	cmp	r3, #100	; 0x64
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e299      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80095c2:	f7ff fbe5 	bl	8008d90 <LL_RCC_HSE_IsReady>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0f1      	beq.n	80095b0 <HAL_RCC_OscConfig+0x194>
 80095cc:	e011      	b.n	80095f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ce:	f7fe fdbf 	bl	8008150 <HAL_GetTick>
 80095d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095d6:	f7fe fdbb 	bl	8008150 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b64      	cmp	r3, #100	; 0x64
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e286      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80095e8:	f7ff fbd2 	bl	8008d90 <LL_RCC_HSE_IsReady>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f1      	bne.n	80095d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d04c      	beq.n	8009698 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095fe:	f7ff fda8 	bl	8009152 <LL_RCC_GetSysClkSource>
 8009602:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009604:	f7ff fea1 	bl	800934a <LL_RCC_PLL_GetMainSource>
 8009608:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b04      	cmp	r3, #4
 800960e:	d005      	beq.n	800961c <HAL_RCC_OscConfig+0x200>
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	2b0c      	cmp	r3, #12
 8009614:	d10e      	bne.n	8009634 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d10b      	bne.n	8009634 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e266      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fbf1 	bl	8008e14 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009632:	e031      	b.n	8009698 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d019      	beq.n	8009670 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800963c:	f7ff fbba 	bl	8008db4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009640:	f7fe fd86 	bl	8008150 <HAL_GetTick>
 8009644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009646:	e008      	b.n	800965a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009648:	f7fe fd82 	bl	8008150 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d901      	bls.n	800965a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e24d      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800965a:	f7ff fbc9 	bl	8008df0 <LL_RCC_HSI_IsReady>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0f1      	beq.n	8009648 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff fbd3 	bl	8008e14 <LL_RCC_HSI_SetCalibTrimming>
 800966e:	e013      	b.n	8009698 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009670:	f7ff fbaf 	bl	8008dd2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009674:	f7fe fd6c 	bl	8008150 <HAL_GetTick>
 8009678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800967a:	e008      	b.n	800968e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800967c:	f7fe fd68 	bl	8008150 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d901      	bls.n	800968e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e233      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800968e:	f7ff fbaf 	bl	8008df0 <LL_RCC_HSI_IsReady>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f1      	bne.n	800967c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80a3 	beq.w	80097f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d076      	beq.n	80097a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d046      	beq.n	8009754 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80096c6:	f7ff fc66 	bl	8008f96 <LL_RCC_LSI1_IsReady>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d113      	bne.n	80096f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80096d0:	f7ff fc3f 	bl	8008f52 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096d4:	f7fe fd3c 	bl	8008150 <HAL_GetTick>
 80096d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80096da:	e008      	b.n	80096ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80096dc:	f7fe fd38 	bl	8008150 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d901      	bls.n	80096ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e203      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80096ee:	f7ff fc52 	bl	8008f96 <LL_RCC_LSI1_IsReady>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0f1      	beq.n	80096dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80096f8:	f7ff fc5f 	bl	8008fba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096fc:	f7fe fd28 	bl	8008150 <HAL_GetTick>
 8009700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009702:	e008      	b.n	8009716 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009704:	f7fe fd24 	bl	8008150 <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	2b03      	cmp	r3, #3
 8009710:	d901      	bls.n	8009716 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e1ef      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009716:	f7ff fc72 	bl	8008ffe <LL_RCC_LSI2_IsReady>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0f1      	beq.n	8009704 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	4618      	mov	r0, r3
 8009726:	f7ff fc7c 	bl	8009022 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800972a:	f7ff fc23 	bl	8008f74 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972e:	f7fe fd0f 	bl	8008150 <HAL_GetTick>
 8009732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009734:	e008      	b.n	8009748 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009736:	f7fe fd0b 	bl	8008150 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d901      	bls.n	8009748 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e1d6      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009748:	f7ff fc25 	bl	8008f96 <LL_RCC_LSI1_IsReady>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1f1      	bne.n	8009736 <HAL_RCC_OscConfig+0x31a>
 8009752:	e051      	b.n	80097f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009754:	f7ff fbfd 	bl	8008f52 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009758:	f7fe fcfa 	bl	8008150 <HAL_GetTick>
 800975c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800975e:	e00c      	b.n	800977a <HAL_RCC_OscConfig+0x35e>
 8009760:	20000018 	.word	0x20000018
 8009764:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009768:	f7fe fcf2 	bl	8008150 <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d901      	bls.n	800977a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e1bd      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800977a:	f7ff fc0c 	bl	8008f96 <LL_RCC_LSI1_IsReady>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0f1      	beq.n	8009768 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009784:	f7ff fc2a 	bl	8008fdc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009788:	e008      	b.n	800979c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800978a:	f7fe fce1 	bl	8008150 <HAL_GetTick>
 800978e:	4602      	mov	r2, r0
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	2b03      	cmp	r3, #3
 8009796:	d901      	bls.n	800979c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e1ac      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800979c:	f7ff fc2f 	bl	8008ffe <LL_RCC_LSI2_IsReady>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1f1      	bne.n	800978a <HAL_RCC_OscConfig+0x36e>
 80097a6:	e027      	b.n	80097f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80097a8:	f7ff fc18 	bl	8008fdc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ac:	f7fe fcd0 	bl	8008150 <HAL_GetTick>
 80097b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80097b2:	e008      	b.n	80097c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80097b4:	f7fe fccc 	bl	8008150 <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d901      	bls.n	80097c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e197      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80097c6:	f7ff fc1a 	bl	8008ffe <LL_RCC_LSI2_IsReady>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f1      	bne.n	80097b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80097d0:	f7ff fbd0 	bl	8008f74 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097d4:	f7fe fcbc 	bl	8008150 <HAL_GetTick>
 80097d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80097da:	e008      	b.n	80097ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80097dc:	f7fe fcb8 	bl	8008150 <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e183      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80097ee:	f7ff fbd2 	bl	8008f96 <LL_RCC_LSI1_IsReady>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1f1      	bne.n	80097dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05b      	beq.n	80098bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009804:	4ba7      	ldr	r3, [pc, #668]	; (8009aa4 <HAL_RCC_OscConfig+0x688>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980c:	2b00      	cmp	r3, #0
 800980e:	d114      	bne.n	800983a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009810:	f7ff fa70 	bl	8008cf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009814:	f7fe fc9c 	bl	8008150 <HAL_GetTick>
 8009818:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800981c:	f7fe fc98 	bl	8008150 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e163      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800982e:	4b9d      	ldr	r3, [pc, #628]	; (8009aa4 <HAL_RCC_OscConfig+0x688>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d102      	bne.n	8009848 <HAL_RCC_OscConfig+0x42c>
 8009842:	f7ff fb30 	bl	8008ea6 <LL_RCC_LSE_Enable>
 8009846:	e00c      	b.n	8009862 <HAL_RCC_OscConfig+0x446>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b05      	cmp	r3, #5
 800984e:	d104      	bne.n	800985a <HAL_RCC_OscConfig+0x43e>
 8009850:	f7ff fb4b 	bl	8008eea <LL_RCC_LSE_EnableBypass>
 8009854:	f7ff fb27 	bl	8008ea6 <LL_RCC_LSE_Enable>
 8009858:	e003      	b.n	8009862 <HAL_RCC_OscConfig+0x446>
 800985a:	f7ff fb35 	bl	8008ec8 <LL_RCC_LSE_Disable>
 800985e:	f7ff fb55 	bl	8008f0c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d014      	beq.n	8009894 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986a:	f7fe fc71 	bl	8008150 <HAL_GetTick>
 800986e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009870:	e00a      	b.n	8009888 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009872:	f7fe fc6d 	bl	8008150 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009880:	4293      	cmp	r3, r2
 8009882:	d901      	bls.n	8009888 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e136      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009888:	f7ff fb51 	bl	8008f2e <LL_RCC_LSE_IsReady>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d0ef      	beq.n	8009872 <HAL_RCC_OscConfig+0x456>
 8009892:	e013      	b.n	80098bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009894:	f7fe fc5c 	bl	8008150 <HAL_GetTick>
 8009898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800989a:	e00a      	b.n	80098b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800989c:	f7fe fc58 	bl	8008150 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d901      	bls.n	80098b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e121      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80098b2:	f7ff fb3c 	bl	8008f2e <LL_RCC_LSE_IsReady>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1ef      	bne.n	800989c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d02c      	beq.n	8009922 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d014      	beq.n	80098fa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098d0:	f7ff fab5 	bl	8008e3e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098d4:	f7fe fc3c 	bl	8008150 <HAL_GetTick>
 80098d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80098da:	e008      	b.n	80098ee <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098dc:	f7fe fc38 	bl	8008150 <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e103      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80098ee:	f7ff fac8 	bl	8008e82 <LL_RCC_HSI48_IsReady>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0f1      	beq.n	80098dc <HAL_RCC_OscConfig+0x4c0>
 80098f8:	e013      	b.n	8009922 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098fa:	f7ff fab1 	bl	8008e60 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098fe:	f7fe fc27 	bl	8008150 <HAL_GetTick>
 8009902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009904:	e008      	b.n	8009918 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009906:	f7fe fc23 	bl	8008150 <HAL_GetTick>
 800990a:	4602      	mov	r2, r0
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	2b02      	cmp	r3, #2
 8009912:	d901      	bls.n	8009918 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009914:	2303      	movs	r3, #3
 8009916:	e0ee      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009918:	f7ff fab3 	bl	8008e82 <LL_RCC_HSI48_IsReady>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1f1      	bne.n	8009906 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80e4 	beq.w	8009af4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800992c:	f7ff fc11 	bl	8009152 <LL_RCC_GetSysClkSource>
 8009930:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993e:	2b02      	cmp	r3, #2
 8009940:	f040 80b4 	bne.w	8009aac <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f003 0203 	and.w	r2, r3, #3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994e:	429a      	cmp	r2, r3
 8009950:	d123      	bne.n	800999a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995c:	429a      	cmp	r2, r3
 800995e:	d11c      	bne.n	800999a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800996c:	429a      	cmp	r2, r3
 800996e:	d114      	bne.n	800999a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800997a:	429a      	cmp	r2, r3
 800997c:	d10d      	bne.n	800999a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009988:	429a      	cmp	r2, r3
 800998a:	d106      	bne.n	800999a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009996:	429a      	cmp	r2, r3
 8009998:	d05d      	beq.n	8009a56 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b0c      	cmp	r3, #12
 800999e:	d058      	beq.n	8009a52 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80099a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e0a1      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80099b2:	f7ff fc84 	bl	80092be <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80099b6:	f7fe fbcb 	bl	8008150 <HAL_GetTick>
 80099ba:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099bc:	e008      	b.n	80099d0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099be:	f7fe fbc7 	bl	8008150 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d901      	bls.n	80099d0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e092      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1ef      	bne.n	80099be <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80099de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	4b30      	ldr	r3, [pc, #192]	; (8009aa8 <HAL_RCC_OscConfig+0x68c>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80099f0:	4311      	orrs	r1, r2
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099f6:	0212      	lsls	r2, r2, #8
 80099f8:	4311      	orrs	r1, r2
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80099fe:	4311      	orrs	r1, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009a04:	4311      	orrs	r1, r2
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009a14:	f7ff fc44 	bl	80092a0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a28:	f7fe fb92 	bl	8008150 <HAL_GetTick>
 8009a2c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a30:	f7fe fb8e 	bl	8008150 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e059      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0ef      	beq.n	8009a30 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a50:	e050      	b.n	8009af4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e04f      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d147      	bne.n	8009af4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009a64:	f7ff fc1c 	bl	80092a0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a78:	f7fe fb6a 	bl	8008150 <HAL_GetTick>
 8009a7c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a7e:	e008      	b.n	8009a92 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a80:	f7fe fb66 	bl	8008150 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d901      	bls.n	8009a92 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e031      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0ef      	beq.n	8009a80 <HAL_RCC_OscConfig+0x664>
 8009aa0:	e028      	b.n	8009af4 <HAL_RCC_OscConfig+0x6d8>
 8009aa2:	bf00      	nop
 8009aa4:	58000400 	.word	0x58000400
 8009aa8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	2b0c      	cmp	r3, #12
 8009ab0:	d01e      	beq.n	8009af0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ab2:	f7ff fc04 	bl	80092be <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab6:	f7fe fb4b 	bl	8008150 <HAL_GetTick>
 8009aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009abc:	e008      	b.n	8009ad0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009abe:	f7fe fb47 	bl	8008150 <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d901      	bls.n	8009ad0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e012      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1ef      	bne.n	8009abe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <HAL_RCC_OscConfig+0x6e4>)
 8009aea:	4013      	ands	r3, r2
 8009aec:	60cb      	str	r3, [r1, #12]
 8009aee:	e001      	b.n	8009af4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3734      	adds	r7, #52	; 0x34
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd90      	pop	{r4, r7, pc}
 8009afe:	bf00      	nop
 8009b00:	eefefffc 	.word	0xeefefffc

08009b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e12d      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b18:	4b98      	ldr	r3, [pc, #608]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0307 	and.w	r3, r3, #7
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d91b      	bls.n	8009b5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b26:	4b95      	ldr	r3, [pc, #596]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f023 0207 	bic.w	r2, r3, #7
 8009b2e:	4993      	ldr	r1, [pc, #588]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b36:	f7fe fb0b 	bl	8008150 <HAL_GetTick>
 8009b3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b3c:	e008      	b.n	8009b50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009b3e:	f7fe fb07 	bl	8008150 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d901      	bls.n	8009b50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e111      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b50:	4b8a      	ldr	r3, [pc, #552]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d1ef      	bne.n	8009b3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d016      	beq.n	8009b98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fafb 	bl	800916a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009b74:	f7fe faec 	bl	8008150 <HAL_GetTick>
 8009b78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009b7c:	f7fe fae8 	bl	8008150 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e0f2      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009b8e:	f7ff fbe8 	bl	8009362 <LL_RCC_IsActiveFlag_HPRE>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d0f1      	beq.n	8009b7c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d016      	beq.n	8009bd2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff faf2 	bl	8009192 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009bae:	f7fe facf 	bl	8008150 <HAL_GetTick>
 8009bb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009bb4:	e008      	b.n	8009bc8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009bb6:	f7fe facb 	bl	8008150 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e0d5      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009bc8:	f7ff fbdd 	bl	8009386 <LL_RCC_IsActiveFlag_C2HPRE>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f1      	beq.n	8009bb6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d016      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff faeb 	bl	80091be <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009be8:	f7fe fab2 	bl	8008150 <HAL_GetTick>
 8009bec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009bf0:	f7fe faae 	bl	8008150 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e0b8      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009c02:	f7ff fbd3 	bl	80093ac <LL_RCC_IsActiveFlag_SHDHPRE>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0f1      	beq.n	8009bf0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d016      	beq.n	8009c46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff fae5 	bl	80091ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009c22:	f7fe fa95 	bl	8008150 <HAL_GetTick>
 8009c26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009c28:	e008      	b.n	8009c3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009c2a:	f7fe fa91 	bl	8008150 <HAL_GetTick>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d901      	bls.n	8009c3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e09b      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009c3c:	f7ff fbc9 	bl	80093d2 <LL_RCC_IsActiveFlag_PPRE1>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0f1      	beq.n	8009c2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d017      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fadb 	bl	8009214 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009c5e:	f7fe fa77 	bl	8008150 <HAL_GetTick>
 8009c62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009c64:	e008      	b.n	8009c78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009c66:	f7fe fa73 	bl	8008150 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d901      	bls.n	8009c78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e07d      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009c78:	f7ff fbbd 	bl	80093f6 <LL_RCC_IsActiveFlag_PPRE2>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0f1      	beq.n	8009c66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d043      	beq.n	8009d16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d106      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009c96:	f7ff f87b 	bl	8008d90 <LL_RCC_HSE_IsReady>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d11e      	bne.n	8009cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e067      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d106      	bne.n	8009cba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009cac:	f7ff fb16 	bl	80092dc <LL_RCC_PLL_IsReady>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d113      	bne.n	8009cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e05c      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d106      	bne.n	8009cd0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009cc2:	f7ff f9e3 	bl	800908c <LL_RCC_MSI_IsReady>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d108      	bne.n	8009cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e051      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009cd0:	f7ff f88e 	bl	8008df0 <LL_RCC_HSI_IsReady>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e04a      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff fa21 	bl	800912a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce8:	f7fe fa32 	bl	8008150 <HAL_GetTick>
 8009cec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cee:	e00a      	b.n	8009d06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cf0:	f7fe fa2e 	bl	8008150 <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d901      	bls.n	8009d06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e036      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d06:	f7ff fa24 	bl	8009152 <LL_RCC_GetSysClkSource>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d1ec      	bne.n	8009cf0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d16:	4b19      	ldr	r3, [pc, #100]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0307 	and.w	r3, r3, #7
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d21b      	bcs.n	8009d5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d24:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f023 0207 	bic.w	r2, r3, #7
 8009d2c:	4913      	ldr	r1, [pc, #76]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d34:	f7fe fa0c 	bl	8008150 <HAL_GetTick>
 8009d38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3a:	e008      	b.n	8009d4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009d3c:	f7fe fa08 	bl	8008150 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e012      	b.n	8009d74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d4e:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <HAL_RCC_ClockConfig+0x278>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d1ef      	bne.n	8009d3c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009d5c:	f000 f87e 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009d60:	4603      	mov	r3, r0
 8009d62:	4a07      	ldr	r2, [pc, #28]	; (8009d80 <HAL_RCC_ClockConfig+0x27c>)
 8009d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009d66:	f7fe f9ff 	bl	8008168 <HAL_GetTickPrio>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fe f9a1 	bl	80080b4 <HAL_InitTick>
 8009d72:	4603      	mov	r3, r0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	58004000 	.word	0x58004000
 8009d80:	20000018 	.word	0x20000018

08009d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d8a:	f7ff f9e2 	bl	8009152 <LL_RCC_GetSysClkSource>
 8009d8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009d96:	f7ff f99e 	bl	80090d6 <LL_RCC_MSI_GetRange>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	091b      	lsrs	r3, r3, #4
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	4a2b      	ldr	r2, [pc, #172]	; (8009e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e04b      	b.n	8009e44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d102      	bne.n	8009db8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009db2:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e045      	b.n	8009e44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b08      	cmp	r3, #8
 8009dbc:	d10a      	bne.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009dbe:	f7fe ffb7 	bl	8008d30 <LL_RCC_HSE_IsEnabledDiv2>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d102      	bne.n	8009dce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009dc8:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e03a      	b.n	8009e44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009dce:	4b22      	ldr	r3, [pc, #136]	; (8009e58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e037      	b.n	8009e44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009dd4:	f7ff fab9 	bl	800934a <LL_RCC_PLL_GetMainSource>
 8009dd8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d003      	beq.n	8009de8 <HAL_RCC_GetSysClockFreq+0x64>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d003      	beq.n	8009dee <HAL_RCC_GetSysClockFreq+0x6a>
 8009de6:	e00d      	b.n	8009e04 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009de8:	4b1a      	ldr	r3, [pc, #104]	; (8009e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009dea:	60bb      	str	r3, [r7, #8]
        break;
 8009dec:	e015      	b.n	8009e1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009dee:	f7fe ff9f 	bl	8008d30 <LL_RCC_HSE_IsEnabledDiv2>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d102      	bne.n	8009dfe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009df8:	4b16      	ldr	r3, [pc, #88]	; (8009e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009dfa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8009dfc:	e00d      	b.n	8009e1a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8009dfe:	4b16      	ldr	r3, [pc, #88]	; (8009e58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009e00:	60bb      	str	r3, [r7, #8]
        break;
 8009e02:	e00a      	b.n	8009e1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009e04:	f7ff f967 	bl	80090d6 <LL_RCC_MSI_GetRange>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	091b      	lsrs	r3, r3, #4
 8009e0c:	f003 030f 	and.w	r3, r3, #15
 8009e10:	4a0f      	ldr	r2, [pc, #60]	; (8009e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e16:	60bb      	str	r3, [r7, #8]
        break;
 8009e18:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8009e1a:	f7ff fa71 	bl	8009300 <LL_RCC_PLL_GetN>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	fb03 f402 	mul.w	r4, r3, r2
 8009e26:	f7ff fa84 	bl	8009332 <LL_RCC_PLL_GetDivider>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	091b      	lsrs	r3, r3, #4
 8009e2e:	3301      	adds	r3, #1
 8009e30:	fbb4 f4f3 	udiv	r4, r4, r3
 8009e34:	f7ff fa71 	bl	800931a <LL_RCC_PLL_GetR>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	0f5b      	lsrs	r3, r3, #29
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8009e42:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009e44:	68fb      	ldr	r3, [r7, #12]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd90      	pop	{r4, r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	08012130 	.word	0x08012130
 8009e54:	00f42400 	.word	0x00f42400
 8009e58:	01e84800 	.word	0x01e84800

08009e5c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e5c:	b598      	push	{r3, r4, r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009e60:	f7ff ff90 	bl	8009d84 <HAL_RCC_GetSysClockFreq>
 8009e64:	4604      	mov	r4, r0
 8009e66:	f7ff f9e9 	bl	800923c <LL_RCC_GetAHBPrescaler>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	f003 030f 	and.w	r3, r3, #15
 8009e72:	4a03      	ldr	r2, [pc, #12]	; (8009e80 <HAL_RCC_GetHCLKFreq+0x24>)
 8009e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e78:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	bd98      	pop	{r3, r4, r7, pc}
 8009e80:	080120d0 	.word	0x080120d0

08009e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e84:	b598      	push	{r3, r4, r7, lr}
 8009e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009e88:	f7ff ffe8 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	f7ff f9ef 	bl	8009270 <LL_RCC_GetAPB1Prescaler>
 8009e92:	4603      	mov	r3, r0
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	4a04      	ldr	r2, [pc, #16]	; (8009eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea0:	f003 031f 	and.w	r3, r3, #31
 8009ea4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	bd98      	pop	{r3, r4, r7, pc}
 8009eac:	08012110 	.word	0x08012110

08009eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009eb0:	b598      	push	{r3, r4, r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009eb4:	f7ff ffd2 	bl	8009e5c <HAL_RCC_GetHCLKFreq>
 8009eb8:	4604      	mov	r4, r0
 8009eba:	f7ff f9e5 	bl	8009288 <LL_RCC_GetAPB2Prescaler>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	0adb      	lsrs	r3, r3, #11
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	4a04      	ldr	r2, [pc, #16]	; (8009ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ecc:	f003 031f 	and.w	r3, r3, #31
 8009ed0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	bd98      	pop	{r3, r4, r7, pc}
 8009ed8:	08012110 	.word	0x08012110

08009edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2bb0      	cmp	r3, #176	; 0xb0
 8009ee8:	d903      	bls.n	8009ef2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8009eea:	4b15      	ldr	r3, [pc, #84]	; (8009f40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e007      	b.n	8009f02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	091b      	lsrs	r3, r3, #4
 8009ef6:	f003 030f 	and.w	r3, r3, #15
 8009efa:	4a11      	ldr	r2, [pc, #68]	; (8009f40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8009efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009f02:	f7ff f9a7 	bl	8009254 <LL_RCC_GetAHB4Prescaler>
 8009f06:	4603      	mov	r3, r0
 8009f08:	091b      	lsrs	r3, r3, #4
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	4a0d      	ldr	r2, [pc, #52]	; (8009f44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4a0a      	ldr	r2, [pc, #40]	; (8009f48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009f20:	fba2 2303 	umull	r2, r3, r2, r3
 8009f24:	0c9c      	lsrs	r4, r3, #18
 8009f26:	f7fe fef5 	bl	8008d14 <HAL_PWREx_GetVoltageRange>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 f80c 	bl	8009f4c <RCC_SetFlashLatency>
 8009f34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd90      	pop	{r4, r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	08012130 	.word	0x08012130
 8009f44:	080120d0 	.word	0x080120d0
 8009f48:	431bde83 	.word	0x431bde83

08009f4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b093      	sub	sp, #76	; 0x4c
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009f56:	4b37      	ldr	r3, [pc, #220]	; (800a034 <RCC_SetFlashLatency+0xe8>)
 8009f58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009f62:	4a35      	ldr	r2, [pc, #212]	; (800a038 <RCC_SetFlashLatency+0xec>)
 8009f64:	f107 031c 	add.w	r3, r7, #28
 8009f68:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009f6e:	4b33      	ldr	r3, [pc, #204]	; (800a03c <RCC_SetFlashLatency+0xf0>)
 8009f70:	f107 040c 	add.w	r4, r7, #12
 8009f74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f84:	d11a      	bne.n	8009fbc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009f86:	2300      	movs	r3, #0
 8009f88:	643b      	str	r3, [r7, #64]	; 0x40
 8009f8a:	e013      	b.n	8009fb4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	3348      	adds	r3, #72	; 0x48
 8009f92:	443b      	add	r3, r7
 8009f94:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d807      	bhi.n	8009fae <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	3348      	adds	r3, #72	; 0x48
 8009fa4:	443b      	add	r3, r7
 8009fa6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009faa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009fac:	e020      	b.n	8009ff0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d9e8      	bls.n	8009f8c <RCC_SetFlashLatency+0x40>
 8009fba:	e019      	b.n	8009ff0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc0:	e013      	b.n	8009fea <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	3348      	adds	r3, #72	; 0x48
 8009fc8:	443b      	add	r3, r7
 8009fca:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d807      	bhi.n	8009fe4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	3348      	adds	r3, #72	; 0x48
 8009fda:	443b      	add	r3, r7
 8009fdc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009fe0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009fe2:	e005      	b.n	8009ff0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d9e8      	bls.n	8009fc2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8009ff0:	4b13      	ldr	r3, [pc, #76]	; (800a040 <RCC_SetFlashLatency+0xf4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f023 0207 	bic.w	r2, r3, #7
 8009ff8:	4911      	ldr	r1, [pc, #68]	; (800a040 <RCC_SetFlashLatency+0xf4>)
 8009ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a000:	f7fe f8a6 	bl	8008150 <HAL_GetTick>
 800a004:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a006:	e008      	b.n	800a01a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a008:	f7fe f8a2 	bl	8008150 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	2b02      	cmp	r3, #2
 800a014:	d901      	bls.n	800a01a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e007      	b.n	800a02a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a01a:	4b09      	ldr	r3, [pc, #36]	; (800a040 <RCC_SetFlashLatency+0xf4>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a024:	429a      	cmp	r2, r3
 800a026:	d1ef      	bne.n	800a008 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	374c      	adds	r7, #76	; 0x4c
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd90      	pop	{r4, r7, pc}
 800a032:	bf00      	nop
 800a034:	08011b20 	.word	0x08011b20
 800a038:	08011b30 	.word	0x08011b30
 800a03c:	08011b3c 	.word	0x08011b3c
 800a040:	58004000 	.word	0x58004000

0800a044 <LL_RCC_LSE_IsEnabled>:
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b01      	cmp	r3, #1
 800a056:	d101      	bne.n	800a05c <LL_RCC_LSE_IsEnabled+0x18>
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <LL_RCC_LSE_IsEnabled+0x1a>
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <LL_RCC_LSE_IsReady>:
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a06c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d101      	bne.n	800a080 <LL_RCC_LSE_IsReady+0x18>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <LL_RCC_LSE_IsReady+0x1a>
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <LL_RCC_MSI_EnablePLLMode>:
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800a090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a09a:	f043 0304 	orr.w	r3, r3, #4
 800a09e:	6013      	str	r3, [r2, #0]
}
 800a0a0:	bf00      	nop
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <LL_RCC_SetRFWKPClockSource>:
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a0be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a0ca:	bf00      	nop
 800a0cc:	370c      	adds	r7, #12
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <LL_RCC_SetSMPSClockSource>:
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a0de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	f023 0203 	bic.w	r2, r3, #3
 800a0e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a0f2:	bf00      	nop
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <LL_RCC_SetSMPSPrescaler>:
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4313      	orrs	r3, r2
 800a118:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <LL_RCC_SetUSARTClockSource>:
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a12e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a136:	f023 0203 	bic.w	r2, r3, #3
 800a13a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4313      	orrs	r3, r2
 800a142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <LL_RCC_SetLPUARTClockSource>:
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a15a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a172:	bf00      	nop
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <LL_RCC_SetI2CClockSource>:
{
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a18a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	091b      	lsrs	r3, r3, #4
 800a192:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a196:	43db      	mvns	r3, r3
 800a198:	401a      	ands	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a1a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <LL_RCC_SetLPTIMClockSource>:
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a1c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0c1b      	lsrs	r3, r3, #16
 800a1cc:	041b      	lsls	r3, r3, #16
 800a1ce:	43db      	mvns	r3, r3
 800a1d0:	401a      	ands	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	041b      	lsls	r3, r3, #16
 800a1d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <LL_RCC_SetSAIClockSource>:
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4313      	orrs	r3, r2
 800a208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <LL_RCC_SetRNGClockSource>:
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a228:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a22c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4313      	orrs	r3, r2
 800a234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <LL_RCC_SetCLK48ClockSource>:
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a24c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a254:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4313      	orrs	r3, r2
 800a260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <LL_RCC_SetUSBClockSource>:
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7ff ffe3 	bl	800a244 <LL_RCC_SetCLK48ClockSource>
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <LL_RCC_SetADCClockSource>:
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a29a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <LL_RCC_SetRTCClockSource>:
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a2ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <LL_RCC_GetRTCClockSource>:
{
 800a2de:	b480      	push	{r7}
 800a2e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a2e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <LL_RCC_ForceBackupDomainReset>:
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a2fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a30c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a310:	bf00      	nop
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <LL_RCC_ReleaseBackupDomainReset>:
{
 800a31a:	b480      	push	{r7}
 800a31c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a31e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a32e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a332:	bf00      	nop
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <LL_RCC_PLLSAI1_Enable>:
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a34a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a34e:	6013      	str	r3, [r2, #0]
}
 800a350:	bf00      	nop
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <LL_RCC_PLLSAI1_Disable>:
{
 800a35a:	b480      	push	{r7}
 800a35c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a35e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a36c:	6013      	str	r3, [r2, #0]
}
 800a36e:	bf00      	nop
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <LL_RCC_PLLSAI1_IsReady>:
{
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a37c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a38a:	d101      	bne.n	800a390 <LL_RCC_PLLSAI1_IsReady+0x18>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d034      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3c0:	d021      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a3c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3c6:	d81b      	bhi.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a3c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3cc:	d01d      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a3ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3d2:	d815      	bhi.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a3d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3dc:	d110      	bne.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a3de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a3ee:	e00d      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f94d 	bl	800a694 <RCCEx_PLLSAI1_ConfigNP>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a3fe:	e005      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	77fb      	strb	r3, [r7, #31]
        break;
 800a404:	e002      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a40a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a40c:	7ffb      	ldrb	r3, [r7, #31]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d105      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fee8 	bl	800a1ec <LL_RCC_SetSAIClockSource>
 800a41c:	e001      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d046      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a42e:	f7ff ff56 	bl	800a2de <LL_RCC_GetRTCClockSource>
 800a432:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a438:	69ba      	ldr	r2, [r7, #24]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d03c      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a43e:	f7fe fc59 	bl	8008cf4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff ff30 	bl	800a2b2 <LL_RCC_SetRTCClockSource>
 800a452:	e02e      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a45c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a45e:	f7ff ff4b 	bl	800a2f8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a462:	f7ff ff5a 	bl	800a31a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a470:	4313      	orrs	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a47e:	f7ff fde1 	bl	800a044 <LL_RCC_LSE_IsEnabled>
 800a482:	4603      	mov	r3, r0
 800a484:	2b01      	cmp	r3, #1
 800a486:	d114      	bne.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a488:	f7fd fe62 	bl	8008150 <HAL_GetTick>
 800a48c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a48e:	e00b      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a490:	f7fd fe5e 	bl	8008150 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d902      	bls.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	77fb      	strb	r3, [r7, #31]
              break;
 800a4a6:	e004      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a4a8:	f7ff fdde 	bl	800a068 <LL_RCC_LSE_IsReady>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d1ee      	bne.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a4b2:	7ffb      	ldrb	r3, [r7, #31]
 800a4b4:	77bb      	strb	r3, [r7, #30]
 800a4b6:	e001      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff fe2a 	bl	800a126 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d004      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fe35 	bl	800a152 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0310 	and.w	r3, r3, #16
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d004      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fe5d 	bl	800a1b8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d004      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fe52 	bl	800a1b8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d004      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fe2a 	bl	800a17e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0308 	and.w	r3, r3, #8
 800a532:	2b00      	cmp	r3, #0
 800a534:	d004      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7ff fe1f 	bl	800a17e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d022      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff fe8d 	bl	800a270 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a55e:	d107      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a56a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a56e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a578:	d10b      	bne.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3304      	adds	r3, #4
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f8e3 	bl	800a74a <RCCEx_PLLSAI1_ConfigNQ>
 800a584:	4603      	mov	r3, r0
 800a586:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a588:	7ffb      	ldrb	r3, [r7, #31]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d02b      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a6:	d008      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d105      	bne.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff fe2a 	bl	800a218 <LL_RCC_SetRNGClockSource>
 800a5c4:	e00a      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	f7ff fe21 	bl	800a218 <LL_RCC_SetRNGClockSource>
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff fe34 	bl	800a244 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a5e4:	d107      	bne.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a5e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a5f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d022      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff fe3d 	bl	800a286 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a614:	d107      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a624:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a62e:	d10b      	bne.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f8e3 	bl	800a800 <RCCEx_PLLSAI1_ConfigNR>
 800a63a:	4603      	mov	r3, r0
 800a63c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800a644:	7ffb      	ldrb	r3, [r7, #31]
 800a646:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d004      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fd26 	bl	800a0aa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d009      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff fd45 	bl	800a0fe <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff fd2c 	bl	800a0d6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800a67e:	7fbb      	ldrb	r3, [r7, #30]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800a68c:	f7ff fcfe 	bl	800a08c <LL_RCC_MSI_EnablePLLMode>
}
 800a690:	bf00      	nop
 800a692:	bd80      	pop	{r7, pc}

0800a694 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a6a0:	f7ff fe5b 	bl	800a35a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a6a4:	f7fd fd54 	bl	8008150 <HAL_GetTick>
 800a6a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a6aa:	e009      	b.n	800a6c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a6ac:	f7fd fd50 	bl	8008150 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d902      	bls.n	800a6c0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6be:	e004      	b.n	800a6ca <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a6c0:	f7ff fe5a 	bl	800a378 <LL_RCC_PLLSAI1_IsReady>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1f0      	bne.n	800a6ac <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d137      	bne.n	800a740 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a6d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	021b      	lsls	r3, r3, #8
 800a6e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a6e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a6fe:	f7ff fe1d 	bl	800a33c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a702:	f7fd fd25 	bl	8008150 <HAL_GetTick>
 800a706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a708:	e009      	b.n	800a71e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a70a:	f7fd fd21 	bl	8008150 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b02      	cmp	r3, #2
 800a716:	d902      	bls.n	800a71e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	73fb      	strb	r3, [r7, #15]
        break;
 800a71c:	e004      	b.n	800a728 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a71e:	f7ff fe2b 	bl	800a378 <LL_RCC_PLLSAI1_IsReady>
 800a722:	4603      	mov	r3, r0
 800a724:	2b01      	cmp	r3, #1
 800a726:	d1f0      	bne.n	800a70a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d108      	bne.n	800a740 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a72e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a73c:	4313      	orrs	r3, r2
 800a73e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a756:	f7ff fe00 	bl	800a35a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a75a:	f7fd fcf9 	bl	8008150 <HAL_GetTick>
 800a75e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a760:	e009      	b.n	800a776 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a762:	f7fd fcf5 	bl	8008150 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d902      	bls.n	800a776 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	73fb      	strb	r3, [r7, #15]
      break;
 800a774:	e004      	b.n	800a780 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a776:	f7ff fdff 	bl	800a378 <LL_RCC_PLLSAI1_IsReady>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f0      	bne.n	800a762 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d137      	bne.n	800a7f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a79a:	4313      	orrs	r3, r2
 800a79c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a79e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a7b4:	f7ff fdc2 	bl	800a33c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b8:	f7fd fcca 	bl	8008150 <HAL_GetTick>
 800a7bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a7be:	e009      	b.n	800a7d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7c0:	f7fd fcc6 	bl	8008150 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d902      	bls.n	800a7d4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	73fb      	strb	r3, [r7, #15]
        break;
 800a7d2:	e004      	b.n	800a7de <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a7d4:	f7ff fdd0 	bl	800a378 <LL_RCC_PLLSAI1_IsReady>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d1f0      	bne.n	800a7c0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d108      	bne.n	800a7f6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a7e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a80c:	f7ff fda5 	bl	800a35a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a810:	f7fd fc9e 	bl	8008150 <HAL_GetTick>
 800a814:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a816:	e009      	b.n	800a82c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a818:	f7fd fc9a 	bl	8008150 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d902      	bls.n	800a82c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	73fb      	strb	r3, [r7, #15]
      break;
 800a82a:	e004      	b.n	800a836 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a82c:	f7ff fda4 	bl	800a378 <LL_RCC_PLLSAI1_IsReady>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f0      	bne.n	800a818 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d137      	bne.n	800a8ac <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a83c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	021b      	lsls	r3, r3, #8
 800a84c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a850:	4313      	orrs	r3, r2
 800a852:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800a854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a866:	4313      	orrs	r3, r2
 800a868:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a86a:	f7ff fd67 	bl	800a33c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a86e:	f7fd fc6f 	bl	8008150 <HAL_GetTick>
 800a872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a874:	e009      	b.n	800a88a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a876:	f7fd fc6b 	bl	8008150 <HAL_GetTick>
 800a87a:	4602      	mov	r2, r0
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	d902      	bls.n	800a88a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	73fb      	strb	r3, [r7, #15]
        break;
 800a888:	e004      	b.n	800a894 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a88a:	f7ff fd75 	bl	800a378 <LL_RCC_PLLSAI1_IsReady>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b01      	cmp	r3, #1
 800a892:	d1f0      	bne.n	800a876 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d108      	bne.n	800a8ac <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a89a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e09f      	b.n	800aa0a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7fd f900 	bl	8007ae4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a8ec:	4b49      	ldr	r3, [pc, #292]	; (800aa14 <HAL_RTC_Init+0x15c>)
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0310 	and.w	r3, r3, #16
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d07e      	beq.n	800a9f6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	22ca      	movs	r2, #202	; 0xca
 800a8fe:	625a      	str	r2, [r3, #36]	; 0x24
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2253      	movs	r2, #83	; 0x53
 800a906:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f8ab 	bl	800aa64 <RTC_EnterInitMode>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00a      	beq.n	800a92a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	22ff      	movs	r2, #255	; 0xff
 800a91a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2204      	movs	r2, #4
 800a920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	73fb      	strb	r3, [r7, #15]
 800a928:	e067      	b.n	800a9fa <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	6812      	ldr	r2, [r2, #0]
 800a934:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a93c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6899      	ldr	r1, [r3, #8]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	431a      	orrs	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	431a      	orrs	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	430a      	orrs	r2, r1
 800a95a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	68d2      	ldr	r2, [r2, #12]
 800a964:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6919      	ldr	r1, [r3, #16]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	041a      	lsls	r2, r3, #16
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a988:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f022 0203 	bic.w	r2, r2, #3
 800a998:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	69da      	ldr	r2, [r3, #28]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 0320 	and.w	r3, r3, #32
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d113      	bne.n	800a9e8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f829 	bl	800aa18 <HAL_RTC_WaitForSynchro>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00d      	beq.n	800a9e8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	22ff      	movs	r2, #255	; 0xff
 800a9d2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e010      	b.n	800aa0a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	22ff      	movs	r2, #255	; 0xff
 800a9ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73fb      	strb	r3, [r7, #15]
 800a9f4:	e001      	b.n	800a9fa <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d103      	bne.n	800aa08 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	40002800 	.word	0x40002800

0800aa18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68da      	ldr	r2, [r3, #12]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aa2e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800aa30:	f7fd fb8e 	bl	8008150 <HAL_GetTick>
 800aa34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa36:	e009      	b.n	800aa4c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa38:	f7fd fb8a 	bl	8008150 <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa46:	d901      	bls.n	800aa4c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e007      	b.n	800aa5c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f003 0320 	and.w	r3, r3, #32
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0ee      	beq.n	800aa38 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d119      	bne.n	800aaae <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800aa84:	f7fd fb64 	bl	8008150 <HAL_GetTick>
 800aa88:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aa8a:	e009      	b.n	800aaa0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aa8c:	f7fd fb60 	bl	8008150 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa9a:	d901      	bls.n	800aaa0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e007      	b.n	800aab0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0ee      	beq.n	800aa8c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e095      	b.n	800abf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d108      	bne.n	800aae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aada:	d009      	beq.n	800aaf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	61da      	str	r2, [r3, #28]
 800aae2:	e005      	b.n	800aaf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7fd f816 	bl	8007b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab30:	d902      	bls.n	800ab38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	e002      	b.n	800ab3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ab38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ab46:	d007      	beq.n	800ab58 <HAL_SPI_Init+0xa0>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ab50:	d002      	beq.n	800ab58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab86:	431a      	orrs	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab90:	431a      	orrs	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9a:	ea42 0103 	orr.w	r1, r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	0c1b      	lsrs	r3, r3, #16
 800abb4:	f003 0204 	and.w	r2, r3, #4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	431a      	orrs	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc6:	f003 0308 	and.w	r3, r3, #8
 800abca:	431a      	orrs	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800abd4:	ea42 0103 	orr.w	r1, r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac18:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac20:	7dbb      	ldrb	r3, [r7, #22]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d00d      	beq.n	800ac42 <HAL_SPI_TransmitReceive_IT+0x42>
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac2c:	d106      	bne.n	800ac3c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d102      	bne.n	800ac3c <HAL_SPI_TransmitReceive_IT+0x3c>
 800ac36:	7dbb      	ldrb	r3, [r7, #22]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d002      	beq.n	800ac42 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac40:	e07d      	b.n	800ad3e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <HAL_SPI_TransmitReceive_IT+0x54>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <HAL_SPI_TransmitReceive_IT+0x54>
 800ac4e:	887b      	ldrh	r3, [r7, #2]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac58:	e071      	b.n	800ad3e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_SPI_TransmitReceive_IT+0x68>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e06b      	b.n	800ad40 <HAL_SPI_TransmitReceive_IT+0x140>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	d003      	beq.n	800ac84 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2205      	movs	r2, #5
 800ac80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	887a      	ldrh	r2, [r7, #2]
 800ac94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	887a      	ldrh	r2, [r7, #2]
 800ac9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	887a      	ldrh	r2, [r7, #2]
 800aca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	887a      	ldrh	r2, [r7, #2]
 800acae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800acba:	d906      	bls.n	800acca <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4a23      	ldr	r2, [pc, #140]	; (800ad4c <HAL_SPI_TransmitReceive_IT+0x14c>)
 800acc0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	4a22      	ldr	r2, [pc, #136]	; (800ad50 <HAL_SPI_TransmitReceive_IT+0x150>)
 800acc6:	651a      	str	r2, [r3, #80]	; 0x50
 800acc8:	e005      	b.n	800acd6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <HAL_SPI_TransmitReceive_IT+0x154>)
 800acce:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <HAL_SPI_TransmitReceive_IT+0x158>)
 800acd4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800acde:	d802      	bhi.n	800ace6 <HAL_SPI_TransmitReceive_IT+0xe6>
 800ace0:	887b      	ldrh	r3, [r7, #2]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d908      	bls.n	800acf8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800acf4:	605a      	str	r2, [r3, #4]
 800acf6:	e007      	b.n	800ad08 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad06:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad12:	2b40      	cmp	r3, #64	; 0x40
 800ad14:	d007      	beq.n	800ad26 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad24:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800ad3c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	0800b0d3 	.word	0x0800b0d3
 800ad50:	0800b139 	.word	0x0800b139
 800ad54:	0800af83 	.word	0x0800af83
 800ad58:	0800b041 	.word	0x0800b041

0800ad5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10e      	bne.n	800ad9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
    return;
 800ad9a:	e0ce      	b.n	800af3a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d009      	beq.n	800adba <HAL_SPI_IRQHandler+0x5e>
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adac:	2b00      	cmp	r3, #0
 800adae:	d004      	beq.n	800adba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4798      	blx	r3
    return;
 800adb8:	e0bf      	b.n	800af3a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <HAL_SPI_IRQHandler+0x7e>
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d105      	bne.n	800adda <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 80b0 	beq.w	800af3a <HAL_SPI_IRQHandler+0x1de>
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80aa 	beq.w	800af3a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adec:	2b00      	cmp	r3, #0
 800adee:	d023      	beq.n	800ae38 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d011      	beq.n	800ae20 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae00:	f043 0204 	orr.w	r2, r3, #4
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae08:	2300      	movs	r3, #0
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	617b      	str	r3, [r7, #20]
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	e00b      	b.n	800ae38 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	613b      	str	r3, [r7, #16]
 800ae34:	693b      	ldr	r3, [r7, #16]
        return;
 800ae36:	e080      	b.n	800af3a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	f003 0320 	and.w	r3, r3, #32
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d014      	beq.n	800ae6c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae46:	f043 0201 	orr.w	r2, r3, #1
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00c      	beq.n	800ae90 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7a:	f043 0208 	orr.w	r2, r3, #8
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae82:	2300      	movs	r3, #0
 800ae84:	60bb      	str	r3, [r7, #8]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	60bb      	str	r3, [r7, #8]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d04f      	beq.n	800af38 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aea6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d104      	bne.n	800aec4 <HAL_SPI_IRQHandler+0x168>
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d034      	beq.n	800af2e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0203 	bic.w	r2, r2, #3
 800aed2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d011      	beq.n	800af00 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee0:	4a17      	ldr	r2, [pc, #92]	; (800af40 <HAL_SPI_IRQHandler+0x1e4>)
 800aee2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fd fac2 	bl	8008472 <HAL_DMA_Abort_IT>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af04:	2b00      	cmp	r3, #0
 800af06:	d016      	beq.n	800af36 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0c:	4a0c      	ldr	r2, [pc, #48]	; (800af40 <HAL_SPI_IRQHandler+0x1e4>)
 800af0e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af14:	4618      	mov	r0, r3
 800af16:	f7fd faac 	bl	8008472 <HAL_DMA_Abort_IT>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00a      	beq.n	800af36 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800af2c:	e003      	b.n	800af36 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7fc fcd8 	bl	80078e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800af34:	e000      	b.n	800af38 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800af36:	bf00      	nop
    return;
 800af38:	bf00      	nop
  }
}
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	0800af59 	.word	0x0800af59

0800af44 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7fc fcb5 	bl	80078e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800af90:	b29b      	uxth	r3, r3
 800af92:	2b01      	cmp	r3, #1
 800af94:	d923      	bls.n	800afde <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68da      	ldr	r2, [r3, #12]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	b292      	uxth	r2, r2
 800afa2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa8:	1c9a      	adds	r2, r3, #2
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	3b02      	subs	r3, #2
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d11f      	bne.n	800b00c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800afda:	605a      	str	r2, [r3, #4]
 800afdc:	e016      	b.n	800b00c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f103 020c 	add.w	r2, r3, #12
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	7812      	ldrb	r2, [r2, #0]
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b000:	b29b      	uxth	r3, r3
 800b002:	3b01      	subs	r3, #1
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b012:	b29b      	uxth	r3, r3
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10f      	bne.n	800b038 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b026:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d102      	bne.n	800b038 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fa14 	bl	800b460 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d912      	bls.n	800b078 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	881a      	ldrh	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b062:	1c9a      	adds	r2, r3, #2
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	3b02      	subs	r3, #2
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b076:	e012      	b.n	800b09e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	330c      	adds	r3, #12
 800b082:	7812      	ldrb	r2, [r2, #0]
 800b084:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b094:	b29b      	uxth	r3, r3
 800b096:	3b01      	subs	r3, #1
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d110      	bne.n	800b0ca <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0b6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f9cb 	bl	800b460 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e4:	b292      	uxth	r2, r2
 800b0e6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ec:	1c9a      	adds	r2, r3, #2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10f      	bne.n	800b130 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b11e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f998 	bl	800b460 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b130:	bf00      	nop
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b144:	881a      	ldrh	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	1c9a      	adds	r2, r3, #2
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	3b01      	subs	r3, #1
 800b15e:	b29a      	uxth	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b168:	b29b      	uxth	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d110      	bne.n	800b190 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b17c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b184:	b29b      	uxth	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d102      	bne.n	800b190 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f968 	bl	800b460 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1a8:	f7fc ffd2 	bl	8008150 <HAL_GetTick>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1b8:	f7fc ffca 	bl	8008150 <HAL_GetTick>
 800b1bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1be:	4b39      	ldr	r3, [pc, #228]	; (800b2a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	015b      	lsls	r3, r3, #5
 800b1c4:	0d1b      	lsrs	r3, r3, #20
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1ce:	e054      	b.n	800b27a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d6:	d050      	beq.n	800b27a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1d8:	f7fc ffba 	bl	8008150 <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d902      	bls.n	800b1ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d13d      	bne.n	800b26a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b1fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b206:	d111      	bne.n	800b22c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b210:	d004      	beq.n	800b21c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b21a:	d107      	bne.n	800b22c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b234:	d10f      	bne.n	800b256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e017      	b.n	800b29a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b270:	2300      	movs	r3, #0
 800b272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	3b01      	subs	r3, #1
 800b278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	4013      	ands	r3, r2
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	429a      	cmp	r2, r3
 800b288:	bf0c      	ite	eq
 800b28a:	2301      	moveq	r3, #1
 800b28c:	2300      	movne	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	461a      	mov	r2, r3
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	429a      	cmp	r2, r3
 800b296:	d19b      	bne.n	800b1d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000018 	.word	0x20000018

0800b2a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b2ba:	f7fc ff49 	bl	8008150 <HAL_GetTick>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b2ca:	f7fc ff41 	bl	8008150 <HAL_GetTick>
 800b2ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	330c      	adds	r3, #12
 800b2d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b2d8:	4b3d      	ldr	r3, [pc, #244]	; (800b3d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	00da      	lsls	r2, r3, #3
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	0d1b      	lsrs	r3, r3, #20
 800b2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b2f0:	e060      	b.n	800b3b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b2f8:	d107      	bne.n	800b30a <SPI_WaitFifoStateUntilTimeout+0x62>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b308:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b310:	d050      	beq.n	800b3b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b312:	f7fc ff1d 	bl	8008150 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	6a3b      	ldr	r3, [r7, #32]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b31e:	429a      	cmp	r2, r3
 800b320:	d902      	bls.n	800b328 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	d13d      	bne.n	800b3a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b336:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b340:	d111      	bne.n	800b366 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b34a:	d004      	beq.n	800b356 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b354:	d107      	bne.n	800b366 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b364:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b36e:	d10f      	bne.n	800b390 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b38e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e010      	b.n	800b3c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	689a      	ldr	r2, [r3, #8]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	4013      	ands	r3, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d196      	bne.n	800b2f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3728      	adds	r7, #40	; 0x28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000018 	.word	0x20000018

0800b3d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af02      	add	r7, sp, #8
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f7ff ff5b 	bl	800b2a8 <SPI_WaitFifoStateUntilTimeout>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d007      	beq.n	800b408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3fc:	f043 0220 	orr.w	r2, r3, #32
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b404:	2303      	movs	r3, #3
 800b406:	e027      	b.n	800b458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2200      	movs	r2, #0
 800b410:	2180      	movs	r1, #128	; 0x80
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f7ff fec0 	bl	800b198 <SPI_WaitFlagStateUntilTimeout>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d007      	beq.n	800b42e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b422:	f043 0220 	orr.w	r2, r3, #32
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e014      	b.n	800b458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2200      	movs	r2, #0
 800b436:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f7ff ff34 	bl	800b2a8 <SPI_WaitFifoStateUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b44a:	f043 0220 	orr.w	r2, r3, #32
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b452:	2303      	movs	r3, #3
 800b454:	e000      	b.n	800b458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b468:	f7fc fe72 	bl	8008150 <HAL_GetTick>
 800b46c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f022 0220 	bic.w	r2, r2, #32
 800b47c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	2164      	movs	r1, #100	; 0x64
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff ffa6 	bl	800b3d4 <SPI_EndRxTxTransaction>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b492:	f043 0220 	orr.w	r2, r3, #32
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d115      	bne.n	800b4ce <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d107      	bne.n	800b4be <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fd44 	bl	800af44 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b4bc:	e00e      	b.n	800b4dc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fc f9ee 	bl	80078a8 <HAL_SPI_TxRxCpltCallback>
}
 800b4cc:	e006      	b.n	800b4dc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7fc fa04 	bl	80078e4 <HAL_SPI_ErrorCallback>
}
 800b4dc:	bf00      	nop
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <LL_RCC_GetUSARTClockSource>:
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b4ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4013      	ands	r3, r2
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <LL_RCC_GetLPUARTClockSource>:
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b510:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4013      	ands	r3, r2
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e042      	b.n	800b5bc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7fc fb3f 	bl	8007bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2224      	movs	r2, #36	; 0x24
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 0201 	bic.w	r2, r2, #1
 800b564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fa50 	bl	800ba14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f825 	bl	800b5c4 <UART_SetConfig>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d101      	bne.n	800b584 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e01b      	b.n	800b5bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685a      	ldr	r2, [r3, #4]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	689a      	ldr	r2, [r3, #8]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b5a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0201 	orr.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 facf 	bl	800bb58 <UART_CheckIdleState>
 800b5ba:	4603      	mov	r3, r0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5c8:	b08c      	sub	sp, #48	; 0x30
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	431a      	orrs	r2, r3
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4baf      	ldr	r3, [pc, #700]	; (800b8b0 <UART_SetConfig+0x2ec>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	6812      	ldr	r2, [r2, #0]
 800b5fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4aa4      	ldr	r2, [pc, #656]	; (800b8b4 <UART_SetConfig+0x2f0>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d004      	beq.n	800b630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b62c:	4313      	orrs	r3, r2
 800b62e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b63a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	6812      	ldr	r2, [r2, #0]
 800b642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b644:	430b      	orrs	r3, r1
 800b646:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	f023 010f 	bic.w	r1, r3, #15
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a95      	ldr	r2, [pc, #596]	; (800b8b8 <UART_SetConfig+0x2f4>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d125      	bne.n	800b6b4 <UART_SetConfig+0xf0>
 800b668:	2003      	movs	r0, #3
 800b66a:	f7ff ff3b 	bl	800b4e4 <LL_RCC_GetUSARTClockSource>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b03      	cmp	r3, #3
 800b672:	d81b      	bhi.n	800b6ac <UART_SetConfig+0xe8>
 800b674:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <UART_SetConfig+0xb8>)
 800b676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67a:	bf00      	nop
 800b67c:	0800b68d 	.word	0x0800b68d
 800b680:	0800b69d 	.word	0x0800b69d
 800b684:	0800b695 	.word	0x0800b695
 800b688:	0800b6a5 	.word	0x0800b6a5
 800b68c:	2301      	movs	r3, #1
 800b68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b692:	e042      	b.n	800b71a <UART_SetConfig+0x156>
 800b694:	2302      	movs	r3, #2
 800b696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b69a:	e03e      	b.n	800b71a <UART_SetConfig+0x156>
 800b69c:	2304      	movs	r3, #4
 800b69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6a2:	e03a      	b.n	800b71a <UART_SetConfig+0x156>
 800b6a4:	2308      	movs	r3, #8
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6aa:	e036      	b.n	800b71a <UART_SetConfig+0x156>
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6b2:	e032      	b.n	800b71a <UART_SetConfig+0x156>
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a7e      	ldr	r2, [pc, #504]	; (800b8b4 <UART_SetConfig+0x2f0>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d12a      	bne.n	800b714 <UART_SetConfig+0x150>
 800b6be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b6c2:	f7ff ff1f 	bl	800b504 <LL_RCC_GetLPUARTClockSource>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6cc:	d01a      	beq.n	800b704 <UART_SetConfig+0x140>
 800b6ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6d2:	d81b      	bhi.n	800b70c <UART_SetConfig+0x148>
 800b6d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d8:	d00c      	beq.n	800b6f4 <UART_SetConfig+0x130>
 800b6da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6de:	d815      	bhi.n	800b70c <UART_SetConfig+0x148>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <UART_SetConfig+0x128>
 800b6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e8:	d008      	beq.n	800b6fc <UART_SetConfig+0x138>
 800b6ea:	e00f      	b.n	800b70c <UART_SetConfig+0x148>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6f2:	e012      	b.n	800b71a <UART_SetConfig+0x156>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6fa:	e00e      	b.n	800b71a <UART_SetConfig+0x156>
 800b6fc:	2304      	movs	r3, #4
 800b6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b702:	e00a      	b.n	800b71a <UART_SetConfig+0x156>
 800b704:	2308      	movs	r3, #8
 800b706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b70a:	e006      	b.n	800b71a <UART_SetConfig+0x156>
 800b70c:	2310      	movs	r3, #16
 800b70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b712:	e002      	b.n	800b71a <UART_SetConfig+0x156>
 800b714:	2310      	movs	r3, #16
 800b716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a65      	ldr	r2, [pc, #404]	; (800b8b4 <UART_SetConfig+0x2f0>)
 800b720:	4293      	cmp	r3, r2
 800b722:	f040 8097 	bne.w	800b854 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d823      	bhi.n	800b776 <UART_SetConfig+0x1b2>
 800b72e:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <UART_SetConfig+0x170>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b759 	.word	0x0800b759
 800b738:	0800b777 	.word	0x0800b777
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b777 	.word	0x0800b777
 800b744:	0800b767 	.word	0x0800b767
 800b748:	0800b777 	.word	0x0800b777
 800b74c:	0800b777 	.word	0x0800b777
 800b750:	0800b777 	.word	0x0800b777
 800b754:	0800b76f 	.word	0x0800b76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b758:	f7fe fb94 	bl	8009e84 <HAL_RCC_GetPCLK1Freq>
 800b75c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b75e:	e010      	b.n	800b782 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b760:	4b56      	ldr	r3, [pc, #344]	; (800b8bc <UART_SetConfig+0x2f8>)
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b764:	e00d      	b.n	800b782 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b766:	f7fe fb0d 	bl	8009d84 <HAL_RCC_GetSysClockFreq>
 800b76a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b76c:	e009      	b.n	800b782 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b774:	e005      	b.n	800b782 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 812b 	beq.w	800b9e0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	4a4c      	ldr	r2, [pc, #304]	; (800b8c0 <UART_SetConfig+0x2fc>)
 800b790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b794:	461a      	mov	r2, r3
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	fbb3 f3f2 	udiv	r3, r3, r2
 800b79c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4413      	add	r3, r2
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d305      	bcc.n	800b7ba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d903      	bls.n	800b7c2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7c0:	e10e      	b.n	800b9e0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	60bb      	str	r3, [r7, #8]
 800b7c8:	60fa      	str	r2, [r7, #12]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	4a3c      	ldr	r2, [pc, #240]	; (800b8c0 <UART_SetConfig+0x2fc>)
 800b7d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	603b      	str	r3, [r7, #0]
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7e4:	f7fa ff9e 	bl	8006724 <__aeabi_uldivmod>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	020b      	lsls	r3, r1, #8
 800b7fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b7fe:	0202      	lsls	r2, r0, #8
 800b800:	6979      	ldr	r1, [r7, #20]
 800b802:	6849      	ldr	r1, [r1, #4]
 800b804:	0849      	lsrs	r1, r1, #1
 800b806:	2000      	movs	r0, #0
 800b808:	460c      	mov	r4, r1
 800b80a:	4605      	mov	r5, r0
 800b80c:	eb12 0804 	adds.w	r8, r2, r4
 800b810:	eb43 0905 	adc.w	r9, r3, r5
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	469a      	mov	sl, r3
 800b81c:	4693      	mov	fp, r2
 800b81e:	4652      	mov	r2, sl
 800b820:	465b      	mov	r3, fp
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7fa ff7d 	bl	8006724 <__aeabi_uldivmod>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4613      	mov	r3, r2
 800b830:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b838:	d308      	bcc.n	800b84c <UART_SetConfig+0x288>
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b840:	d204      	bcs.n	800b84c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6a3a      	ldr	r2, [r7, #32]
 800b848:	60da      	str	r2, [r3, #12]
 800b84a:	e0c9      	b.n	800b9e0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b852:	e0c5      	b.n	800b9e0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b85c:	d16d      	bne.n	800b93a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b85e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b862:	3b01      	subs	r3, #1
 800b864:	2b07      	cmp	r3, #7
 800b866:	d82d      	bhi.n	800b8c4 <UART_SetConfig+0x300>
 800b868:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <UART_SetConfig+0x2ac>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b891 	.word	0x0800b891
 800b874:	0800b899 	.word	0x0800b899
 800b878:	0800b8c5 	.word	0x0800b8c5
 800b87c:	0800b89f 	.word	0x0800b89f
 800b880:	0800b8c5 	.word	0x0800b8c5
 800b884:	0800b8c5 	.word	0x0800b8c5
 800b888:	0800b8c5 	.word	0x0800b8c5
 800b88c:	0800b8a7 	.word	0x0800b8a7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b890:	f7fe fb0e 	bl	8009eb0 <HAL_RCC_GetPCLK2Freq>
 800b894:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b896:	e01b      	b.n	800b8d0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b898:	4b08      	ldr	r3, [pc, #32]	; (800b8bc <UART_SetConfig+0x2f8>)
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b89c:	e018      	b.n	800b8d0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b89e:	f7fe fa71 	bl	8009d84 <HAL_RCC_GetSysClockFreq>
 800b8a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8a4:	e014      	b.n	800b8d0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8ac:	e010      	b.n	800b8d0 <UART_SetConfig+0x30c>
 800b8ae:	bf00      	nop
 800b8b0:	cfff69f3 	.word	0xcfff69f3
 800b8b4:	40008000 	.word	0x40008000
 800b8b8:	40013800 	.word	0x40013800
 800b8bc:	00f42400 	.word	0x00f42400
 800b8c0:	08012170 	.word	0x08012170
      default:
        pclk = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 8084 	beq.w	800b9e0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	4a4b      	ldr	r2, [pc, #300]	; (800ba0c <UART_SetConfig+0x448>)
 800b8de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8ea:	005a      	lsls	r2, r3, #1
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	085b      	lsrs	r3, r3, #1
 800b8f2:	441a      	add	r2, r3
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	2b0f      	cmp	r3, #15
 800b902:	d916      	bls.n	800b932 <UART_SetConfig+0x36e>
 800b904:	6a3b      	ldr	r3, [r7, #32]
 800b906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b90a:	d212      	bcs.n	800b932 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	f023 030f 	bic.w	r3, r3, #15
 800b914:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	085b      	lsrs	r3, r3, #1
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	f003 0307 	and.w	r3, r3, #7
 800b920:	b29a      	uxth	r2, r3
 800b922:	8bfb      	ldrh	r3, [r7, #30]
 800b924:	4313      	orrs	r3, r2
 800b926:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	8bfa      	ldrh	r2, [r7, #30]
 800b92e:	60da      	str	r2, [r3, #12]
 800b930:	e056      	b.n	800b9e0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b938:	e052      	b.n	800b9e0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b93a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b93e:	3b01      	subs	r3, #1
 800b940:	2b07      	cmp	r3, #7
 800b942:	d822      	bhi.n	800b98a <UART_SetConfig+0x3c6>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x388>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b96d 	.word	0x0800b96d
 800b950:	0800b975 	.word	0x0800b975
 800b954:	0800b98b 	.word	0x0800b98b
 800b958:	0800b97b 	.word	0x0800b97b
 800b95c:	0800b98b 	.word	0x0800b98b
 800b960:	0800b98b 	.word	0x0800b98b
 800b964:	0800b98b 	.word	0x0800b98b
 800b968:	0800b983 	.word	0x0800b983
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b96c:	f7fe faa0 	bl	8009eb0 <HAL_RCC_GetPCLK2Freq>
 800b970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b972:	e010      	b.n	800b996 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b974:	4b26      	ldr	r3, [pc, #152]	; (800ba10 <UART_SetConfig+0x44c>)
 800b976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b978:	e00d      	b.n	800b996 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b97a:	f7fe fa03 	bl	8009d84 <HAL_RCC_GetSysClockFreq>
 800b97e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b980:	e009      	b.n	800b996 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b988:	e005      	b.n	800b996 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b994:	bf00      	nop
    }

    if (pclk != 0U)
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d021      	beq.n	800b9e0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	4a1a      	ldr	r2, [pc, #104]	; (800ba0c <UART_SetConfig+0x448>)
 800b9a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	085b      	lsrs	r3, r3, #1
 800b9b4:	441a      	add	r2, r3
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	2b0f      	cmp	r3, #15
 800b9c4:	d909      	bls.n	800b9da <UART_SetConfig+0x416>
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9cc:	d205      	bcs.n	800b9da <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	60da      	str	r2, [r3, #12]
 800b9d8:	e002      	b.n	800b9e0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b9fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3730      	adds	r7, #48	; 0x30
 800ba04:	46bd      	mov	sp, r7
 800ba06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba0a:	bf00      	nop
 800ba0c:	08012170 	.word	0x08012170
 800ba10:	00f42400 	.word	0x00f42400

0800ba14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba20:	f003 0308 	and.w	r3, r3, #8
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00a      	beq.n	800ba3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba64:	f003 0302 	and.w	r3, r3, #2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba86:	f003 0304 	and.w	r3, r3, #4
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	430a      	orrs	r2, r1
 800baa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa8:	f003 0310 	and.w	r3, r3, #16
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d01a      	beq.n	800bb2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb12:	d10a      	bne.n	800bb2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00a      	beq.n	800bb4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	430a      	orrs	r2, r1
 800bb4a:	605a      	str	r2, [r3, #4]
  }
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b098      	sub	sp, #96	; 0x60
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb68:	f7fc faf2 	bl	8008150 <HAL_GetTick>
 800bb6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0308 	and.w	r3, r3, #8
 800bb78:	2b08      	cmp	r3, #8
 800bb7a:	d12f      	bne.n	800bbdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb84:	2200      	movs	r2, #0
 800bb86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f88e 	bl	800bcac <UART_WaitOnFlagUntilTimeout>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d022      	beq.n	800bbdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	e853 3f00 	ldrex	r3, [r3]
 800bba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbaa:	653b      	str	r3, [r7, #80]	; 0x50
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbb4:	647b      	str	r3, [r7, #68]	; 0x44
 800bbb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbbc:	e841 2300 	strex	r3, r2, [r1]
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1e6      	bne.n	800bb96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e063      	b.n	800bca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0304 	and.w	r3, r3, #4
 800bbe6:	2b04      	cmp	r3, #4
 800bbe8:	d149      	bne.n	800bc7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f857 	bl	800bcac <UART_WaitOnFlagUntilTimeout>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d03c      	beq.n	800bc7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	623b      	str	r3, [r7, #32]
   return(result);
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc22:	633b      	str	r3, [r7, #48]	; 0x30
 800bc24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e6      	bne.n	800bc04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f023 0301 	bic.w	r3, r3, #1
 800bc4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3308      	adds	r3, #8
 800bc54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc56:	61fa      	str	r2, [r7, #28]
 800bc58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	69b9      	ldr	r1, [r7, #24]
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	617b      	str	r3, [r7, #20]
   return(result);
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e5      	bne.n	800bc36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e012      	b.n	800bca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2220      	movs	r2, #32
 800bc82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3758      	adds	r7, #88	; 0x58
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	603b      	str	r3, [r7, #0]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcbc:	e049      	b.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc4:	d045      	beq.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcc6:	f7fc fa43 	bl	8008150 <HAL_GetTick>
 800bcca:	4602      	mov	r2, r0
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	69ba      	ldr	r2, [r7, #24]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d302      	bcc.n	800bcdc <UART_WaitOnFlagUntilTimeout+0x30>
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e048      	b.n	800bd72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 0304 	and.w	r3, r3, #4
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d031      	beq.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	f003 0308 	and.w	r3, r3, #8
 800bcf8:	2b08      	cmp	r3, #8
 800bcfa:	d110      	bne.n	800bd1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2208      	movs	r2, #8
 800bd02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f838 	bl	800bd7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2208      	movs	r2, #8
 800bd0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e029      	b.n	800bd72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd2c:	d111      	bne.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 f81e 	bl	800bd7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e00f      	b.n	800bd72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	bf0c      	ite	eq
 800bd62:	2301      	moveq	r3, #1
 800bd64:	2300      	movne	r3, #0
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d0a6      	beq.n	800bcbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b095      	sub	sp, #84	; 0x54
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bda0:	643b      	str	r3, [r7, #64]	; 0x40
 800bda2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bda6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bda8:	e841 2300 	strex	r3, r2, [r1]
 800bdac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1e6      	bne.n	800bd82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3308      	adds	r3, #8
 800bdba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	e853 3f00 	ldrex	r3, [r3]
 800bdc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdca:	f023 0301 	bic.w	r3, r3, #1
 800bdce:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e3      	bne.n	800bdb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d118      	bne.n	800be26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	60bb      	str	r3, [r7, #8]
   return(result);
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	f023 0310 	bic.w	r3, r3, #16
 800be08:	647b      	str	r3, [r7, #68]	; 0x44
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	461a      	mov	r2, r3
 800be10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be12:	61bb      	str	r3, [r7, #24]
 800be14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	6979      	ldr	r1, [r7, #20]
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	e841 2300 	strex	r3, r2, [r1]
 800be1e:	613b      	str	r3, [r7, #16]
   return(result);
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1e6      	bne.n	800bdf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2220      	movs	r2, #32
 800be2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	675a      	str	r2, [r3, #116]	; 0x74
}
 800be3a:	bf00      	nop
 800be3c:	3754      	adds	r7, #84	; 0x54
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be46:	b480      	push	{r7}
 800be48:	b085      	sub	sp, #20
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be54:	2b01      	cmp	r3, #1
 800be56:	d101      	bne.n	800be5c <HAL_UARTEx_DisableFifoMode+0x16>
 800be58:	2302      	movs	r3, #2
 800be5a:	e027      	b.n	800beac <HAL_UARTEx_DisableFifoMode+0x66>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2224      	movs	r2, #36	; 0x24
 800be68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 0201 	bic.w	r2, r2, #1
 800be82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2220      	movs	r2, #32
 800be9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800becc:	2302      	movs	r3, #2
 800bece:	e02d      	b.n	800bf2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2224      	movs	r2, #36	; 0x24
 800bedc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f022 0201 	bic.w	r2, r2, #1
 800bef6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f84f 	bl	800bfb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2220      	movs	r2, #32
 800bf1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d101      	bne.n	800bf4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e02d      	b.n	800bfa8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2224      	movs	r2, #36	; 0x24
 800bf58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f022 0201 	bic.w	r2, r2, #1
 800bf72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f811 	bl	800bfb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d108      	bne.n	800bfd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfd0:	e031      	b.n	800c036 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfd6:	2308      	movs	r3, #8
 800bfd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	0e5b      	lsrs	r3, r3, #25
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	0f5b      	lsrs	r3, r3, #29
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0307 	and.w	r3, r3, #7
 800bff8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	7b3a      	ldrb	r2, [r7, #12]
 800bffe:	4911      	ldr	r1, [pc, #68]	; (800c044 <UARTEx_SetNbDataToProcess+0x94>)
 800c000:	5c8a      	ldrb	r2, [r1, r2]
 800c002:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c006:	7b3a      	ldrb	r2, [r7, #12]
 800c008:	490f      	ldr	r1, [pc, #60]	; (800c048 <UARTEx_SetNbDataToProcess+0x98>)
 800c00a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c00c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c010:	b29a      	uxth	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	7b7a      	ldrb	r2, [r7, #13]
 800c01c:	4909      	ldr	r1, [pc, #36]	; (800c044 <UARTEx_SetNbDataToProcess+0x94>)
 800c01e:	5c8a      	ldrb	r2, [r1, r2]
 800c020:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c024:	7b7a      	ldrb	r2, [r7, #13]
 800c026:	4908      	ldr	r1, [pc, #32]	; (800c048 <UARTEx_SetNbDataToProcess+0x98>)
 800c028:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c02a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c02e:	b29a      	uxth	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c036:	bf00      	nop
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	08012188 	.word	0x08012188
 800c048:	08012190 	.word	0x08012190

0800c04c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c054:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c058:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c060:	b29a      	uxth	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	b29b      	uxth	r3, r3
 800c066:	43db      	mvns	r3, r3
 800c068:	b29b      	uxth	r3, r3
 800c06a:	4013      	ands	r3, r2
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c082:	b084      	sub	sp, #16
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	f107 0014 	add.w	r0, r7, #20
 800c090:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	b004      	add	sp, #16
 800c0c2:	4770      	bx	lr

0800c0c4 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c0ca:	1d3b      	adds	r3, r7, #4
 800c0cc:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	f64f 4070 	movw	r0, #64624	; 0xfc70
 800c0d8:	f000 f920 	bl	800c31c <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	330b      	adds	r3, #11
 800c0e0:	78db      	ldrb	r3, [r3, #3]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b08b      	sub	sp, #44	; 0x2c
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800c108:	2300      	movs	r3, #0
 800c10a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800c114:	4b4a      	ldr	r3, [pc, #296]	; (800c240 <SHCI_GetWirelessFwInfo+0x154>)
 800c116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c118:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c11c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c126:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a44      	ldr	r2, [pc, #272]	; (800c244 <SHCI_GetWirelessFwInfo+0x158>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d10f      	bne.n	800c158 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	e01a      	b.n	800c18e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c160:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800c164:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	695b      	ldr	r3, [r3, #20]
 800c174:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	0e1b      	lsrs	r3, r3, #24
 800c192:	b2da      	uxtb	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	0c1b      	lsrs	r3, r3, #16
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	0a1b      	lsrs	r3, r3, #8
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	091b      	lsrs	r3, r3, #4
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	f003 030f 	and.w	r3, r3, #15
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	0e1b      	lsrs	r3, r3, #24
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	0c1b      	lsrs	r3, r3, #16
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c1de:	6a3b      	ldr	r3, [r7, #32]
 800c1e0:	0a1b      	lsrs	r3, r3, #8
 800c1e2:	b2da      	uxtb	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	0e1b      	lsrs	r3, r3, #24
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	0c1b      	lsrs	r3, r3, #16
 800c206:	b2da      	uxtb	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	0a1b      	lsrs	r3, r3, #8
 800c210:	b2da      	uxtb	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	0e1b      	lsrs	r3, r3, #24
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	0c1b      	lsrs	r3, r3, #16
 800c224:	b2da      	uxtb	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	372c      	adds	r7, #44	; 0x2c
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr
 800c240:	58004000 	.word	0x58004000
 800c244:	a94656b9 	.word	0xa94656b9

0800c248 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	4a08      	ldr	r2, [pc, #32]	; (800c278 <shci_init+0x30>)
 800c258:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c25a:	4a08      	ldr	r2, [pc, #32]	; (800c27c <shci_init+0x34>)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c260:	4806      	ldr	r0, [pc, #24]	; (800c27c <shci_init+0x34>)
 800c262:	f000 f915 	bl	800c490 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f898 	bl	800c3a0 <TlInit>

  return;
 800c270:	bf00      	nop
}
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	2000068c 	.word	0x2000068c
 800c27c:	2000066c 	.word	0x2000066c

0800c280 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c286:	4822      	ldr	r0, [pc, #136]	; (800c310 <shci_user_evt_proc+0x90>)
 800c288:	f000 fbae 	bl	800c9e8 <LST_is_empty>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d12b      	bne.n	800c2ea <shci_user_evt_proc+0x6a>
 800c292:	4b20      	ldr	r3, [pc, #128]	; (800c314 <shci_user_evt_proc+0x94>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d027      	beq.n	800c2ea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c29a:	f107 030c 	add.w	r3, r7, #12
 800c29e:	4619      	mov	r1, r3
 800c2a0:	481b      	ldr	r0, [pc, #108]	; (800c310 <shci_user_evt_proc+0x90>)
 800c2a2:	f000 fc30 	bl	800cb06 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c2a6:	4b1c      	ldr	r3, [pc, #112]	; (800c318 <shci_user_evt_proc+0x98>)
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00c      	beq.n	800c2c8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c2b6:	4b18      	ldr	r3, [pc, #96]	; (800c318 <shci_user_evt_proc+0x98>)
 800c2b8:	69db      	ldr	r3, [r3, #28]
 800c2ba:	1d3a      	adds	r2, r7, #4
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c2c0:	793a      	ldrb	r2, [r7, #4]
 800c2c2:	4b14      	ldr	r3, [pc, #80]	; (800c314 <shci_user_evt_proc+0x94>)
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	e002      	b.n	800c2ce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c2c8:	4b12      	ldr	r3, [pc, #72]	; (800c314 <shci_user_evt_proc+0x94>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c2ce:	4b11      	ldr	r3, [pc, #68]	; (800c314 <shci_user_evt_proc+0x94>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fa8b 	bl	800c7f4 <TL_MM_EvtDone>
 800c2de:	e004      	b.n	800c2ea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	480a      	ldr	r0, [pc, #40]	; (800c310 <shci_user_evt_proc+0x90>)
 800c2e6:	f000 fba1 	bl	800ca2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c2ea:	4809      	ldr	r0, [pc, #36]	; (800c310 <shci_user_evt_proc+0x90>)
 800c2ec:	f000 fb7c 	bl	800c9e8 <LST_is_empty>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d107      	bne.n	800c306 <shci_user_evt_proc+0x86>
 800c2f6:	4b07      	ldr	r3, [pc, #28]	; (800c314 <shci_user_evt_proc+0x94>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c2fe:	4804      	ldr	r0, [pc, #16]	; (800c310 <shci_user_evt_proc+0x90>)
 800c300:	f7fa fee4 	bl	80070cc <shci_notify_asynch_evt>
  }


  return;
 800c304:	bf00      	nop
 800c306:	bf00      	nop
}
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	2000008c 	.word	0x2000008c
 800c314:	2000009c 	.word	0x2000009c
 800c318:	2000066c 	.word	0x2000066c

0800c31c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	60ba      	str	r2, [r7, #8]
 800c324:	607b      	str	r3, [r7, #4]
 800c326:	4603      	mov	r3, r0
 800c328:	81fb      	strh	r3, [r7, #14]
 800c32a:	460b      	mov	r3, r1
 800c32c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c32e:	2000      	movs	r0, #0
 800c330:	f000 f868 	bl	800c404 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c334:	4b17      	ldr	r3, [pc, #92]	; (800c394 <shci_send+0x78>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	89fa      	ldrh	r2, [r7, #14]
 800c33a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c33e:	4b15      	ldr	r3, [pc, #84]	; (800c394 <shci_send+0x78>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	7b7a      	ldrb	r2, [r7, #13]
 800c344:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c346:	4b13      	ldr	r3, [pc, #76]	; (800c394 <shci_send+0x78>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330c      	adds	r3, #12
 800c34c:	7b7a      	ldrb	r2, [r7, #13]
 800c34e:	68b9      	ldr	r1, [r7, #8]
 800c350:	4618      	mov	r0, r3
 800c352:	f004 fcce 	bl	8010cf2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800c356:	4b10      	ldr	r3, [pc, #64]	; (800c398 <shci_send+0x7c>)
 800c358:	2201      	movs	r2, #1
 800c35a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <shci_send+0x80>)
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	2100      	movs	r1, #0
 800c362:	2000      	movs	r0, #0
 800c364:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c366:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c36a:	f7fa fec6 	bl	80070fa <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f103 0008 	add.w	r0, r3, #8
 800c374:	4b07      	ldr	r3, [pc, #28]	; (800c394 <shci_send+0x78>)
 800c376:	6819      	ldr	r1, [r3, #0]
 800c378:	4b06      	ldr	r3, [pc, #24]	; (800c394 <shci_send+0x78>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	789b      	ldrb	r3, [r3, #2]
 800c37e:	3303      	adds	r3, #3
 800c380:	461a      	mov	r2, r3
 800c382:	f004 fcb6 	bl	8010cf2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c386:	2001      	movs	r0, #1
 800c388:	f000 f83c 	bl	800c404 <Cmd_SetStatus>

  return;
 800c38c:	bf00      	nop
}
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20000098 	.word	0x20000098
 800c398:	20000690 	.word	0x20000690
 800c39c:	2000066c 	.word	0x2000066c

0800c3a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c3a8:	4a10      	ldr	r2, [pc, #64]	; (800c3ec <TlInit+0x4c>)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c3ae:	4810      	ldr	r0, [pc, #64]	; (800c3f0 <TlInit+0x50>)
 800c3b0:	f000 fb0a 	bl	800c9c8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	f000 f825 	bl	800c404 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c3ba:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <TlInit+0x54>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c3c0:	4b0d      	ldr	r3, [pc, #52]	; (800c3f8 <TlInit+0x58>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00c      	beq.n	800c3e2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c3cc:	4b0b      	ldr	r3, [pc, #44]	; (800c3fc <TlInit+0x5c>)
 800c3ce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <TlInit+0x60>)
 800c3d2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c3d4:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <TlInit+0x58>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f107 020c 	add.w	r2, r7, #12
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
  }

  return;
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
}
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000098 	.word	0x20000098
 800c3f0:	2000008c 	.word	0x2000008c
 800c3f4:	2000009c 	.word	0x2000009c
 800c3f8:	2000066c 	.word	0x2000066c
 800c3fc:	0800c455 	.word	0x0800c455
 800c400:	0800c46d 	.word	0x0800c46d

0800c404 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	4603      	mov	r3, r0
 800c40c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10b      	bne.n	800c42c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c414:	4b0d      	ldr	r3, [pc, #52]	; (800c44c <Cmd_SetStatus+0x48>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c41c:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <Cmd_SetStatus+0x48>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2000      	movs	r0, #0
 800c422:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <Cmd_SetStatus+0x4c>)
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c42a:	e00b      	b.n	800c444 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c42c:	4b08      	ldr	r3, [pc, #32]	; (800c450 <Cmd_SetStatus+0x4c>)
 800c42e:	2201      	movs	r2, #1
 800c430:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <Cmd_SetStatus+0x48>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d004      	beq.n	800c444 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c43a:	4b04      	ldr	r3, [pc, #16]	; (800c44c <Cmd_SetStatus+0x48>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2001      	movs	r0, #1
 800c440:	4798      	blx	r3
  return;
 800c442:	bf00      	nop
 800c444:	bf00      	nop
}
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	2000068c 	.word	0x2000068c
 800c450:	20000094 	.word	0x20000094

0800c454 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c45c:	2000      	movs	r0, #0
 800c45e:	f7fa fe41 	bl	80070e4 <shci_cmd_resp_release>

  return;
 800c462:	bf00      	nop
}
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
	...

0800c46c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	4805      	ldr	r0, [pc, #20]	; (800c48c <TlUserEvtReceived+0x20>)
 800c478:	f000 fafe 	bl	800ca78 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c47c:	4803      	ldr	r0, [pc, #12]	; (800c48c <TlUserEvtReceived+0x20>)
 800c47e:	f7fa fe25 	bl	80070cc <shci_notify_asynch_evt>

  return;
 800c482:	bf00      	nop
}
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	2000008c 	.word	0x2000008c

0800c490 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a05      	ldr	r2, [pc, #20]	; (800c4b0 <shci_register_io_bus+0x20>)
 800c49c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a04      	ldr	r2, [pc, #16]	; (800c4b4 <shci_register_io_bus+0x24>)
 800c4a2:	611a      	str	r2, [r3, #16]

  return;
 800c4a4:	bf00      	nop
}
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	0800c5ad 	.word	0x0800c5ad
 800c4b4:	0800c601 	.word	0x0800c601

0800c4b8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c4bc:	f003 fde4 	bl	8010088 <HW_IPCC_Enable>

  return;
 800c4c0:	bf00      	nop
}
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <TL_Init>:


void TL_Init( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c4c8:	4b10      	ldr	r3, [pc, #64]	; (800c50c <TL_Init+0x48>)
 800c4ca:	4a11      	ldr	r2, [pc, #68]	; (800c510 <TL_Init+0x4c>)
 800c4cc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <TL_Init+0x48>)
 800c4d0:	4a10      	ldr	r2, [pc, #64]	; (800c514 <TL_Init+0x50>)
 800c4d2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <TL_Init+0x48>)
 800c4d6:	4a10      	ldr	r2, [pc, #64]	; (800c518 <TL_Init+0x54>)
 800c4d8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c4da:	4b0c      	ldr	r3, [pc, #48]	; (800c50c <TL_Init+0x48>)
 800c4dc:	4a0f      	ldr	r2, [pc, #60]	; (800c51c <TL_Init+0x58>)
 800c4de:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c4e0:	4b0a      	ldr	r3, [pc, #40]	; (800c50c <TL_Init+0x48>)
 800c4e2:	4a0f      	ldr	r2, [pc, #60]	; (800c520 <TL_Init+0x5c>)
 800c4e4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c4e6:	4b09      	ldr	r3, [pc, #36]	; (800c50c <TL_Init+0x48>)
 800c4e8:	4a0e      	ldr	r2, [pc, #56]	; (800c524 <TL_Init+0x60>)
 800c4ea:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c4ec:	4b07      	ldr	r3, [pc, #28]	; (800c50c <TL_Init+0x48>)
 800c4ee:	4a0e      	ldr	r2, [pc, #56]	; (800c528 <TL_Init+0x64>)
 800c4f0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c4f2:	4b06      	ldr	r3, [pc, #24]	; (800c50c <TL_Init+0x48>)
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	; (800c52c <TL_Init+0x68>)
 800c4f6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c4f8:	4b04      	ldr	r3, [pc, #16]	; (800c50c <TL_Init+0x48>)
 800c4fa:	4a0d      	ldr	r2, [pc, #52]	; (800c530 <TL_Init+0x6c>)
 800c4fc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c4fe:	4b03      	ldr	r3, [pc, #12]	; (800c50c <TL_Init+0x48>)
 800c500:	4a0c      	ldr	r2, [pc, #48]	; (800c534 <TL_Init+0x70>)
 800c502:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c504:	f003 fdd4 	bl	80100b0 <HW_IPCC_Init>

  return;
 800c508:	bf00      	nop
}
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20030000 	.word	0x20030000
 800c510:	20030028 	.word	0x20030028
 800c514:	20030048 	.word	0x20030048
 800c518:	20030058 	.word	0x20030058
 800c51c:	20030068 	.word	0x20030068
 800c520:	20030070 	.word	0x20030070
 800c524:	20030078 	.word	0x20030078
 800c528:	20030080 	.word	0x20030080
 800c52c:	2003009c 	.word	0x2003009c
 800c530:	200300a0 	.word	0x200300a0
 800c534:	200300ac 	.word	0x200300ac

0800c538 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c53e:	e01c      	b.n	800c57a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c540:	1d3b      	adds	r3, r7, #4
 800c542:	4619      	mov	r1, r3
 800c544:	4812      	ldr	r0, [pc, #72]	; (800c590 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c546:	f000 fade 	bl	800cb06 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7a5b      	ldrb	r3, [r3, #9]
 800c54e:	2b0f      	cmp	r3, #15
 800c550:	d003      	beq.n	800c55a <HW_IPCC_BLE_RxEvtNot+0x22>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7a5b      	ldrb	r3, [r3, #9]
 800c556:	2b0e      	cmp	r3, #14
 800c558:	d105      	bne.n	800c566 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4619      	mov	r1, r3
 800c55e:	2002      	movs	r0, #2
 800c560:	f000 f9ac 	bl	800c8bc <OutputDbgTrace>
 800c564:	e004      	b.n	800c570 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4619      	mov	r1, r3
 800c56a:	2003      	movs	r0, #3
 800c56c:	f000 f9a6 	bl	800c8bc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c570:	4b08      	ldr	r3, [pc, #32]	; (800c594 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	4610      	mov	r0, r2
 800c578:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c57a:	4805      	ldr	r0, [pc, #20]	; (800c590 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c57c:	f000 fa34 	bl	800c9e8 <LST_is_empty>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0dc      	beq.n	800c540 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c586:	bf00      	nop
}
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	200300c8 	.word	0x200300c8
 800c594:	2000069c 	.word	0x2000069c

0800c598 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c59c:	4b02      	ldr	r3, [pc, #8]	; (800c5a8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4798      	blx	r3

  return;
 800c5a2:	bf00      	nop
}
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200006a0 	.word	0x200006a0

0800c5ac <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c5b8:	480d      	ldr	r0, [pc, #52]	; (800c5f0 <TL_SYS_Init+0x44>)
 800c5ba:	f000 fa05 	bl	800c9c8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c5be:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <TL_SYS_Init+0x48>)
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	4a08      	ldr	r2, [pc, #32]	; (800c5f0 <TL_SYS_Init+0x44>)
 800c5d0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c5d2:	f003 fd9b 	bl	801010c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a07      	ldr	r2, [pc, #28]	; (800c5f8 <TL_SYS_Init+0x4c>)
 800c5dc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	4a06      	ldr	r2, [pc, #24]	; (800c5fc <TL_SYS_Init+0x50>)
 800c5e4:	6013      	str	r3, [r2, #0]

  return 0;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	200300d0 	.word	0x200300d0
 800c5f4:	20030000 	.word	0x20030000
 800c5f8:	200006a4 	.word	0x200006a4
 800c5fc:	200006a8 	.word	0x200006a8

0800c600 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	460b      	mov	r3, r1
 800c60a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c60c:	4b09      	ldr	r3, [pc, #36]	; (800c634 <TL_SYS_SendCmd+0x34>)
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2210      	movs	r2, #16
 800c614:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c616:	4b07      	ldr	r3, [pc, #28]	; (800c634 <TL_SYS_SendCmd+0x34>)
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4619      	mov	r1, r3
 800c61e:	2004      	movs	r0, #4
 800c620:	f000 f94c 	bl	800c8bc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c624:	f003 fd7c 	bl	8010120 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	20030000 	.word	0x20030000

0800c638 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c63c:	4b07      	ldr	r3, [pc, #28]	; (800c65c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4619      	mov	r1, r3
 800c644:	2005      	movs	r0, #5
 800c646:	f000 f939 	bl	800c8bc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c64a:	4b05      	ldr	r3, [pc, #20]	; (800c660 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a03      	ldr	r2, [pc, #12]	; (800c65c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c650:	68d2      	ldr	r2, [r2, #12]
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	4610      	mov	r0, r2
 800c656:	4798      	blx	r3

  return;
 800c658:	bf00      	nop
}
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	20030000 	.word	0x20030000
 800c660:	200006a4 	.word	0x200006a4

0800c664 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c66a:	e00e      	b.n	800c68a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c66c:	1d3b      	adds	r3, r7, #4
 800c66e:	4619      	mov	r1, r3
 800c670:	480b      	ldr	r0, [pc, #44]	; (800c6a0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c672:	f000 fa48 	bl	800cb06 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4619      	mov	r1, r3
 800c67a:	2006      	movs	r0, #6
 800c67c:	f000 f91e 	bl	800c8bc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c680:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <HW_IPCC_SYS_EvtNot+0x40>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	4610      	mov	r0, r2
 800c688:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c68a:	4805      	ldr	r0, [pc, #20]	; (800c6a0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c68c:	f000 f9ac 	bl	800c9e8 <LST_is_empty>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0ea      	beq.n	800c66c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c696:	bf00      	nop
}
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200300d0 	.word	0x200300d0
 800c6a4:	200006a8 	.word	0x200006a8

0800c6a8 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 800c6b0:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <TL_ZIGBEE_Init+0x34>)
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	689a      	ldr	r2, [r3, #8]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 800c6ce:	f003 fd4d 	bl	801016c <HW_IPCC_ZIGBEE_Init>

  return;
 800c6d2:	bf00      	nop
}
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20030000 	.word	0x20030000

0800c6e0 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c6e4:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	2208      	movs	r2, #8
 800c6ec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 800c6ee:	f003 fd4b 	bl	8010188 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 800c6f2:	bf00      	nop
}
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20030000 	.word	0x20030000

0800c6fc <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 800c700:	4b03      	ldr	r3, [pc, #12]	; (800c710 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	4618      	mov	r0, r3
 800c708:	f003 fa70 	bl	800fbec <TL_ZIGBEE_CmdEvtReceived>

  return;
 800c70c:	bf00      	nop
}
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20030000 	.word	0x20030000

0800c714 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 800c718:	4b03      	ldr	r3, [pc, #12]	; (800c728 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f003 fa6e 	bl	800fc00 <TL_ZIGBEE_NotReceived>

  return;
 800c724:	bf00      	nop
}
 800c726:	bd80      	pop	{r7, pc}
 800c728:	20030000 	.word	0x20030000

0800c72c <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c730:	4b04      	ldr	r3, [pc, #16]	; (800c744 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	220d      	movs	r2, #13
 800c738:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 800c73a:	f003 fd33 	bl	80101a4 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 800c73e:	bf00      	nop
}
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20030000 	.word	0x20030000

0800c748 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 800c74c:	4b03      	ldr	r3, [pc, #12]	; (800c75c <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	4618      	mov	r0, r3
 800c754:	f003 fa8a 	bl	800fc6c <TL_ZIGBEE_M0RequestReceived>

  return;
 800c758:	bf00      	nop
}
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	20030000 	.word	0x20030000

0800c760 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c764:	4b04      	ldr	r3, [pc, #16]	; (800c778 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	220d      	movs	r2, #13
 800c76c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 800c76e:	f003 fd4b 	bl	8010208 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 800c772:	bf00      	nop
}
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20030000 	.word	0x20030000

0800c77c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c784:	4817      	ldr	r0, [pc, #92]	; (800c7e4 <TL_MM_Init+0x68>)
 800c786:	f000 f91f 	bl	800c9c8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c78a:	4817      	ldr	r0, [pc, #92]	; (800c7e8 <TL_MM_Init+0x6c>)
 800c78c:	f000 f91c 	bl	800c9c8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c790:	4b16      	ldr	r3, [pc, #88]	; (800c7ec <TL_MM_Init+0x70>)
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	4a16      	ldr	r2, [pc, #88]	; (800c7f0 <TL_MM_Init+0x74>)
 800c796:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c798:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <TL_MM_Init+0x74>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	6892      	ldr	r2, [r2, #8]
 800c7a0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c7a2:	4b13      	ldr	r3, [pc, #76]	; (800c7f0 <TL_MM_Init+0x74>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68d2      	ldr	r2, [r2, #12]
 800c7aa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c7ac:	4b10      	ldr	r3, [pc, #64]	; (800c7f0 <TL_MM_Init+0x74>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a0c      	ldr	r2, [pc, #48]	; (800c7e4 <TL_MM_Init+0x68>)
 800c7b2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c7b4:	4b0e      	ldr	r3, [pc, #56]	; (800c7f0 <TL_MM_Init+0x74>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	6812      	ldr	r2, [r2, #0]
 800c7bc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c7be:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <TL_MM_Init+0x74>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6852      	ldr	r2, [r2, #4]
 800c7c6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c7c8:	4b09      	ldr	r3, [pc, #36]	; (800c7f0 <TL_MM_Init+0x74>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	6912      	ldr	r2, [r2, #16]
 800c7d0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c7d2:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <TL_MM_Init+0x74>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6952      	ldr	r2, [r2, #20]
 800c7da:	619a      	str	r2, [r3, #24]

  return;
 800c7dc:	bf00      	nop
}
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	200300b8 	.word	0x200300b8
 800c7e8:	20000694 	.word	0x20000694
 800c7ec:	20030000 	.word	0x20030000
 800c7f0:	200006ac 	.word	0x200006ac

0800c7f4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c7fc:	6879      	ldr	r1, [r7, #4]
 800c7fe:	4807      	ldr	r0, [pc, #28]	; (800c81c <TL_MM_EvtDone+0x28>)
 800c800:	f000 f93a 	bl	800ca78 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	2000      	movs	r0, #0
 800c808:	f000 f858 	bl	800c8bc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c80c:	4804      	ldr	r0, [pc, #16]	; (800c820 <TL_MM_EvtDone+0x2c>)
 800c80e:	f003 fd09 	bl	8010224 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c812:	bf00      	nop
}
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	20000694 	.word	0x20000694
 800c820:	0800c825 	.word	0x0800c825

0800c824 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c82a:	e00c      	b.n	800c846 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c82c:	1d3b      	adds	r3, r7, #4
 800c82e:	4619      	mov	r1, r3
 800c830:	480a      	ldr	r0, [pc, #40]	; (800c85c <SendFreeBuf+0x38>)
 800c832:	f000 f968 	bl	800cb06 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c836:	4b0a      	ldr	r3, [pc, #40]	; (800c860 <SendFreeBuf+0x3c>)
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	4611      	mov	r1, r2
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f919 	bl	800ca78 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c846:	4805      	ldr	r0, [pc, #20]	; (800c85c <SendFreeBuf+0x38>)
 800c848:	f000 f8ce 	bl	800c9e8 <LST_is_empty>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0ec      	beq.n	800c82c <SendFreeBuf+0x8>
  }

  return;
 800c852:	bf00      	nop
}
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000694 	.word	0x20000694
 800c860:	20030000 	.word	0x20030000

0800c864 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c868:	4805      	ldr	r0, [pc, #20]	; (800c880 <TL_TRACES_Init+0x1c>)
 800c86a:	f000 f8ad 	bl	800c9c8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <TL_TRACES_Init+0x20>)
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	4a03      	ldr	r2, [pc, #12]	; (800c880 <TL_TRACES_Init+0x1c>)
 800c874:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c876:	f003 fd0b 	bl	8010290 <HW_IPCC_TRACES_Init>

  return;
 800c87a:	bf00      	nop
}
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	200300c0 	.word	0x200300c0
 800c884:	20030000 	.word	0x20030000

0800c888 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c88e:	e008      	b.n	800c8a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c890:	1d3b      	adds	r3, r7, #4
 800c892:	4619      	mov	r1, r3
 800c894:	4808      	ldr	r0, [pc, #32]	; (800c8b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c896:	f000 f936 	bl	800cb06 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fa fc37 	bl	8007110 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c8a2:	4805      	ldr	r0, [pc, #20]	; (800c8b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c8a4:	f000 f8a0 	bl	800c9e8 <LST_is_empty>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0f0      	beq.n	800c890 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c8ae:	bf00      	nop
}
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200300c0 	.word	0x200300c0

0800c8bc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	6039      	str	r1, [r7, #0]
 800c8c6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b06      	cmp	r3, #6
 800c8cc:	d845      	bhi.n	800c95a <OutputDbgTrace+0x9e>
 800c8ce:	a201      	add	r2, pc, #4	; (adr r2, 800c8d4 <OutputDbgTrace+0x18>)
 800c8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d4:	0800c8f1 	.word	0x0800c8f1
 800c8d8:	0800c915 	.word	0x0800c915
 800c8dc:	0800c91b 	.word	0x0800c91b
 800c8e0:	0800c92f 	.word	0x0800c92f
 800c8e4:	0800c93b 	.word	0x0800c93b
 800c8e8:	0800c941 	.word	0x0800c941
 800c8ec:	0800c94f 	.word	0x0800c94f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	7a5b      	ldrb	r3, [r3, #9]
 800c8f8:	2bff      	cmp	r3, #255	; 0xff
 800c8fa:	d005      	beq.n	800c908 <OutputDbgTrace+0x4c>
 800c8fc:	2bff      	cmp	r3, #255	; 0xff
 800c8fe:	dc05      	bgt.n	800c90c <OutputDbgTrace+0x50>
 800c900:	2b0e      	cmp	r3, #14
 800c902:	d005      	beq.n	800c910 <OutputDbgTrace+0x54>
 800c904:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c906:	e001      	b.n	800c90c <OutputDbgTrace+0x50>
          break;
 800c908:	bf00      	nop
 800c90a:	e027      	b.n	800c95c <OutputDbgTrace+0xa0>
          break;
 800c90c:	bf00      	nop
 800c90e:	e025      	b.n	800c95c <OutputDbgTrace+0xa0>
          break;
 800c910:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c912:	e023      	b.n	800c95c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c918:	e020      	b.n	800c95c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	7a5b      	ldrb	r3, [r3, #9]
 800c922:	2b0e      	cmp	r3, #14
 800c924:	d001      	beq.n	800c92a <OutputDbgTrace+0x6e>
 800c926:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c928:	e000      	b.n	800c92c <OutputDbgTrace+0x70>
          break;
 800c92a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c92c:	e016      	b.n	800c95c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	7a5b      	ldrb	r3, [r3, #9]
 800c936:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c938:	e010      	b.n	800c95c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c93e:	e00d      	b.n	800c95c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	7a5b      	ldrb	r3, [r3, #9]
 800c948:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c94a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c94c:	e006      	b.n	800c95c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	7a5b      	ldrb	r3, [r3, #9]
 800c956:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c958:	e000      	b.n	800c95c <OutputDbgTrace+0xa0>

    default:
      break;
 800c95a:	bf00      	nop
  }

  return;
 800c95c:	bf00      	nop
}
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 800c968:	b480      	push	{r7}
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	bf00      	nop
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
	...

0800c978 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c982:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <OTP_Read+0x48>)
 800c984:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c986:	e002      	b.n	800c98e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3b08      	subs	r3, #8
 800c98c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3307      	adds	r3, #7
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	79fa      	ldrb	r2, [r7, #7]
 800c996:	429a      	cmp	r2, r3
 800c998:	d003      	beq.n	800c9a2 <OTP_Read+0x2a>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4a09      	ldr	r2, [pc, #36]	; (800c9c4 <OTP_Read+0x4c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d1f2      	bne.n	800c988 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3307      	adds	r3, #7
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	79fa      	ldrb	r2, [r7, #7]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d001      	beq.n	800c9b2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	1fff73f8 	.word	0x1fff73f8
 800c9c4:	1fff7000 	.word	0x1fff7000

0800c9c8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	605a      	str	r2, [r3, #4]
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c9f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9fa:	b672      	cpsid	i
}
 800c9fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d102      	bne.n	800ca0e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	75fb      	strb	r3, [r7, #23]
 800ca0c:	e001      	b.n	800ca12 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	75fb      	strb	r3, [r7, #23]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	f383 8810 	msr	PRIMASK, r3
}
 800ca1c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	371c      	adds	r7, #28
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca36:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca40:	b672      	cpsid	i
}
 800ca42:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	605a      	str	r2, [r3, #4]
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f383 8810 	msr	PRIMASK, r3
}
 800ca6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ca6c:	bf00      	nop
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca82:	f3ef 8310 	mrs	r3, PRIMASK
 800ca86:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca88:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca8c:	b672      	cpsid	i
}
 800ca8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	683a      	ldr	r2, [r7, #0]
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f383 8810 	msr	PRIMASK, r3
}
 800cab6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cab8:	bf00      	nop
 800caba:	371c      	adds	r7, #28
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b087      	sub	sp, #28
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cacc:	f3ef 8310 	mrs	r3, PRIMASK
 800cad0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cad2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cad6:	b672      	cpsid	i
}
 800cad8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	6812      	ldr	r2, [r2, #0]
 800cae2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6852      	ldr	r2, [r2, #4]
 800caec:	605a      	str	r2, [r3, #4]
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	f383 8810 	msr	PRIMASK, r3
}
 800caf8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cafa:	bf00      	nop
 800cafc:	371c      	adds	r7, #28
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb10:	f3ef 8310 	mrs	r3, PRIMASK
 800cb14:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb16:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb1a:	b672      	cpsid	i
}
 800cb1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff ffca 	bl	800cac4 <LST_remove_node>
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f383 8810 	msr	PRIMASK, r3
}
 800cb3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb3c:	bf00      	nop
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 800cb50:	2300      	movs	r3, #0
 800cb52:	617b      	str	r3, [r7, #20]
 800cb54:	e00a      	b.n	800cb6c <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	441a      	add	r2, r3
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	440b      	add	r3, r1
 800cb62:	7812      	ldrb	r2, [r2, #0]
 800cb64:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d3f0      	bcc.n	800cb56 <zb_ipc_m4_memcpy2+0x12>
    }
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 800cb8c:	200c      	movs	r0, #12
 800cb8e:	f003 fe23 	bl	80107d8 <malloc>
 800cb92:	4603      	mov	r3, r0
 800cb94:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00a      	beq.n	800cbb2 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 800cb9c:	220c      	movs	r2, #12
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f004 f80c 	bl	8010bbe <memset>
        info->callback = callback;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	605a      	str	r2, [r3, #4]
    }
    return info;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
    free(info);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f003 fe0f 	bl	80107e8 <free>
}
 800cbca:	bf00      	nop
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800cbda:	f002 ffbf 	bl	800fb5c <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800cbde:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d006      	beq.n	800cbf6 <zb_ipc_m4_get_retval+0x22>
 800cbe8:	4b09      	ldr	r3, [pc, #36]	; (800cc10 <zb_ipc_m4_get_retval+0x3c>)
 800cbea:	4a0a      	ldr	r2, [pc, #40]	; (800cc14 <zb_ipc_m4_get_retval+0x40>)
 800cbec:	f240 114d 	movw	r1, #333	; 0x14d
 800cbf0:	4809      	ldr	r0, [pc, #36]	; (800cc18 <zb_ipc_m4_get_retval+0x44>)
 800cbf2:	f003 fdd3 	bl	801079c <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f103 0108 	add.w	r1, r3, #8
 800cbfc:	463b      	mov	r3, r7
 800cbfe:	2204      	movs	r2, #4
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff ff9f 	bl	800cb44 <zb_ipc_m4_memcpy2>
    return retval;
 800cc06:	683b      	ldr	r3, [r7, #0]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	08011b4c 	.word	0x08011b4c
 800cc14:	080123bc 	.word	0x080123bc
 800cc18:	08011b60 	.word	0x08011b60

0800cc1c <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
 800cc28:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 800cc2a:	4b25      	ldr	r3, [pc, #148]	; (800ccc0 <ZbInit+0xa4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <ZbInit+0x1a>
        return NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e03f      	b.n	800ccb6 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 800cc36:	f002 fff3 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cc3a:	f002 ff83 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cc3e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f042 020a 	orr.w	r2, r2, #10
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	705a      	strb	r2, [r3, #1]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	709a      	strb	r2, [r3, #2]
 800cc52:	2200      	movs	r2, #0
 800cc54:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f042 0204 	orr.w	r2, r2, #4
 800cc5e:	711a      	strb	r2, [r3, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	715a      	strb	r2, [r3, #5]
 800cc64:	2200      	movs	r2, #0
 800cc66:	719a      	strb	r2, [r3, #6]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	f107 0108 	add.w	r1, r7, #8
 800cc74:	2208      	movs	r2, #8
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7ff ff64 	bl	800cb44 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800cc88:	f002 ff8c 	bl	800fba4 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 800cc8c:	f7ff ffa2 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461a      	mov	r2, r3
 800cc94:	4b0a      	ldr	r3, [pc, #40]	; (800ccc0 <ZbInit+0xa4>)
 800cc96:	601a      	str	r2, [r3, #0]
    if (setLogging != NULL) {
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d007      	beq.n	800ccae <ZbInit+0x92>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	4a07      	ldr	r2, [pc, #28]	; (800ccc0 <ZbInit+0xa4>)
 800cca4:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a05      	ldr	r2, [pc, #20]	; (800ccc0 <ZbInit+0xa4>)
 800ccac:	6093      	str	r3, [r2, #8]
    }
    Post_ZigbeeCmdProcessing();
 800ccae:	f7ff fe5b 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return zb_ipc_globals.zb;
 800ccb2:	4b03      	ldr	r3, [pc, #12]	; (800ccc0 <ZbInit+0xa4>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200006c4 	.word	0x200006c4

0800ccc4 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800ccd0:	f002 ffa6 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ccd4:	f002 ff36 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ccd8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f042 0213 	orr.w	r2, r2, #19
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	2200      	movs	r2, #0
 800cce6:	705a      	strb	r2, [r3, #1]
 800cce8:	2200      	movs	r2, #0
 800ccea:	709a      	strb	r2, [r3, #2]
 800ccec:	2200      	movs	r2, #0
 800ccee:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f042 0202 	orr.w	r2, r2, #2
 800ccf8:	711a      	strb	r2, [r3, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	715a      	strb	r2, [r3, #5]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	719a      	strb	r2, [r3, #6]
 800cd02:	2200      	movs	r2, #0
 800cd04:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 800cd0c:	4b0c      	ldr	r3, [pc, #48]	; (800cd40 <ZbSetLogging+0x7c>)
 800cd0e:	7b1b      	ldrb	r3, [r3, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <ZbSetLogging+0x56>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <ZbSetLogging+0x5a>
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	e000      	b.n	800cd20 <ZbSetLogging+0x5c>
 800cd1e:	2200      	movs	r2, #0
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cd24:	f002 ff3e 	bl	800fba4 <ZIGBEE_CmdTransfer>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 800cd28:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <ZbSetLogging+0x7c>)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 800cd2e:	4a04      	ldr	r2, [pc, #16]	; (800cd40 <ZbSetLogging+0x7c>)
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	6093      	str	r3, [r2, #8]
    Post_ZigbeeCmdProcessing();
 800cd34:	f7ff fe18 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800cd38:	bf00      	nop
 800cd3a:	3718      	adds	r7, #24
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	200006c4 	.word	0x200006c4

0800cd44 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 800cd4c:	f04f 0200 	mov.w	r2, #0
 800cd50:	f04f 0300 	mov.w	r3, #0
 800cd54:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 800cd58:	f002 ff62 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cd5c:	f002 fef2 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cd60:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f042 020e 	orr.w	r2, r2, #14
 800cd6a:	701a      	strb	r2, [r3, #0]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	705a      	strb	r2, [r3, #1]
 800cd70:	2200      	movs	r2, #0
 800cd72:	709a      	strb	r2, [r3, #2]
 800cd74:	2200      	movs	r2, #0
 800cd76:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	711a      	strb	r2, [r3, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	715a      	strb	r2, [r3, #5]
 800cd82:	2200      	movs	r2, #0
 800cd84:	719a      	strb	r2, [r3, #6]
 800cd86:	2200      	movs	r2, #0
 800cd88:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800cd8a:	f002 ff0b 	bl	800fba4 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800cd8e:	f002 fee5 	bl	800fb5c <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800cd92:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d006      	beq.n	800cdaa <ZbExtendedAddress+0x66>
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <ZbExtendedAddress+0x8c>)
 800cd9e:	4a0d      	ldr	r2, [pc, #52]	; (800cdd4 <ZbExtendedAddress+0x90>)
 800cda0:	f240 11c9 	movw	r1, #457	; 0x1c9
 800cda4:	480c      	ldr	r0, [pc, #48]	; (800cdd8 <ZbExtendedAddress+0x94>)
 800cda6:	f003 fcf9 	bl	801079c <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f103 0108 	add.w	r1, r3, #8
 800cdb0:	f107 0308 	add.w	r3, r7, #8
 800cdb4:	2208      	movs	r2, #8
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fec4 	bl	800cb44 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 800cdbc:	f7ff fdd4 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 800cdc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	08011ba0 	.word	0x08011ba0
 800cdd4:	080123d4 	.word	0x080123d4
 800cdd8:	08011b60 	.word	0x08011b60

0800cddc <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 800cde8:	f107 020e 	add.w	r2, r7, #14
 800cdec:	2302      	movs	r3, #2
 800cdee:	2196      	movs	r1, #150	; 0x96
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fc73 	bl	800d6dc <ZbNwkGet>
    return nwkAddr;
 800cdf6:	89fb      	ldrh	r3, [r7, #14]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800ce08:	f002 ff0a 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ce0c:	f002 fe9a 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ce10:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f042 021b 	orr.w	r2, r2, #27
 800ce1a:	701a      	strb	r2, [r3, #0]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	705a      	strb	r2, [r3, #1]
 800ce20:	2200      	movs	r2, #0
 800ce22:	709a      	strb	r2, [r3, #2]
 800ce24:	2200      	movs	r2, #0
 800ce26:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f042 0201 	orr.w	r2, r2, #1
 800ce30:	711a      	strb	r2, [r3, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	715a      	strb	r2, [r3, #5]
 800ce36:	2200      	movs	r2, #0
 800ce38:	719a      	strb	r2, [r3, #6]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800ce44:	f002 feae 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800ce48:	f7ff fd8e 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800ce4c:	bf00      	nop
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT          error_status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff fe8c 	bl	800cb82 <zb_ipc_m4_cb_info_alloc>
 800ce6a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d101      	bne.n	800ce76 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 800ce72:	2370      	movs	r3, #112	; 0x70
 800ce74:	e030      	b.n	800ced8 <ZbStartup+0x84>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	4b17      	ldr	r3, [pc, #92]	; (800cee0 <ZbStartup+0x8c>)
 800ce82:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 800ce84:	f002 fecc 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ce88:	f002 fe5c 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ce8c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f042 021c 	orr.w	r2, r2, #28
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	705a      	strb	r2, [r3, #1]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	709a      	strb	r2, [r3, #2]
 800cea0:	2200      	movs	r2, #0
 800cea2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f042 0202 	orr.w	r2, r2, #2
 800ceac:	711a      	strb	r2, [r3, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	715a      	strb	r2, [r3, #5]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	719a      	strb	r2, [r3, #6]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800cec0:	69fa      	ldr	r2, [r7, #28]
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cec6:	f002 fe6d 	bl	800fba4 <ZIGBEE_CmdTransfer>

    error_status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 800ceca:	f7ff fe83 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800cece:	4603      	mov	r3, r0
 800ced0:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800ced2:	f7ff fd49 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return error_status;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3720      	adds	r7, #32
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	200006b0 	.word	0x200006b0

0800cee4 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08c      	sub	sp, #48	; 0x30
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	607a      	str	r2, [r7, #4]
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	460b      	mov	r3, r1
 800cef2:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT   bdbGetReq;
    struct ZbBdbGetConfT  bdbGetConf;
    enum ZbStatusCodeT    error_code;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 800cef4:	897b      	ldrh	r3, [r7, #10]
 800cef6:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 800cf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 800cf04:	f002 fe8c 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cf08:	f002 fe1c 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cf0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	2200      	movs	r2, #0
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f042 0202 	orr.w	r2, r2, #2
 800cf1a:	705a      	strb	r2, [r3, #1]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	709a      	strb	r2, [r3, #2]
 800cf20:	2200      	movs	r2, #0
 800cf22:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	2200      	movs	r2, #0
 800cf28:	f042 0202 	orr.w	r2, r2, #2
 800cf2c:	711a      	strb	r2, [r3, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	715a      	strb	r2, [r3, #5]
 800cf32:	2200      	movs	r2, #0
 800cf34:	719a      	strb	r2, [r3, #6]
 800cf36:	2200      	movs	r2, #0
 800cf38:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 800cf3a:	f107 0218 	add.w	r2, r7, #24
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 800cf42:	f107 0214 	add.w	r2, r7, #20
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cf4a:	f002 fe2b 	bl	800fba4 <ZIGBEE_CmdTransfer>
    error_code = (enum ZbStatusCodeT)bdbGetConf.status;
 800cf4e:	7d3b      	ldrb	r3, [r7, #20]
 800cf50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Post_ZigbeeCmdProcessing();
 800cf54:	f7ff fd08 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return error_code;
 800cf58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3730      	adds	r7, #48	; 0x30
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <aps_req_sanity_check>:
/* arbitrary, but even with fragmentation we can't send packets longer than this */
#define APS_REQ_BUFV_ELEM_MAX_LEN       2048U

static bool
aps_req_sanity_check(struct ZbApsdeDataReqT *req)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
    if ((req->txOptions & ((uint16_t)ZB_APSDE_DATAREQ_TXOPTIONS_VECTOR)) != 0U) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d02e      	beq.n	800cfd6 <aps_req_sanity_check+0x72>
        const struct ZbApsBufT *bufv;
        unsigned int i, length;

        if (req->asduLength > APS_REQ_BUFV_NUM_ELEM_MAX) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	8b9b      	ldrh	r3, [r3, #28]
 800cf7c:	2b10      	cmp	r3, #16
 800cf7e:	d901      	bls.n	800cf84 <aps_req_sanity_check+0x20>
            return false;
 800cf80:	2300      	movs	r3, #0
 800cf82:	e030      	b.n	800cfe6 <aps_req_sanity_check+0x82>
        }

        bufv = (const struct ZbApsBufT *)req->asdu;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	60fb      	str	r3, [r7, #12]
        length = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]
        for (i = 0; i < req->asduLength; i++) {
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	e014      	b.n	800cfbe <aps_req_sanity_check+0x5a>
            if (bufv[i].len > APS_REQ_BUFV_ELEM_MAX_LEN) {
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfa2:	d901      	bls.n	800cfa8 <aps_req_sanity_check+0x44>
                return false;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	e01e      	b.n	800cfe6 <aps_req_sanity_check+0x82>
            }
            length += bufv[i].len;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	00db      	lsls	r3, r3, #3
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	693a      	ldr	r2, [r7, #16]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	613b      	str	r3, [r7, #16]
        for (i = 0; i < req->asduLength; i++) {
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	8b9b      	ldrh	r3, [r3, #28]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d3e4      	bcc.n	800cf94 <aps_req_sanity_check+0x30>
        }
        if (length > APS_REQ_BUFV_ELEM_MAX_LEN) {
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfd0:	d908      	bls.n	800cfe4 <aps_req_sanity_check+0x80>
            return false;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	e007      	b.n	800cfe6 <aps_req_sanity_check+0x82>
        }
    }
    else {
        if (req->asduLength > APS_REQ_BUFV_ELEM_MAX_LEN) {
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	8b9b      	ldrh	r3, [r3, #28]
 800cfda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfde:	d901      	bls.n	800cfe4 <aps_req_sanity_check+0x80>
            return false;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	e000      	b.n	800cfe6 <aps_req_sanity_check+0x82>
        }
    }
    return true;
 800cfe4:	2301      	movs	r3, #1
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
	...

0800cff4 <ZbApsdeDataReqCallback>:

enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
 800d000:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;
    struct zb_ipc_m4_cb_info_t *info;

    /* Sanity check request before we send it across the IPCC */
    if (!aps_req_sanity_check(req)) {
 800d002:	68b8      	ldr	r0, [r7, #8]
 800d004:	f7ff ffae 	bl	800cf64 <aps_req_sanity_check>
 800d008:	4603      	mov	r3, r0
 800d00a:	f083 0301 	eor.w	r3, r3, #1
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d006      	beq.n	800d022 <ZbApsdeDataReqCallback+0x2e>
        assert(false);
 800d014:	4b23      	ldr	r3, [pc, #140]	; (800d0a4 <ZbApsdeDataReqCallback+0xb0>)
 800d016:	4a24      	ldr	r2, [pc, #144]	; (800d0a8 <ZbApsdeDataReqCallback+0xb4>)
 800d018:	f240 415c 	movw	r1, #1116	; 0x45c
 800d01c:	4823      	ldr	r0, [pc, #140]	; (800d0ac <ZbApsdeDataReqCallback+0xb8>)
 800d01e:	f003 fbbd 	bl	801079c <__assert_func>
        return ZB_APS_STATUS_ILLEGAL_REQUEST;
    }

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800d022:	6839      	ldr	r1, [r7, #0]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff fdac 	bl	800cb82 <zb_ipc_m4_cb_info_alloc>
 800d02a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <ZbApsdeDataReqCallback+0x42>
        return ZB_STATUS_ALLOC_FAIL;
 800d032:	2370      	movs	r3, #112	; 0x70
 800d034:	e031      	b.n	800d09a <ZbApsdeDataReqCallback+0xa6>
    }
    Pre_ZigbeeCmdProcessing();
 800d036:	f002 fdf3 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d03a:	f002 fd83 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d03e:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2200      	movs	r2, #0
 800d044:	f042 0204 	orr.w	r2, r2, #4
 800d048:	701a      	strb	r2, [r3, #0]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f042 0202 	orr.w	r2, r2, #2
 800d050:	705a      	strb	r2, [r3, #1]
 800d052:	2200      	movs	r2, #0
 800d054:	709a      	strb	r2, [r3, #2]
 800d056:	2200      	movs	r2, #0
 800d058:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f042 0202 	orr.w	r2, r2, #2
 800d062:	711a      	strb	r2, [r3, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	715a      	strb	r2, [r3, #5]
 800d068:	2200      	movs	r2, #0
 800d06a:	719a      	strb	r2, [r3, #6]
 800d06c:	2200      	movs	r2, #0
 800d06e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800d076:	69fa      	ldr	r2, [r7, #28]
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d07c:	f002 fd92 	bl	800fba4 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    retval = zb_ipc_m4_get_retval();
 800d080:	f7ff fda8 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d084:	6178      	str	r0, [r7, #20]
    if (retval != 0x00) {
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <ZbApsdeDataReqCallback+0x9e>
        zb_ipc_m4_cb_info_free(info);
 800d08c:	69f8      	ldr	r0, [r7, #28]
 800d08e:	f7ff fd95 	bl	800cbbc <zb_ipc_m4_cb_info_free>
    }
    Post_ZigbeeCmdProcessing();
 800d092:	f7ff fc69 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return (enum ZbStatusCodeT)retval;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	b2db      	uxtb	r3, r3
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3720      	adds	r7, #32
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	08011bb4 	.word	0x08011bb4
 800d0a8:	080123e8 	.word	0x080123e8
 800d0ac:	08011b60 	.word	0x08011b60

0800d0b0 <ZbApsEndpointProfile>:
    return bool_result;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t              val_ret;

    Pre_ZigbeeCmdProcessing();
 800d0bc:	f002 fdb0 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d0c0:	f002 fd40 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d0c4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f042 020d 	orr.w	r2, r2, #13
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f042 0202 	orr.w	r2, r2, #2
 800d0d6:	705a      	strb	r2, [r3, #1]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	709a      	strb	r2, [r3, #2]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f042 0201 	orr.w	r2, r2, #1
 800d0e8:	711a      	strb	r2, [r3, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	715a      	strb	r2, [r3, #5]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	719a      	strb	r2, [r3, #6]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 800d0f6:	78fa      	ldrb	r2, [r7, #3]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d0fc:	f002 fd52 	bl	800fba4 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 800d100:	f7ff fd68 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d104:	4603      	mov	r3, r0
 800d106:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 800d108:	f7ff fc2e 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return val_ret;
 800d10c:	897b      	ldrh	r3, [r7, #10]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 800d116:	b480      	push	{r7}
 800d118:	b083      	sub	sp, #12
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d101      	bne.n	800d12a <ZbApsAddrIsBcast+0x14>
        return true;
 800d126:	2301      	movs	r3, #1
 800d128:	e012      	b.n	800d150 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d10d      	bne.n	800d14e <ZbApsAddrIsBcast+0x38>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	88db      	ldrh	r3, [r3, #6]
 800d136:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d907      	bls.n	800d14e <ZbApsAddrIsBcast+0x38>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	88db      	ldrh	r3, [r3, #6]
 800d142:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d146:	4293      	cmp	r3, r2
 800d148:	d001      	beq.n	800d14e <ZbApsAddrIsBcast+0x38>
        return true;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e000      	b.n	800d150 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 800d14e:	2300      	movs	r3, #0
}
 800d150:	4618      	mov	r0, r3
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 800d15c:	b5b0      	push	{r4, r5, r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d10d      	bne.n	800d18a <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff fde5 	bl	800cd44 <ZbExtendedAddress>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	429d      	cmp	r5, r3
 800d180:	bf08      	it	eq
 800d182:	4294      	cmpeq	r4, r2
 800d184:	d101      	bne.n	800d18a <ZbApsAddrIsLocal+0x2e>
            return true;
 800d186:	2301      	movs	r3, #1
 800d188:	e00e      	b.n	800d1a8 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d109      	bne.n	800d1a6 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	88dc      	ldrh	r4, [r3, #6]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff fe20 	bl	800cddc <ZbShortAddress>
 800d19c:	4603      	mov	r3, r0
 800d19e:	429c      	cmp	r4, r3
 800d1a0:	d101      	bne.n	800d1a6 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e000      	b.n	800d1a8 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bdb0      	pop	{r4, r5, r7, pc}

0800d1b0 <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08a      	sub	sp, #40	; 0x28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 800d1c0:	897b      	ldrh	r3, [r7, #10]
 800d1c2:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 800d1d0:	f002 fd26 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d1d4:	f002 fcb6 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d1d8:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f042 0210 	orr.w	r2, r2, #16
 800d1e2:	701a      	strb	r2, [r3, #0]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f042 0202 	orr.w	r2, r2, #2
 800d1ea:	705a      	strb	r2, [r3, #1]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	709a      	strb	r2, [r3, #2]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f042 0202 	orr.w	r2, r2, #2
 800d1fc:	711a      	strb	r2, [r3, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	715a      	strb	r2, [r3, #5]
 800d202:	2200      	movs	r2, #0
 800d204:	719a      	strb	r2, [r3, #6]
 800d206:	2200      	movs	r2, #0
 800d208:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 800d20a:	f107 0214 	add.w	r2, r7, #20
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 800d212:	f107 0210 	add.w	r2, r7, #16
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d21a:	f002 fcc3 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d21e:	f7ff fba3 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 800d222:	7c3b      	ldrb	r3, [r7, #16]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3728      	adds	r7, #40	; 0x28
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	f002 fcf2 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
 800d23c:	f002 fc82 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d240:	6178      	str	r0, [r7, #20]
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	2200      	movs	r2, #0
 800d246:	f042 0215 	orr.w	r2, r2, #21
 800d24a:	701a      	strb	r2, [r3, #0]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f042 0202 	orr.w	r2, r2, #2
 800d252:	705a      	strb	r2, [r3, #1]
 800d254:	2200      	movs	r2, #0
 800d256:	709a      	strb	r2, [r3, #2]
 800d258:	2200      	movs	r2, #0
 800d25a:	70da      	strb	r2, [r3, #3]
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2200      	movs	r2, #0
 800d260:	f042 0202 	orr.w	r2, r2, #2
 800d264:	711a      	strb	r2, [r3, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	715a      	strb	r2, [r3, #5]
 800d26a:	2200      	movs	r2, #0
 800d26c:	719a      	strb	r2, [r3, #6]
 800d26e:	2200      	movs	r2, #0
 800d270:	71da      	strb	r2, [r3, #7]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	609a      	str	r2, [r3, #8]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	60da      	str	r2, [r3, #12]
 800d27e:	f002 fc91 	bl	800fba4 <ZIGBEE_CmdTransfer>
 800d282:	f7ff fb71 	bl	800c968 <Post_ZigbeeCmdProcessing>
 800d286:	3718      	adds	r7, #24
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b092      	sub	sp, #72	; 0x48
 800d290:	af02      	add	r7, sp, #8
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
 800d298:	4613      	mov	r3, r2
 800d29a:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7ff fd51 	bl	800cd44 <ZbExtendedAddress>
 800d2a2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800d2aa:	f107 0208 	add.w	r2, r7, #8
 800d2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	2320      	movs	r3, #32
 800d2b4:	21c1      	movs	r1, #193	; 0xc1
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff ff7a 	bl	800d1b0 <ZbApsGetIndex>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 800d2c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d120      	bne.n	800d30c <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 800d2ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	d011      	beq.n	800d2f6 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 800d2d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d2da:	4299      	cmp	r1, r3
 800d2dc:	bf08      	it	eq
 800d2de:	4290      	cmpeq	r0, r2
 800d2e0:	d10b      	bne.n	800d2fa <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 800d2e2:	7c3b      	ldrb	r3, [r7, #16]
 800d2e4:	78fa      	ldrb	r2, [r7, #3]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d109      	bne.n	800d2fe <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 800d2ea:	8a7b      	ldrh	r3, [r7, #18]
 800d2ec:	883a      	ldrh	r2, [r7, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d107      	bne.n	800d302 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e00c      	b.n	800d310 <ZbApsBindSrcExists+0x84>
            continue;
 800d2f6:	bf00      	nop
 800d2f8:	e004      	b.n	800d304 <ZbApsBindSrcExists+0x78>
            continue;
 800d2fa:	bf00      	nop
 800d2fc:	e002      	b.n	800d304 <ZbApsBindSrcExists+0x78>
            continue;
 800d2fe:	bf00      	nop
 800d300:	e000      	b.n	800d304 <ZbApsBindSrcExists+0x78>
            continue;
 800d302:	bf00      	nop
    for (i = 0;; i++) {
 800d304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d306:	3301      	adds	r3, #1
 800d308:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800d30a:	e7ce      	b.n	800d2aa <ZbApsBindSrcExists+0x1e>
            break;
 800d30c:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3740      	adds	r7, #64	; 0x40
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	4613      	mov	r3, r2
 800d326:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800d328:	2300      	movs	r3, #0
 800d32a:	61bb      	str	r3, [r7, #24]
 800d32c:	e00e      	b.n	800d34c <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	4613      	mov	r3, r2
 800d332:	005b      	lsls	r3, r3, #1
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4a28      	ldr	r2, [pc, #160]	; (800d3dc <ZbMsgFilterRegister+0xc4>)
 800d33a:	4413      	add	r3, r2
 800d33c:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d006      	beq.n	800d354 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	3301      	adds	r3, #1
 800d34a:	61bb      	str	r3, [r7, #24]
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	2b1f      	cmp	r3, #31
 800d350:	d9ed      	bls.n	800d32e <ZbMsgFilterRegister+0x16>
 800d352:	e000      	b.n	800d356 <ZbMsgFilterRegister+0x3e>
            break;
 800d354:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b20      	cmp	r3, #32
 800d35a:	d101      	bne.n	800d360 <ZbMsgFilterRegister+0x48>
        return NULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	e038      	b.n	800d3d2 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 800d360:	f002 fc5e 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d364:	f002 fbee 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d368:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f042 0210 	orr.w	r2, r2, #16
 800d372:	701a      	strb	r2, [r3, #0]
 800d374:	2200      	movs	r2, #0
 800d376:	705a      	strb	r2, [r3, #1]
 800d378:	2200      	movs	r2, #0
 800d37a:	709a      	strb	r2, [r3, #2]
 800d37c:	2200      	movs	r2, #0
 800d37e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2200      	movs	r2, #0
 800d384:	f042 0203 	orr.w	r2, r2, #3
 800d388:	711a      	strb	r2, [r3, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	715a      	strb	r2, [r3, #5]
 800d38e:	2200      	movs	r2, #0
 800d390:	719a      	strb	r2, [r3, #6]
 800d392:	2200      	movs	r2, #0
 800d394:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 800d39c:	79fa      	ldrb	r2, [r7, #7]
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 800d3a8:	f002 fbfc 	bl	800fba4 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 800d3ac:	f7ff fc12 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	613b      	str	r3, [r7, #16]
    if (filter != NULL) {
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d008      	beq.n	800d3cc <ZbMsgFilterRegister+0xb4>
        cb_info->filter = filter;
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	693a      	ldr	r2, [r7, #16]
 800d3be:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ca:	609a      	str	r2, [r3, #8]
    }
    Post_ZigbeeCmdProcessing();
 800d3cc:	f7ff facc 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return filter;
 800d3d0:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3720      	adds	r7, #32
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	200006d8 	.word	0x200006d8

0800d3e0 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d046      	beq.n	800d47e <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	613b      	str	r3, [r7, #16]
 800d3f4:	e00f      	b.n	800d416 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	4413      	add	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4a22      	ldr	r2, [pc, #136]	; (800d48c <ZbMsgFilterRemove+0xac>)
 800d402:	4413      	add	r3, r2
 800d404:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d006      	beq.n	800d41e <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	3301      	adds	r3, #1
 800d414:	613b      	str	r3, [r7, #16]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b1f      	cmp	r3, #31
 800d41a:	d9ec      	bls.n	800d3f6 <ZbMsgFilterRemove+0x16>
 800d41c:	e000      	b.n	800d420 <ZbMsgFilterRemove+0x40>
            break;
 800d41e:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	2b20      	cmp	r3, #32
 800d424:	d02d      	beq.n	800d482 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 800d426:	f002 fbfb 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d42a:	f002 fb8b 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d42e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	f042 0211 	orr.w	r2, r2, #17
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	2200      	movs	r2, #0
 800d43c:	705a      	strb	r2, [r3, #1]
 800d43e:	2200      	movs	r2, #0
 800d440:	709a      	strb	r2, [r3, #2]
 800d442:	2200      	movs	r2, #0
 800d444:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	f042 0201 	orr.w	r2, r2, #1
 800d44e:	711a      	strb	r2, [r3, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	715a      	strb	r2, [r3, #5]
 800d454:	2200      	movs	r2, #0
 800d456:	719a      	strb	r2, [r3, #6]
 800d458:	2200      	movs	r2, #0
 800d45a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d462:	f002 fb9f 	bl	800fba4 <ZIGBEE_CmdTransfer>
    cb_info->filter = NULL;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2200      	movs	r2, #0
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	2200      	movs	r2, #0
 800d46e:	705a      	strb	r2, [r3, #1]
 800d470:	2200      	movs	r2, #0
 800d472:	709a      	strb	r2, [r3, #2]
 800d474:	2200      	movs	r2, #0
 800d476:	70da      	strb	r2, [r3, #3]
    Post_ZigbeeCmdProcessing();
 800d478:	f7ff fa76 	bl	800c968 <Post_ZigbeeCmdProcessing>
 800d47c:	e002      	b.n	800d484 <ZbMsgFilterRemove+0xa4>
        return;
 800d47e:	bf00      	nop
 800d480:	e000      	b.n	800d484 <ZbMsgFilterRemove+0xa4>
        return;
 800d482:	bf00      	nop
}
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	200006d8 	.word	0x200006d8

0800d490 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 800d49c:	2300      	movs	r3, #0
 800d49e:	4a24      	ldr	r2, [pc, #144]	; (800d530 <ZbTimerAlloc+0xa0>)
 800d4a0:	210c      	movs	r1, #12
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	f000 fbb0 	bl	800dc08 <zb_heap_alloc>
 800d4a8:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d039      	beq.n	800d524 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 800d4bc:	f002 fbb0 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d4c0:	f002 fb40 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d4c4:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f042 0214 	orr.w	r2, r2, #20
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	705a      	strb	r2, [r3, #1]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	709a      	strb	r2, [r3, #2]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f042 0201 	orr.w	r2, r2, #1
 800d4e4:	711a      	strb	r2, [r3, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	715a      	strb	r2, [r3, #5]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	719a      	strb	r2, [r3, #6]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 800d4f8:	f002 fb54 	bl	800fba4 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 800d4fc:	f7ff fb6a 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d500:	4603      	mov	r3, r0
 800d502:	461a      	mov	r2, r3
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	609a      	str	r2, [r3, #8]
        if (timer->m0_timer == NULL) {
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d107      	bne.n	800d520 <ZbTimerAlloc+0x90>
            ZbHeapFree(NULL, timer);
 800d510:	2300      	movs	r3, #0
 800d512:	4a07      	ldr	r2, [pc, #28]	; (800d530 <ZbTimerAlloc+0xa0>)
 800d514:	6979      	ldr	r1, [r7, #20]
 800d516:	2000      	movs	r0, #0
 800d518:	f000 fb85 	bl	800dc26 <zb_heap_free>
            timer = NULL;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]
        }
        Post_ZigbeeCmdProcessing();
 800d520:	f7ff fa22 	bl	800c968 <Post_ZigbeeCmdProcessing>
    }
    return timer;
 800d524:	697b      	ldr	r3, [r7, #20]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	08011bbc 	.word	0x08011bbc

0800d534 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 800d53c:	f002 fb70 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d540:	f002 fb00 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d544:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	f042 0215 	orr.w	r2, r2, #21
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	2200      	movs	r2, #0
 800d552:	705a      	strb	r2, [r3, #1]
 800d554:	2200      	movs	r2, #0
 800d556:	709a      	strb	r2, [r3, #2]
 800d558:	2200      	movs	r2, #0
 800d55a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f042 0201 	orr.w	r2, r2, #1
 800d564:	711a      	strb	r2, [r3, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	715a      	strb	r2, [r3, #5]
 800d56a:	2200      	movs	r2, #0
 800d56c:	719a      	strb	r2, [r3, #6]
 800d56e:	2200      	movs	r2, #0
 800d570:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	461a      	mov	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d57c:	f002 fb12 	bl	800fba4 <ZIGBEE_CmdTransfer>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 800d580:	2300      	movs	r3, #0
 800d582:	4a05      	ldr	r2, [pc, #20]	; (800d598 <ZbTimerFree+0x64>)
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	2000      	movs	r0, #0
 800d588:	f000 fb4d 	bl	800dc26 <zb_heap_free>
    Post_ZigbeeCmdProcessing();
 800d58c:	f7ff f9ec 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800d590:	bf00      	nop
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	08011bbc 	.word	0x08011bbc

0800d59c <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d5a6:	f002 fb3b 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d5aa:	f002 facb 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d5ae:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f042 0217 	orr.w	r2, r2, #23
 800d5b8:	701a      	strb	r2, [r3, #0]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	705a      	strb	r2, [r3, #1]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	709a      	strb	r2, [r3, #2]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f042 0202 	orr.w	r2, r2, #2
 800d5ce:	711a      	strb	r2, [r3, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	715a      	strb	r2, [r3, #5]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	719a      	strb	r2, [r3, #6]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d5ec:	f002 fada 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d5f0:	f7ff f9ba 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a13      	ldr	r2, [pc, #76]	; (800d658 <ZbTimeoutRemaining+0x5c>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d909      	bls.n	800d622 <ZbTimeoutRemaining+0x26>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d614:	d805      	bhi.n	800d622 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	e014      	b.n	800d64c <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	4a0c      	ldr	r2, [pc, #48]	; (800d658 <ZbTimeoutRemaining+0x5c>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d905      	bls.n	800d636 <ZbTimeoutRemaining+0x3a>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d630:	d801      	bhi.n	800d636 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 800d632:	2300      	movs	r3, #0
 800d634:	e00a      	b.n	800d64c <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d301      	bcc.n	800d642 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	e004      	b.n	800d64c <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 800d64a:	68fb      	ldr	r3, [r7, #12]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	bffffffd 	.word	0xbffffffd

0800d65c <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b08c      	sub	sp, #48	; 0x30
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	607a      	str	r2, [r7, #4]
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	460b      	mov	r3, r1
 800d66a:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT    res;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 800d66c:	897b      	ldrh	r3, [r7, #10]
 800d66e:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24

    Pre_ZigbeeCmdProcessing();
 800d67c:	f002 fad0 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d680:	f002 fa60 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d684:	62f8      	str	r0, [r7, #44]	; 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	2200      	movs	r2, #0
 800d68a:	701a      	strb	r2, [r3, #0]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f042 0203 	orr.w	r2, r2, #3
 800d692:	705a      	strb	r2, [r3, #1]
 800d694:	2200      	movs	r2, #0
 800d696:	709a      	strb	r2, [r3, #2]
 800d698:	2200      	movs	r2, #0
 800d69a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f042 0202 	orr.w	r2, r2, #2
 800d6a4:	711a      	strb	r2, [r3, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	715a      	strb	r2, [r3, #5]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	719a      	strb	r2, [r3, #6]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 800d6b2:	f107 0218 	add.w	r2, r7, #24
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 800d6ba:	f107 0214 	add.w	r2, r7, #20
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d6c2:	f002 fa6f 	bl	800fba4 <ZIGBEE_CmdTransfer>
    res = nlmeGetConf.status;
 800d6c6:	7d3b      	ldrb	r3, [r7, #20]
 800d6c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Post_ZigbeeCmdProcessing();
 800d6cc:	f7ff f94c 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return res;
 800d6d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3730      	adds	r7, #48	; 0x30
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <ZbNwkGet>:
    return res;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	607a      	str	r2, [r7, #4]
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 800d6ec:	8979      	ldrh	r1, [r7, #10]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f7ff ffb0 	bl	800d65c <ZbNwkGetIndex>
 800d6fc:	4603      	mov	r3, r0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af02      	add	r7, sp, #8
 800d70c:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 800d70e:	f107 020c 	add.w	r2, r7, #12
 800d712:	2300      	movs	r3, #0
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	2304      	movs	r3, #4
 800d718:	f241 111d 	movw	r1, #4381	; 0x111d
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7ff fbe1 	bl	800cee4 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 800d722:	68fb      	ldr	r3, [r7, #12]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b086      	sub	sp, #24
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool                  res;

    Pre_ZigbeeCmdProcessing();
 800d738:	f002 fa72 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d73c:	f002 fa02 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d740:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	2200      	movs	r2, #0
 800d746:	f042 021d 	orr.w	r2, r2, #29
 800d74a:	701a      	strb	r2, [r3, #0]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f042 0204 	orr.w	r2, r2, #4
 800d752:	705a      	strb	r2, [r3, #1]
 800d754:	2200      	movs	r2, #0
 800d756:	709a      	strb	r2, [r3, #2]
 800d758:	2200      	movs	r2, #0
 800d75a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	2200      	movs	r2, #0
 800d760:	f042 0202 	orr.w	r2, r2, #2
 800d764:	711a      	strb	r2, [r3, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	715a      	strb	r2, [r3, #5]
 800d76a:	2200      	movs	r2, #0
 800d76c:	719a      	strb	r2, [r3, #6]
 800d76e:	2200      	movs	r2, #0
 800d770:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d77e:	f002 fa11 	bl	800fba4 <ZIGBEE_CmdTransfer>
    res = zb_ipc_m4_get_retval() != 0U ? true : false;
 800d782:	f7ff fa27 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bf14      	ite	ne
 800d78c:	2301      	movne	r3, #1
 800d78e:	2300      	moveq	r3, #0
 800d790:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 800d792:	f7ff f8e9 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return res;
 800d796:	7cfb      	ldrb	r3, [r7, #19]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <ZbZclAddEndpoint>:
    return res;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d7ac:	f002 fa38 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d7b0:	f002 f9c8 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d7b4:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	701a      	strb	r2, [r3, #0]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f042 0204 	orr.w	r2, r2, #4
 800d7c2:	705a      	strb	r2, [r3, #1]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	709a      	strb	r2, [r3, #2]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f042 0202 	orr.w	r2, r2, #2
 800d7d4:	711a      	strb	r2, [r3, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	715a      	strb	r2, [r3, #5]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	719a      	strb	r2, [r3, #6]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d7ee:	f002 f9d9 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d7f2:	f7ff f8b9 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800d7f6:	bf00      	nop
 800d7f8:	3718      	adds	r7, #24
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b082      	sub	sp, #8
 800d802:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t               res;

    Pre_ZigbeeCmdProcessing();
 800d804:	f002 fa0c 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d808:	f002 f99c 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d80c:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	f042 0211 	orr.w	r2, r2, #17
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	2200      	movs	r2, #0
 800d81a:	f042 0204 	orr.w	r2, r2, #4
 800d81e:	705a      	strb	r2, [r3, #1]
 800d820:	2200      	movs	r2, #0
 800d822:	709a      	strb	r2, [r3, #2]
 800d824:	2200      	movs	r2, #0
 800d826:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	711a      	strb	r2, [r3, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	715a      	strb	r2, [r3, #5]
 800d832:	2200      	movs	r2, #0
 800d834:	719a      	strb	r2, [r3, #6]
 800d836:	2200      	movs	r2, #0
 800d838:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800d83a:	f002 f9b3 	bl	800fba4 <ZIGBEE_CmdTransfer>
    res = (uint8_t)zb_ipc_m4_get_retval();
 800d83e:	f7ff f9c9 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d842:	4603      	mov	r3, r0
 800d844:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 800d846:	f7ff f88f 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return res;
 800d84a:	78fb      	ldrb	r3, [r7, #3]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT res;

    if (callback != NULL) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d013      	beq.n	800d894 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff f987 	bl	800cb82 <zb_ipc_m4_cb_info_alloc>
 800d874:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d101      	bne.n	800d880 <ZbZclCommandReq+0x2c>
            return (enum ZclStatusCodeT) ZB_STATUS_ALLOC_FAIL;
 800d87c:	2370      	movs	r3, #112	; 0x70
 800d87e:	e035      	b.n	800d8ec <ZbZclCommandReq+0x98>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	4618      	mov	r0, r3
 800d884:	f7ff fc47 	bl	800d116 <ZbApsAddrIsBcast>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	2201      	movs	r2, #1
 800d892:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 800d894:	f002 f9c4 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d898:	f002 f954 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d89c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f042 0212 	orr.w	r2, r2, #18
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f042 0204 	orr.w	r2, r2, #4
 800d8ae:	705a      	strb	r2, [r3, #1]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	709a      	strb	r2, [r3, #2]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f042 0202 	orr.w	r2, r2, #2
 800d8c0:	711a      	strb	r2, [r3, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	715a      	strb	r2, [r3, #5]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	719a      	strb	r2, [r3, #6]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800d8d4:	69fa      	ldr	r2, [r7, #28]
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d8da:	f002 f963 	bl	800fba4 <ZIGBEE_CmdTransfer>
    res = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800d8de:	f7ff f979 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800d8e6:	f7ff f83f 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return res;
 800d8ea:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3720      	adds	r7, #32
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d902:	f002 f98d 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d906:	f002 f91d 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d90a:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	2200      	movs	r2, #0
 800d910:	f042 0214 	orr.w	r2, r2, #20
 800d914:	701a      	strb	r2, [r3, #0]
 800d916:	2200      	movs	r2, #0
 800d918:	f042 0204 	orr.w	r2, r2, #4
 800d91c:	705a      	strb	r2, [r3, #1]
 800d91e:	2200      	movs	r2, #0
 800d920:	709a      	strb	r2, [r3, #2]
 800d922:	2200      	movs	r2, #0
 800d924:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2200      	movs	r2, #0
 800d92a:	f042 0204 	orr.w	r2, r2, #4
 800d92e:	711a      	strb	r2, [r3, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	715a      	strb	r2, [r3, #5]
 800d934:	2200      	movs	r2, #0
 800d936:	719a      	strb	r2, [r3, #6]
 800d938:	2200      	movs	r2, #0
 800d93a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 800d94e:	78fa      	ldrb	r2, [r7, #3]
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800d954:	f002 f926 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d958:	f7ff f806 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800d95c:	bf00      	nop
 800d95e:	3718      	adds	r7, #24
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b091      	sub	sp, #68	; 0x44
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 800d972:	f107 0310 	add.w	r3, r7, #16
 800d976:	4619      	mov	r1, r3
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7f2 fd46 	bl	800040a <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	f107 0410 	add.w	r4, r7, #16
 800d984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	7c1b      	ldrb	r3, [r3, #16]
 800d98e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 800d992:	2301      	movs	r3, #1
 800d994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	8a1b      	ldrh	r3, [r3, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d001      	beq.n	800d9a4 <ZbZclClusterCommandReq+0x40>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e000      	b.n	800d9a6 <ZbZclClusterCommandReq+0x42>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	7f1b      	ldrb	r3, [r3, #28]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	bf0c      	ite	eq
 800d9b2:	2301      	moveq	r3, #1
 800d9b4:	2300      	movne	r3, #0
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	7c5b      	ldrb	r3, [r3, #17]
 800d9c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	8a1b      	ldrh	r3, [r3, #16]
 800d9c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 800d9ca:	f7ff ff18 	bl	800d7fe <ZbZclGetNextSeqnum>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	637b      	str	r3, [r7, #52]	; 0x34
    zcl_req.length = req->length;
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	63bb      	str	r3, [r7, #56]	; 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6898      	ldr	r0, [r3, #8]
 800d9e4:	f107 0110 	add.w	r1, r7, #16
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	f7ff ff32 	bl	800d854 <ZbZclCommandReq>
 800d9f0:	4603      	mov	r3, r0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3744      	adds	r7, #68	; 0x44
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd90      	pop	{r4, r7, pc}

0800d9fa <ZbZclClusterEndpointRegister>:
    return res;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b086      	sub	sp, #24
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool res;
    uint32_t retval;

    Pre_ZigbeeCmdProcessing();
 800da02:	f002 f90d 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800da06:	f002 f89d 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800da0a:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2200      	movs	r2, #0
 800da10:	f042 0202 	orr.w	r2, r2, #2
 800da14:	701a      	strb	r2, [r3, #0]
 800da16:	2200      	movs	r2, #0
 800da18:	f042 0204 	orr.w	r2, r2, #4
 800da1c:	705a      	strb	r2, [r3, #1]
 800da1e:	2200      	movs	r2, #0
 800da20:	709a      	strb	r2, [r3, #2]
 800da22:	2200      	movs	r2, #0
 800da24:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2200      	movs	r2, #0
 800da2a:	f042 0201 	orr.w	r2, r2, #1
 800da2e:	711a      	strb	r2, [r3, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	715a      	strb	r2, [r3, #5]
 800da34:	2200      	movs	r2, #0
 800da36:	719a      	strb	r2, [r3, #6]
 800da38:	2200      	movs	r2, #0
 800da3a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800da42:	f002 f8af 	bl	800fba4 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 800da46:	f7ff f8c5 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800da4a:	6138      	str	r0, [r7, #16]
    res    = (bool)retval != 0 ? true : false;
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	bf14      	ite	ne
 800da52:	2301      	movne	r3, #1
 800da54:	2300      	moveq	r3, #0
 800da56:	73fb      	strb	r3, [r7, #15]
    Post_ZigbeeCmdProcessing();
 800da58:	f7fe ff86 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return res;
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b086      	sub	sp, #24
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t              retval;
    bool                  res;

    Pre_ZigbeeCmdProcessing();
 800da6e:	f002 f8d7 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800da72:	f002 f867 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800da76:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f042 0203 	orr.w	r2, r2, #3
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	2200      	movs	r2, #0
 800da84:	f042 0204 	orr.w	r2, r2, #4
 800da88:	705a      	strb	r2, [r3, #1]
 800da8a:	2200      	movs	r2, #0
 800da8c:	709a      	strb	r2, [r3, #2]
 800da8e:	2200      	movs	r2, #0
 800da90:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2200      	movs	r2, #0
 800da96:	f042 0201 	orr.w	r2, r2, #1
 800da9a:	711a      	strb	r2, [r3, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	715a      	strb	r2, [r3, #5]
 800daa0:	2200      	movs	r2, #0
 800daa2:	719a      	strb	r2, [r3, #6]
 800daa4:	2200      	movs	r2, #0
 800daa6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800daae:	f002 f879 	bl	800fba4 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 800dab2:	f7ff f88f 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800dab6:	6138      	str	r0, [r7, #16]
    res    = (bool)retval != 0 ? true : false;
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bf14      	ite	ne
 800dabe:	2301      	movne	r3, #1
 800dac0:	2300      	moveq	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
    Post_ZigbeeCmdProcessing();
 800dac4:	f7fe ff50 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return res;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b084      	sub	sp, #16
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	4608      	mov	r0, r1
 800dadc:	4611      	mov	r1, r2
 800dade:	461a      	mov	r2, r3
 800dae0:	4603      	mov	r3, r0
 800dae2:	70fb      	strb	r3, [r7, #3]
 800dae4:	460b      	mov	r3, r1
 800dae6:	803b      	strh	r3, [r7, #0]
 800dae8:	4613      	mov	r3, r2
 800daea:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT   error_status;

    Pre_ZigbeeCmdProcessing();
 800daec:	f002 f898 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800daf0:	f002 f828 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800daf4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f042 0204 	orr.w	r2, r2, #4
 800dafe:	701a      	strb	r2, [r3, #0]
 800db00:	2200      	movs	r2, #0
 800db02:	f042 0204 	orr.w	r2, r2, #4
 800db06:	705a      	strb	r2, [r3, #1]
 800db08:	2200      	movs	r2, #0
 800db0a:	709a      	strb	r2, [r3, #2]
 800db0c:	2200      	movs	r2, #0
 800db0e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	f042 0204 	orr.w	r2, r2, #4
 800db18:	711a      	strb	r2, [r3, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	715a      	strb	r2, [r3, #5]
 800db1e:	2200      	movs	r2, #0
 800db20:	719a      	strb	r2, [r3, #6]
 800db22:	2200      	movs	r2, #0
 800db24:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 800db2c:	78fa      	ldrb	r2, [r7, #3]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 800db32:	883a      	ldrh	r2, [r7, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 800db38:	78ba      	ldrb	r2, [r7, #2]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800db3e:	f002 f831 	bl	800fba4 <ZIGBEE_CmdTransfer>
    error_status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800db42:	f7ff f847 	bl	800cbd4 <zb_ipc_m4_get_retval>
 800db46:	4603      	mov	r3, r0
 800db48:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 800db4a:	f7fe ff0d 	bl	800c968 <Post_ZigbeeCmdProcessing>
    return error_status;
 800db4e:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800db60:	f002 f85e 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800db64:	f001 ffee 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800db68:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f042 0206 	orr.w	r2, r2, #6
 800db72:	701a      	strb	r2, [r3, #0]
 800db74:	2200      	movs	r2, #0
 800db76:	f042 0204 	orr.w	r2, r2, #4
 800db7a:	705a      	strb	r2, [r3, #1]
 800db7c:	2200      	movs	r2, #0
 800db7e:	709a      	strb	r2, [r3, #2]
 800db80:	2200      	movs	r2, #0
 800db82:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	f042 0201 	orr.w	r2, r2, #1
 800db8c:	711a      	strb	r2, [r3, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	715a      	strb	r2, [r3, #5]
 800db92:	2200      	movs	r2, #0
 800db94:	719a      	strb	r2, [r3, #6]
 800db96:	2200      	movs	r2, #0
 800db98:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800dba0:	f002 f800 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800dba4:	f7fe fee0 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800dba8:	bf00      	nop
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800dbb8:	f002 f832 	bl	800fc20 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800dbbc:	f001 ffc2 	bl	800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800dbc0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f042 020b 	orr.w	r2, r2, #11
 800dbca:	701a      	strb	r2, [r3, #0]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f042 0204 	orr.w	r2, r2, #4
 800dbd2:	705a      	strb	r2, [r3, #1]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	709a      	strb	r2, [r3, #2]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f042 0201 	orr.w	r2, r2, #1
 800dbe4:	711a      	strb	r2, [r3, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	715a      	strb	r2, [r3, #5]
 800dbea:	2200      	movs	r2, #0
 800dbec:	719a      	strb	r2, [r3, #6]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800dbf8:	f001 ffd4 	bl	800fba4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800dbfc:	f7fe feb4 	bl	800c968 <Post_ZigbeeCmdProcessing>
}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
 800dc14:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 800dc16:	68b8      	ldr	r0, [r7, #8]
 800dc18:	f002 fdde 	bl	80107d8 <malloc>
 800dc1c:	4603      	mov	r3, r0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	60b9      	str	r1, [r7, #8]
 800dc30:	607a      	str	r2, [r7, #4]
 800dc32:	603b      	str	r3, [r7, #0]
    free(ptr);
 800dc34:	68b8      	ldr	r0, [r7, #8]
 800dc36:	f002 fdd7 	bl	80107e8 <free>
}
 800dc3a:	bf00      	nop
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
	...

0800dc44 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
 800dc50:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 800dc56:	e00e      	b.n	800dc76 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 800dc58:	89fb      	ldrh	r3, [r7, #14]
 800dc5a:	0a1b      	lsrs	r3, r3, #8
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	89fb      	ldrh	r3, [r7, #14]
 800dc60:	b2d9      	uxtb	r1, r3
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	1c58      	adds	r0, r3, #1
 800dc66:	6178      	str	r0, [r7, #20]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	404b      	eors	r3, r1
 800dc6c:	4908      	ldr	r1, [pc, #32]	; (800dc90 <WpanCrc+0x4c>)
 800dc6e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dc72:	4053      	eors	r3, r2
 800dc74:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	1e5a      	subs	r2, r3, #1
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1eb      	bne.n	800dc58 <WpanCrc+0x14>
    }
    return crc;
 800dc80:	89fb      	ldrh	r3, [r7, #14]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	080121bc 	.word	0x080121bc

0800dc94 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 800dc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc96:	b0cf      	sub	sp, #316	; 0x13c
 800dc98:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800dca0:	2300      	movs	r3, #0
 800dca2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 800dcac:	f001 ff62 	bl	800fb74 <ZIGBEE_Get_NotificationPayloadBuffer>
 800dcb0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

    switch (p_notification->ID) {
 800dcb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f240 421c 	movw	r2, #1052	; 0x41c
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	f201 82f0 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dcc4:	f240 4205 	movw	r2, #1029	; 0x405
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d22d      	bcs.n	800dd28 <Zigbee_CallBackProcessing+0x94>
 800dccc:	f240 321d 	movw	r2, #797	; 0x31d
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	f201 82e7 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dcd6:	f240 3206 	movw	r2, #774	; 0x306
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d25c      	bcs.n	800dd98 <Zigbee_CallBackProcessing+0x104>
 800dcde:	f240 2209 	movw	r2, #521	; 0x209
 800dce2:	4293      	cmp	r3, r2
 800dce4:	f000 847e 	beq.w	800e5e4 <Zigbee_CallBackProcessing+0x950>
 800dce8:	f240 2209 	movw	r2, #521	; 0x209
 800dcec:	4293      	cmp	r3, r2
 800dcee:	f201 82d9 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dcf2:	f240 2207 	movw	r2, #519	; 0x207
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	f000 8443 	beq.w	800e582 <Zigbee_CallBackProcessing+0x8ee>
 800dcfc:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800dd00:	f081 82d0 	bcs.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dd04:	f240 2205 	movw	r2, #517	; 0x205
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	f000 840c 	beq.w	800e526 <Zigbee_CallBackProcessing+0x892>
 800dd0e:	f240 2205 	movw	r2, #517	; 0x205
 800dd12:	4293      	cmp	r3, r2
 800dd14:	f201 82c6 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dd18:	2b3e      	cmp	r3, #62	; 0x3e
 800dd1a:	f200 8133 	bhi.w	800df84 <Zigbee_CallBackProcessing+0x2f0>
 800dd1e:	2b0d      	cmp	r3, #13
 800dd20:	f080 80c4 	bcs.w	800deac <Zigbee_CallBackProcessing+0x218>
 800dd24:	f001 babe 	b.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dd28:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 800dd2c:	2b17      	cmp	r3, #23
 800dd2e:	f201 82b9 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dd32:	a201      	add	r2, pc, #4	; (adr r2, 800dd38 <Zigbee_CallBackProcessing+0xa4>)
 800dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd38:	0800ef3b 	.word	0x0800ef3b
 800dd3c:	0800f2a5 	.word	0x0800f2a5
 800dd40:	0800f2a5 	.word	0x0800f2a5
 800dd44:	0800f2a5 	.word	0x0800f2a5
 800dd48:	0800f2a5 	.word	0x0800f2a5
 800dd4c:	0800ef83 	.word	0x0800ef83
 800dd50:	0800f2a5 	.word	0x0800f2a5
 800dd54:	0800f2a5 	.word	0x0800f2a5
 800dd58:	0800f2a5 	.word	0x0800f2a5
 800dd5c:	0800f2a5 	.word	0x0800f2a5
 800dd60:	0800efcb 	.word	0x0800efcb
 800dd64:	0800f2a5 	.word	0x0800f2a5
 800dd68:	0800f2a5 	.word	0x0800f2a5
 800dd6c:	0800f2a5 	.word	0x0800f2a5
 800dd70:	0800f03f 	.word	0x0800f03f
 800dd74:	0800f2a5 	.word	0x0800f2a5
 800dd78:	0800f2a5 	.word	0x0800f2a5
 800dd7c:	0800f0c9 	.word	0x0800f0c9
 800dd80:	0800f2a5 	.word	0x0800f2a5
 800dd84:	0800f123 	.word	0x0800f123
 800dd88:	0800f2a5 	.word	0x0800f2a5
 800dd8c:	0800f17d 	.word	0x0800f17d
 800dd90:	0800f2a5 	.word	0x0800f2a5
 800dd94:	0800f1d7 	.word	0x0800f1d7
 800dd98:	f2a3 3306 	subw	r3, r3, #774	; 0x306
 800dd9c:	2b17      	cmp	r3, #23
 800dd9e:	f201 8281 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800dda2:	a201      	add	r2, pc, #4	; (adr r2, 800dda8 <Zigbee_CallBackProcessing+0x114>)
 800dda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda8:	0800e665 	.word	0x0800e665
 800ddac:	0800f2a5 	.word	0x0800f2a5
 800ddb0:	0800e71d 	.word	0x0800e71d
 800ddb4:	0800f2a5 	.word	0x0800f2a5
 800ddb8:	0800f2a5 	.word	0x0800f2a5
 800ddbc:	0800f2a5 	.word	0x0800f2a5
 800ddc0:	0800e779 	.word	0x0800e779
 800ddc4:	0800f2a5 	.word	0x0800f2a5
 800ddc8:	0800e7d5 	.word	0x0800e7d5
 800ddcc:	0800f2a5 	.word	0x0800f2a5
 800ddd0:	0800f2a5 	.word	0x0800f2a5
 800ddd4:	0800f2a5 	.word	0x0800f2a5
 800ddd8:	0800f2a5 	.word	0x0800f2a5
 800dddc:	0800f2a5 	.word	0x0800f2a5
 800dde0:	0800f2a5 	.word	0x0800f2a5
 800dde4:	0800f2a5 	.word	0x0800f2a5
 800dde8:	0800f2a5 	.word	0x0800f2a5
 800ddec:	0800f2a5 	.word	0x0800f2a5
 800ddf0:	0800f2a5 	.word	0x0800f2a5
 800ddf4:	0800f2a5 	.word	0x0800f2a5
 800ddf8:	0800f2a5 	.word	0x0800f2a5
 800ddfc:	0800f2a5 	.word	0x0800f2a5
 800de00:	0800f2a5 	.word	0x0800f2a5
 800de04:	0800e6c1 	.word	0x0800e6c1
 800de08:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800de0c:	2b24      	cmp	r3, #36	; 0x24
 800de0e:	f201 8249 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800de12:	a201      	add	r2, pc, #4	; (adr r2, 800de18 <Zigbee_CallBackProcessing+0x184>)
 800de14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de18:	0800e8d3 	.word	0x0800e8d3
 800de1c:	0800f2a5 	.word	0x0800f2a5
 800de20:	0800e92b 	.word	0x0800e92b
 800de24:	0800f2a5 	.word	0x0800f2a5
 800de28:	0800e99d 	.word	0x0800e99d
 800de2c:	0800f2a5 	.word	0x0800f2a5
 800de30:	0800e9f5 	.word	0x0800e9f5
 800de34:	0800f2a5 	.word	0x0800f2a5
 800de38:	0800ea4d 	.word	0x0800ea4d
 800de3c:	0800f2a5 	.word	0x0800f2a5
 800de40:	0800eaa5 	.word	0x0800eaa5
 800de44:	0800f2a5 	.word	0x0800f2a5
 800de48:	0800eafd 	.word	0x0800eafd
 800de4c:	0800f2a5 	.word	0x0800f2a5
 800de50:	0800eb53 	.word	0x0800eb53
 800de54:	0800f2a5 	.word	0x0800f2a5
 800de58:	0800f2a5 	.word	0x0800f2a5
 800de5c:	0800f2a5 	.word	0x0800f2a5
 800de60:	0800e831 	.word	0x0800e831
 800de64:	0800f2a5 	.word	0x0800f2a5
 800de68:	0800eb9d 	.word	0x0800eb9d
 800de6c:	0800f2a5 	.word	0x0800f2a5
 800de70:	0800ebf7 	.word	0x0800ebf7
 800de74:	0800f2a5 	.word	0x0800f2a5
 800de78:	0800ec51 	.word	0x0800ec51
 800de7c:	0800f2a5 	.word	0x0800f2a5
 800de80:	0800ecc5 	.word	0x0800ecc5
 800de84:	0800f2a5 	.word	0x0800f2a5
 800de88:	0800ed1f 	.word	0x0800ed1f
 800de8c:	0800f2a5 	.word	0x0800f2a5
 800de90:	0800ed79 	.word	0x0800ed79
 800de94:	0800f2a5 	.word	0x0800f2a5
 800de98:	0800edd3 	.word	0x0800edd3
 800de9c:	0800f2a5 	.word	0x0800f2a5
 800dea0:	0800ee2d 	.word	0x0800ee2d
 800dea4:	0800f2a5 	.word	0x0800f2a5
 800dea8:	0800ee87 	.word	0x0800ee87
 800deac:	3b0d      	subs	r3, #13
 800deae:	2b31      	cmp	r3, #49	; 0x31
 800deb0:	f201 81f8 	bhi.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800deb4:	a201      	add	r2, pc, #4	; (adr r2, 800debc <Zigbee_CallBackProcessing+0x228>)
 800deb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deba:	bf00      	nop
 800debc:	0800df99 	.word	0x0800df99
 800dec0:	0800f2a5 	.word	0x0800f2a5
 800dec4:	0800f2a5 	.word	0x0800f2a5
 800dec8:	0800f2a5 	.word	0x0800f2a5
 800decc:	0800f2a5 	.word	0x0800f2a5
 800ded0:	0800dfff 	.word	0x0800dfff
 800ded4:	0800f2a5 	.word	0x0800f2a5
 800ded8:	0800f2a5 	.word	0x0800f2a5
 800dedc:	0800f2a5 	.word	0x0800f2a5
 800dee0:	0800f2a5 	.word	0x0800f2a5
 800dee4:	0800f2a5 	.word	0x0800f2a5
 800dee8:	0800f2a5 	.word	0x0800f2a5
 800deec:	0800f2a5 	.word	0x0800f2a5
 800def0:	0800e073 	.word	0x0800e073
 800def4:	0800f2a5 	.word	0x0800f2a5
 800def8:	0800f2a5 	.word	0x0800f2a5
 800defc:	0800e0cf 	.word	0x0800e0cf
 800df00:	0800f2a5 	.word	0x0800f2a5
 800df04:	0800e137 	.word	0x0800e137
 800df08:	0800f2a5 	.word	0x0800f2a5
 800df0c:	0800e19f 	.word	0x0800e19f
 800df10:	0800f2a5 	.word	0x0800f2a5
 800df14:	0800e207 	.word	0x0800e207
 800df18:	0800f2a5 	.word	0x0800f2a5
 800df1c:	0800f2a5 	.word	0x0800f2a5
 800df20:	0800e26f 	.word	0x0800e26f
 800df24:	0800f2a5 	.word	0x0800f2a5
 800df28:	0800f2a5 	.word	0x0800f2a5
 800df2c:	0800e2f1 	.word	0x0800e2f1
 800df30:	0800f2a5 	.word	0x0800f2a5
 800df34:	0800e359 	.word	0x0800e359
 800df38:	0800f2a5 	.word	0x0800f2a5
 800df3c:	0800f2a5 	.word	0x0800f2a5
 800df40:	0800f2a5 	.word	0x0800f2a5
 800df44:	0800e377 	.word	0x0800e377
 800df48:	0800f2a5 	.word	0x0800f2a5
 800df4c:	0800f2a5 	.word	0x0800f2a5
 800df50:	0800f2a5 	.word	0x0800f2a5
 800df54:	0800e3cf 	.word	0x0800e3cf
 800df58:	0800f2a5 	.word	0x0800f2a5
 800df5c:	0800f2a5 	.word	0x0800f2a5
 800df60:	0800f2a5 	.word	0x0800f2a5
 800df64:	0800f2a5 	.word	0x0800f2a5
 800df68:	0800f2a5 	.word	0x0800f2a5
 800df6c:	0800e41f 	.word	0x0800e41f
 800df70:	0800f2a5 	.word	0x0800f2a5
 800df74:	0800e477 	.word	0x0800e477
 800df78:	0800f2a5 	.word	0x0800f2a5
 800df7c:	0800e4cf 	.word	0x0800e4cf
 800df80:	0800f251 	.word	0x0800f251
 800df84:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800df88:	f081 818c 	bcs.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
 800df8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df90:	f63f af3a 	bhi.w	800de08 <Zigbee_CallBackProcessing+0x174>
 800df94:	f001 b986 	b.w	800f2a4 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 800df98:	4bbb      	ldr	r3, [pc, #748]	; (800e288 <Zigbee_CallBackProcessing+0x5f4>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 800df9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d006      	beq.n	800dfb6 <Zigbee_CallBackProcessing+0x322>
 800dfa8:	4bb8      	ldr	r3, [pc, #736]	; (800e28c <Zigbee_CallBackProcessing+0x5f8>)
 800dfaa:	4ab9      	ldr	r2, [pc, #740]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800dfac:	f640 6157 	movw	r1, #3671	; 0xe57
 800dfb0:	48b8      	ldr	r0, [pc, #736]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800dfb2:	f002 fbf3 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 800dfb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dfc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f001 8171 	beq.w	800f2ac <Zigbee_CallBackProcessing+0x1618>
 800dfca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f001 816b 	beq.w	800f2ac <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 800dfd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dfe0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dfe4:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 800dfe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dff0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4610      	mov	r0, r2
 800dff8:	4798      	blx	r3
            }
            break;
 800dffa:	f001 b957 	b.w	800f2ac <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 800dffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	2b03      	cmp	r3, #3
 800e006:	d006      	beq.n	800e016 <Zigbee_CallBackProcessing+0x382>
 800e008:	4ba3      	ldr	r3, [pc, #652]	; (800e298 <Zigbee_CallBackProcessing+0x604>)
 800e00a:	4aa1      	ldr	r2, [pc, #644]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e00c:	f640 6166 	movw	r1, #3686	; 0xe66
 800e010:	48a0      	ldr	r0, [pc, #640]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e012:	f002 fbc3 	bl	801079c <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 800e016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e01a:	691a      	ldr	r2, [r3, #16]
 800e01c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e020:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e024:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 800e026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e02a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	685d      	ldr	r5, [r3, #4]
 800e032:	4b95      	ldr	r3, [pc, #596]	; (800e288 <Zigbee_CallBackProcessing+0x5f4>)
 800e034:	6818      	ldr	r0, [r3, #0]
 800e036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e03a:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 800e03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e040:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 800e042:	461e      	mov	r6, r3
 800e044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e048:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e054:	f2a2 141d 	subw	r4, r2, #285	; 0x11d
 800e058:	4632      	mov	r2, r6
 800e05a:	47a8      	blx	r5
 800e05c:	4603      	mov	r3, r0
 800e05e:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 800e060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e064:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 800e06e:	f001 b980 	b.w	800f372 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 800e072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d006      	beq.n	800e08a <Zigbee_CallBackProcessing+0x3f6>
 800e07c:	4b83      	ldr	r3, [pc, #524]	; (800e28c <Zigbee_CallBackProcessing+0x5f8>)
 800e07e:	4a84      	ldr	r2, [pc, #528]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e080:	f640 6172 	movw	r1, #3698	; 0xe72
 800e084:	4883      	ldr	r0, [pc, #524]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e086:	f002 fb89 	bl	801079c <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 800e08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e08e:	689a      	ldr	r2, [r3, #8]
 800e090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e094:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e098:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 800e09a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e09e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f001 8102 	beq.w	800f2b0 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 800e0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e0b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e0bc:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800e0c0:	6812      	ldr	r2, [r2, #0]
 800e0c2:	6852      	ldr	r2, [r2, #4]
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	4798      	blx	r3
            }
            break;
 800e0ca:	f001 b8f1 	b.w	800f2b0 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 800e0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d006      	beq.n	800e0e6 <Zigbee_CallBackProcessing+0x452>
 800e0d8:	4b70      	ldr	r3, [pc, #448]	; (800e29c <Zigbee_CallBackProcessing+0x608>)
 800e0da:	4a6d      	ldr	r2, [pc, #436]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e0dc:	f640 617b 	movw	r1, #3707	; 0xe7b
 800e0e0:	486c      	ldr	r0, [pc, #432]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e0e2:	f002 fb5b 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e0f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f001 80dd 	beq.w	800f2b4 <Zigbee_CallBackProcessing+0x1620>
 800e0fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	f001 80d7 	beq.w	800f2b4 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800e106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e110:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e114:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800e116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e122:	6859      	ldr	r1, [r3, #4]
 800e124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e128:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4610      	mov	r0, r2
 800e130:	4798      	blx	r3
            }
            break;
 800e132:	f001 b8bf 	b.w	800f2b4 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 800e136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d006      	beq.n	800e14e <Zigbee_CallBackProcessing+0x4ba>
 800e140:	4b56      	ldr	r3, [pc, #344]	; (800e29c <Zigbee_CallBackProcessing+0x608>)
 800e142:	4a53      	ldr	r2, [pc, #332]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e144:	f640 6186 	movw	r1, #3718	; 0xe86
 800e148:	4852      	ldr	r0, [pc, #328]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e14a:	f002 fb27 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e14e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f001 80ab 	beq.w	800f2b8 <Zigbee_CallBackProcessing+0x1624>
 800e162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f001 80a5 	beq.w	800f2b8 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 800e16e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e178:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e17c:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 800e17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	4618      	mov	r0, r3
 800e186:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e190:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4611      	mov	r1, r2
 800e198:	4798      	blx	r3
            }
            break;
 800e19a:	f001 b88d 	b.w	800f2b8 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 800e19e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d006      	beq.n	800e1b6 <Zigbee_CallBackProcessing+0x522>
 800e1a8:	4b3c      	ldr	r3, [pc, #240]	; (800e29c <Zigbee_CallBackProcessing+0x608>)
 800e1aa:	4a39      	ldr	r2, [pc, #228]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e1ac:	f640 6191 	movw	r1, #3729	; 0xe91
 800e1b0:	4838      	ldr	r0, [pc, #224]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e1b2:	f002 faf3 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e1c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f001 8079 	beq.w	800f2bc <Zigbee_CallBackProcessing+0x1628>
 800e1ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f001 8073 	beq.w	800f2bc <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800e1d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e1e4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800e1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e1f2:	6859      	ldr	r1, [r3, #4]
 800e1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e1f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
            }
            break;
 800e202:	f001 b85b 	b.w	800f2bc <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 800e206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d006      	beq.n	800e21e <Zigbee_CallBackProcessing+0x58a>
 800e210:	4b22      	ldr	r3, [pc, #136]	; (800e29c <Zigbee_CallBackProcessing+0x608>)
 800e212:	4a1f      	ldr	r2, [pc, #124]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e214:	f640 619c 	movw	r1, #3740	; 0xe9c
 800e218:	481e      	ldr	r0, [pc, #120]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e21a:	f002 fabf 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f001 8047 	beq.w	800f2c0 <Zigbee_CallBackProcessing+0x162c>
 800e232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	f001 8041 	beq.w	800f2c0 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800e23e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e24c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800e24e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	b2da      	uxtb	r2, r3
 800e256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e25a:	6859      	ldr	r1, [r3, #4]
 800e25c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4610      	mov	r0, r2
 800e268:	4798      	blx	r3
            }
            break;
 800e26a:	f001 b829 	b.w	800f2c0 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 800e26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	2b02      	cmp	r3, #2
 800e276:	d013      	beq.n	800e2a0 <Zigbee_CallBackProcessing+0x60c>
 800e278:	4b08      	ldr	r3, [pc, #32]	; (800e29c <Zigbee_CallBackProcessing+0x608>)
 800e27a:	4a05      	ldr	r2, [pc, #20]	; (800e290 <Zigbee_CallBackProcessing+0x5fc>)
 800e27c:	f640 61a7 	movw	r1, #3751	; 0xea7
 800e280:	4804      	ldr	r0, [pc, #16]	; (800e294 <Zigbee_CallBackProcessing+0x600>)
 800e282:	f002 fa8b 	bl	801079c <__assert_func>
 800e286:	bf00      	nop
 800e288:	200006c4 	.word	0x200006c4
 800e28c:	08011bc0 	.word	0x08011bc0
 800e290:	08012400 	.word	0x08012400
 800e294:	08011b60 	.word	0x08011b60
 800e298:	08011bdc 	.word	0x08011bdc
 800e29c:	08011bf8 	.word	0x08011bf8
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e2aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f001 8008 	beq.w	800f2c4 <Zigbee_CallBackProcessing+0x1630>
 800e2b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f001 8002 	beq.w	800f2c4 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 800e2c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2ce:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 800e2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2dc:	6859      	ldr	r1, [r3, #4]
 800e2de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	4798      	blx	r3
            }
            break;
 800e2ec:	f000 bfea 	b.w	800f2c4 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 800e2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	d006      	beq.n	800e308 <Zigbee_CallBackProcessing+0x674>
 800e2fa:	4bc2      	ldr	r3, [pc, #776]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e2fc:	4ac2      	ldr	r2, [pc, #776]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e2fe:	f640 61b2 	movw	r1, #3762	; 0xeb2
 800e302:	48c2      	ldr	r0, [pc, #776]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e304:	f002 fa4a 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e316:	2b00      	cmp	r3, #0
 800e318:	f000 87d6 	beq.w	800f2c8 <Zigbee_CallBackProcessing+0x1634>
 800e31c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	f000 87d0 	beq.w	800f2c8 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800e328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e332:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e336:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800e338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e344:	6859      	ldr	r1, [r3, #4]
 800e346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e34a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4610      	mov	r0, r2
 800e352:	4798      	blx	r3
            }
            break;
 800e354:	f000 bfb8 	b.w	800f2c8 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 800e358:	4bad      	ldr	r3, [pc, #692]	; (800e610 <Zigbee_CallBackProcessing+0x97c>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 87b5 	beq.w	800f2cc <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 800e362:	4bab      	ldr	r3, [pc, #684]	; (800e610 <Zigbee_CallBackProcessing+0x97c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4aab      	ldr	r2, [pc, #684]	; (800e614 <Zigbee_CallBackProcessing+0x980>)
 800e368:	6812      	ldr	r2, [r2, #0]
 800e36a:	49ab      	ldr	r1, [pc, #684]	; (800e618 <Zigbee_CallBackProcessing+0x984>)
 800e36c:	6809      	ldr	r1, [r1, #0]
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
            }
            break;
 800e372:	f000 bfab 	b.w	800f2cc <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 800e376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d006      	beq.n	800e38e <Zigbee_CallBackProcessing+0x6fa>
 800e380:	4ba0      	ldr	r3, [pc, #640]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e382:	4aa1      	ldr	r2, [pc, #644]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e384:	f640 61c3 	movw	r1, #3779	; 0xec3
 800e388:	48a0      	ldr	r0, [pc, #640]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e38a:	f002 fa07 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 8797 	beq.w	800f2d0 <Zigbee_CallBackProcessing+0x163c>
 800e3a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 8791 	beq.w	800f2d0 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 800e3ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	637b      	str	r3, [r7, #52]	; 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 800e3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	4798      	blx	r3
            }
            break;
 800e3ca:	f000 bf81 	b.w	800f2d0 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 800e3ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d006      	beq.n	800e3e6 <Zigbee_CallBackProcessing+0x752>
 800e3d8:	4b90      	ldr	r3, [pc, #576]	; (800e61c <Zigbee_CallBackProcessing+0x988>)
 800e3da:	4a8b      	ldr	r2, [pc, #556]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e3dc:	f640 61ce 	movw	r1, #3790	; 0xece
 800e3e0:	488a      	ldr	r0, [pc, #552]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e3e2:	f002 f9db 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 800e3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e3f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 876d 	beq.w	800f2d4 <Zigbee_CallBackProcessing+0x1640>
 800e3fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 8767 	beq.w	800f2d4 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 800e406:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	63bb      	str	r3, [r7, #56]	; 0x38
                callback(info->arg);
 800e40e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e412:	685a      	ldr	r2, [r3, #4]
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	4610      	mov	r0, r2
 800e418:	4798      	blx	r3
            }
            break;
 800e41a:	f000 bf5b 	b.w	800f2d4 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 800e41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	2b02      	cmp	r3, #2
 800e426:	d006      	beq.n	800e436 <Zigbee_CallBackProcessing+0x7a2>
 800e428:	4b76      	ldr	r3, [pc, #472]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e42a:	4a77      	ldr	r2, [pc, #476]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e42c:	f640 61da 	movw	r1, #3802	; 0xeda
 800e430:	4876      	ldr	r0, [pc, #472]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e432:	f002 f9b3 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 8747 	beq.w	800f2d8 <Zigbee_CallBackProcessing+0x1644>
 800e44a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	f000 8741 	beq.w	800f2d8 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 800e456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	63fb      	str	r3, [r7, #60]	; 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 800e45e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	4618      	mov	r0, r3
 800e466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46e:	4611      	mov	r1, r2
 800e470:	4798      	blx	r3
            }
            break;
 800e472:	f000 bf31 	b.w	800f2d8 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 800e476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d006      	beq.n	800e48e <Zigbee_CallBackProcessing+0x7fa>
 800e480:	4b60      	ldr	r3, [pc, #384]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e482:	4a61      	ldr	r2, [pc, #388]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e484:	f640 61e6 	movw	r1, #3814	; 0xee6
 800e488:	4860      	ldr	r0, [pc, #384]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e48a:	f002 f987 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e48e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f000 871d 	beq.w	800f2dc <Zigbee_CallBackProcessing+0x1648>
 800e4a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 8717 	beq.w	800f2dc <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 800e4ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	643b      	str	r3, [r7, #64]	; 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 800e4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4c2:	685a      	ldr	r2, [r3, #4]
 800e4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4c6:	4611      	mov	r1, r2
 800e4c8:	4798      	blx	r3
            }
            break;
 800e4ca:	f000 bf07 	b.w	800f2dc <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 800e4ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d006      	beq.n	800e4e6 <Zigbee_CallBackProcessing+0x852>
 800e4d8:	4b4a      	ldr	r3, [pc, #296]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e4da:	4a4b      	ldr	r2, [pc, #300]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e4dc:	f640 61f2 	movw	r1, #3826	; 0xef2
 800e4e0:	484a      	ldr	r0, [pc, #296]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e4e2:	f002 f95b 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e4e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e4f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 86f3 	beq.w	800f2e0 <Zigbee_CallBackProcessing+0x164c>
 800e4fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 86ed 	beq.w	800f2e0 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 800e506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	647b      	str	r3, [r7, #68]	; 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 800e50e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	4618      	mov	r0, r3
 800e516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e51e:	4611      	mov	r1, r2
 800e520:	4798      	blx	r3
            }
            break;
 800e522:	f000 bedd 	b.w	800f2e0 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 800e526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d006      	beq.n	800e53e <Zigbee_CallBackProcessing+0x8aa>
 800e530:	4b34      	ldr	r3, [pc, #208]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e532:	4a35      	ldr	r2, [pc, #212]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e534:	f640 61fd 	movw	r1, #3837	; 0xefd
 800e538:	4834      	ldr	r0, [pc, #208]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e53a:	f002 f92f 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e53e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 86c9 	beq.w	800f2e4 <Zigbee_CallBackProcessing+0x1650>
 800e552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f000 86c3 	beq.w	800f2e4 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 800e55e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 800e568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	4618      	mov	r0, r3
 800e570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e574:	685a      	ldr	r2, [r3, #4]
 800e576:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e57a:	4611      	mov	r1, r2
 800e57c:	4798      	blx	r3
            }
            break;
 800e57e:	f000 beb1 	b.w	800f2e4 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 800e582:	2300      	movs	r3, #0
 800e584:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            assert(p_notification->Size == 2);
 800e588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d006      	beq.n	800e5a0 <Zigbee_CallBackProcessing+0x90c>
 800e592:	4b1c      	ldr	r3, [pc, #112]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e594:	4a1c      	ldr	r2, [pc, #112]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e596:	f640 710d 	movw	r1, #3853	; 0xf0d
 800e59a:	481c      	ldr	r0, [pc, #112]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e59c:	f002 f8fe 	bl	801079c <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800e5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 800e5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if (aps_filter_cb->callback != NULL) {
 800e5b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00b      	beq.n	800e5d6 <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 800e5be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e5c8:	6892      	ldr	r2, [r2, #8]
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800e5d0:	4798      	blx	r3
 800e5d2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e5d6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800e5da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5de:	60da      	str	r2, [r3, #12]
            break;
 800e5e0:	f000 bec7 	b.w	800f372 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            assert(p_notification->Size == 2);
 800e5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d015      	beq.n	800e620 <Zigbee_CallBackProcessing+0x98c>
 800e5f4:	4b03      	ldr	r3, [pc, #12]	; (800e604 <Zigbee_CallBackProcessing+0x970>)
 800e5f6:	4a04      	ldr	r2, [pc, #16]	; (800e608 <Zigbee_CallBackProcessing+0x974>)
 800e5f8:	f640 711e 	movw	r1, #3870	; 0xf1e
 800e5fc:	4803      	ldr	r0, [pc, #12]	; (800e60c <Zigbee_CallBackProcessing+0x978>)
 800e5fe:	f002 f8cd 	bl	801079c <__assert_func>
 800e602:	bf00      	nop
 800e604:	08011bf8 	.word	0x08011bf8
 800e608:	08012400 	.word	0x08012400
 800e60c:	08011b60 	.word	0x08011b60
 800e610:	200006b4 	.word	0x200006b4
 800e614:	200006c4 	.word	0x200006c4
 800e618:	200006b8 	.word	0x200006b8
 800e61c:	08011bc0 	.word	0x08011bc0
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800e620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 800e62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (aps_filter_cb->callback != NULL) {
 800e634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00b      	beq.n	800e656 <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 800e63e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800e648:	6892      	ldr	r2, [r2, #8]
 800e64a:	4611      	mov	r1, r2
 800e64c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e650:	4798      	blx	r3
 800e652:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e656:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800e65a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e65e:	60da      	str	r2, [r3, #12]
            break;
 800e660:	f000 be87 	b.w	800f372 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 800e664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d006      	beq.n	800e67c <Zigbee_CallBackProcessing+0x9e8>
 800e66e:	4bc5      	ldr	r3, [pc, #788]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e670:	4ac5      	ldr	r2, [pc, #788]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e672:	f640 712a 	movw	r1, #3882	; 0xf2a
 800e676:	48c5      	ldr	r0, [pc, #788]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e678:	f002 f890 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f000 862c 	beq.w	800f2e8 <Zigbee_CallBackProcessing+0x1654>
 800e690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	f000 8626 	beq.w	800f2e8 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 800e69c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 800e6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4798      	blx	r3
            }
            break;
 800e6bc:	f000 be14 	b.w	800f2e8 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 800e6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	d006      	beq.n	800e6d8 <Zigbee_CallBackProcessing+0xa44>
 800e6ca:	4bae      	ldr	r3, [pc, #696]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e6cc:	4aae      	ldr	r2, [pc, #696]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e6ce:	f640 7136 	movw	r1, #3894	; 0xf36
 800e6d2:	48ae      	ldr	r0, [pc, #696]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e6d4:	f002 f862 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e6e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	f000 8600 	beq.w	800f2ec <Zigbee_CallBackProcessing+0x1658>
 800e6ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f000 85fa 	beq.w	800f2ec <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 800e6f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 800e702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	4618      	mov	r0, r3
 800e70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e714:	4611      	mov	r1, r2
 800e716:	4798      	blx	r3
            }
            break;
 800e718:	f000 bde8 	b.w	800f2ec <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 800e71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	2b02      	cmp	r3, #2
 800e724:	d006      	beq.n	800e734 <Zigbee_CallBackProcessing+0xaa0>
 800e726:	4b97      	ldr	r3, [pc, #604]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e728:	4a97      	ldr	r2, [pc, #604]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e72a:	f640 7142 	movw	r1, #3906	; 0xf42
 800e72e:	4897      	ldr	r0, [pc, #604]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e730:	f002 f834 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e73e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e742:	2b00      	cmp	r3, #0
 800e744:	f000 85d4 	beq.w	800f2f0 <Zigbee_CallBackProcessing+0x165c>
 800e748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f000 85ce 	beq.w	800f2f0 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 800e754:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 800e75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	4618      	mov	r0, r3
 800e766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e770:	4611      	mov	r1, r2
 800e772:	4798      	blx	r3
            }
            break;
 800e774:	f000 bdbc 	b.w	800f2f0 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 800e778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d006      	beq.n	800e790 <Zigbee_CallBackProcessing+0xafc>
 800e782:	4b80      	ldr	r3, [pc, #512]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e784:	4a80      	ldr	r2, [pc, #512]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e786:	f640 714d 	movw	r1, #3917	; 0xf4d
 800e78a:	4880      	ldr	r0, [pc, #512]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e78c:	f002 f806 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e79a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f000 85a8 	beq.w	800f2f4 <Zigbee_CallBackProcessing+0x1660>
 800e7a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 85a2 	beq.w	800f2f4 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 800e7b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 800e7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	4798      	blx	r3
            }
            break;
 800e7d0:	f000 bd90 	b.w	800f2f4 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 800e7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d006      	beq.n	800e7ec <Zigbee_CallBackProcessing+0xb58>
 800e7de:	4b69      	ldr	r3, [pc, #420]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e7e0:	4a69      	ldr	r2, [pc, #420]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e7e2:	f640 7158 	movw	r1, #3928	; 0xf58
 800e7e6:	4869      	ldr	r0, [pc, #420]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e7e8:	f001 ffd8 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e7f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f000 857c 	beq.w	800f2f8 <Zigbee_CallBackProcessing+0x1664>
 800e800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	f000 8576 	beq.w	800f2f8 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 800e80c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 800e816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e828:	4611      	mov	r1, r2
 800e82a:	4798      	blx	r3
            }
            break;
 800e82c:	f000 bd64 	b.w	800f2f8 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 800e830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	2b03      	cmp	r3, #3
 800e838:	d006      	beq.n	800e848 <Zigbee_CallBackProcessing+0xbb4>
 800e83a:	4b55      	ldr	r3, [pc, #340]	; (800e990 <Zigbee_CallBackProcessing+0xcfc>)
 800e83c:	4a52      	ldr	r2, [pc, #328]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e83e:	f640 7166 	movw	r1, #3942	; 0xf66
 800e842:	4852      	ldr	r0, [pc, #328]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e844:	f001 ffaa 	bl	801079c <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 800e848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	67fb      	str	r3, [r7, #124]	; 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 800e850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e852:	2b00      	cmp	r3, #0
 800e854:	f000 8552 	beq.w	800f2fc <Zigbee_CallBackProcessing+0x1668>
 800e858:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 854d 	beq.w	800f2fc <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e862:	2300      	movs	r3, #0
 800e864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800e868:	e02a      	b.n	800e8c0 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 800e86a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800e86e:	4613      	mov	r3, r2
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	4413      	add	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4a47      	ldr	r2, [pc, #284]	; (800e994 <Zigbee_CallBackProcessing+0xd00>)
 800e878:	4413      	add	r3, r2
 800e87a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d119      	bne.n	800e8b4 <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 800e880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d021      	beq.n	800e8cc <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 800e888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	67bb      	str	r3, [r7, #120]	; 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 800e890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 800e89a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	673b      	str	r3, [r7, #112]	; 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 800e8a0:	4b3d      	ldr	r3, [pc, #244]	; (800e998 <Zigbee_CallBackProcessing+0xd04>)
 800e8a2:	6818      	ldr	r0, [r3, #0]
 800e8a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800e8ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800e8ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e8b0:	47a0      	blx	r4
                    break;
 800e8b2:	e00c      	b.n	800e8ce <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 800e8b4:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e8b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800e8c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e8c4:	2b07      	cmp	r3, #7
 800e8c6:	d9d0      	bls.n	800e86a <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 800e8c8:	f000 bd18 	b.w	800f2fc <Zigbee_CallBackProcessing+0x1668>
                        break;
 800e8cc:	bf00      	nop
            break;
 800e8ce:	f000 bd15 	b.w	800f2fc <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 800e8d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d006      	beq.n	800e8ea <Zigbee_CallBackProcessing+0xc56>
 800e8dc:	4b29      	ldr	r3, [pc, #164]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e8de:	4a2a      	ldr	r2, [pc, #168]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e8e0:	f640 7183 	movw	r1, #3971	; 0xf83
 800e8e4:	4829      	ldr	r0, [pc, #164]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e8e6:	f001 ff59 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e8f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 8501 	beq.w	800f300 <Zigbee_CallBackProcessing+0x166c>
 800e8fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f000 84fb 	beq.w	800f300 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 800e90a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	653b      	str	r3, [r7, #80]	; 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 800e912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	4618      	mov	r0, r3
 800e91a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e922:	4611      	mov	r1, r2
 800e924:	4798      	blx	r3
            }
            break;
 800e926:	f000 bceb 	b.w	800f300 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 800e92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	2b02      	cmp	r3, #2
 800e932:	d006      	beq.n	800e942 <Zigbee_CallBackProcessing+0xcae>
 800e934:	4b13      	ldr	r3, [pc, #76]	; (800e984 <Zigbee_CallBackProcessing+0xcf0>)
 800e936:	4a14      	ldr	r2, [pc, #80]	; (800e988 <Zigbee_CallBackProcessing+0xcf4>)
 800e938:	f640 718e 	movw	r1, #3982	; 0xf8e
 800e93c:	4813      	ldr	r0, [pc, #76]	; (800e98c <Zigbee_CallBackProcessing+0xcf8>)
 800e93e:	f001 ff2d 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e94c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e950:	2b00      	cmp	r3, #0
 800e952:	f000 84d7 	beq.w	800f304 <Zigbee_CallBackProcessing+0x1670>
 800e956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 84d1 	beq.w	800f304 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 800e962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	657b      	str	r3, [r7, #84]	; 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 800e96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	4618      	mov	r0, r3
 800e972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e976:	685a      	ldr	r2, [r3, #4]
 800e978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e97a:	4611      	mov	r1, r2
 800e97c:	4798      	blx	r3
            }
            break;
 800e97e:	f000 bcc1 	b.w	800f304 <Zigbee_CallBackProcessing+0x1670>
 800e982:	bf00      	nop
 800e984:	08011bf8 	.word	0x08011bf8
 800e988:	08012400 	.word	0x08012400
 800e98c:	08011b60 	.word	0x08011b60
 800e990:	08011bdc 	.word	0x08011bdc
 800e994:	20000858 	.word	0x20000858
 800e998:	200006c4 	.word	0x200006c4

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 800e99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	2b02      	cmp	r3, #2
 800e9a4:	d006      	beq.n	800e9b4 <Zigbee_CallBackProcessing+0xd20>
 800e9a6:	4bc1      	ldr	r3, [pc, #772]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800e9a8:	4ac1      	ldr	r2, [pc, #772]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800e9aa:	f640 7199 	movw	r1, #3993	; 0xf99
 800e9ae:	48c1      	ldr	r0, [pc, #772]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800e9b0:	f001 fef4 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e9b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e9be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 84a0 	beq.w	800f308 <Zigbee_CallBackProcessing+0x1674>
 800e9c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f000 849a 	beq.w	800f308 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 800e9d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	65bb      	str	r3, [r7, #88]	; 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 800e9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9e8:	685a      	ldr	r2, [r3, #4]
 800e9ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	4798      	blx	r3
            }
            break;
 800e9f0:	f000 bc8a 	b.w	800f308 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 800e9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d006      	beq.n	800ea0c <Zigbee_CallBackProcessing+0xd78>
 800e9fe:	4bab      	ldr	r3, [pc, #684]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800ea00:	4aab      	ldr	r2, [pc, #684]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800ea02:	f640 71a4 	movw	r1, #4004	; 0xfa4
 800ea06:	48ab      	ldr	r0, [pc, #684]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800ea08:	f001 fec8 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ea0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ea16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 8476 	beq.w	800f30c <Zigbee_CallBackProcessing+0x1678>
 800ea20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f000 8470 	beq.w	800f30c <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 800ea2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	65fb      	str	r3, [r7, #92]	; 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 800ea34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea44:	4611      	mov	r1, r2
 800ea46:	4798      	blx	r3
            }
            break;
 800ea48:	f000 bc60 	b.w	800f30c <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 800ea4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d006      	beq.n	800ea64 <Zigbee_CallBackProcessing+0xdd0>
 800ea56:	4b95      	ldr	r3, [pc, #596]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800ea58:	4a95      	ldr	r2, [pc, #596]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800ea5a:	f640 71af 	movw	r1, #4015	; 0xfaf
 800ea5e:	4895      	ldr	r0, [pc, #596]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800ea60:	f001 fe9c 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ea64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ea6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 844c 	beq.w	800f310 <Zigbee_CallBackProcessing+0x167c>
 800ea78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f000 8446 	beq.w	800f310 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 800ea84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	663b      	str	r3, [r7, #96]	; 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 800ea8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4798      	blx	r3
            }
            break;
 800eaa0:	f000 bc36 	b.w	800f310 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 800eaa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d006      	beq.n	800eabc <Zigbee_CallBackProcessing+0xe28>
 800eaae:	4b7f      	ldr	r3, [pc, #508]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800eab0:	4a7f      	ldr	r2, [pc, #508]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800eab2:	f640 71ba 	movw	r1, #4026	; 0xfba
 800eab6:	487f      	ldr	r0, [pc, #508]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800eab8:	f001 fe70 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800eabc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800eac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f000 8422 	beq.w	800f314 <Zigbee_CallBackProcessing+0x1680>
 800ead0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 841c 	beq.w	800f314 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 800eadc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	667b      	str	r3, [r7, #100]	; 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 800eae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	4798      	blx	r3
            }
            break;
 800eaf8:	f000 bc0c 	b.w	800f314 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 800eafc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d006      	beq.n	800eb14 <Zigbee_CallBackProcessing+0xe80>
 800eb06:	4b69      	ldr	r3, [pc, #420]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800eb08:	4a69      	ldr	r2, [pc, #420]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800eb0a:	f640 71c5 	movw	r1, #4037	; 0xfc5
 800eb0e:	4869      	ldr	r0, [pc, #420]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800eb10:	f001 fe44 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800eb14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800eb1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f000 83f8 	beq.w	800f318 <Zigbee_CallBackProcessing+0x1684>
 800eb28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 83f2 	beq.w	800f318 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 800eb34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	66bb      	str	r3, [r7, #104]	; 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 800eb3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4798      	blx	r3
            }
            break;
 800eb50:	e3e2      	b.n	800f318 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 800eb52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d006      	beq.n	800eb6a <Zigbee_CallBackProcessing+0xed6>
 800eb5c:	4b56      	ldr	r3, [pc, #344]	; (800ecb8 <Zigbee_CallBackProcessing+0x1024>)
 800eb5e:	4a54      	ldr	r2, [pc, #336]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800eb60:	f640 71d2 	movw	r1, #4050	; 0xfd2
 800eb64:	4853      	ldr	r0, [pc, #332]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800eb66:	f001 fe19 	bl	801079c <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 800eb6a:	4b54      	ldr	r3, [pc, #336]	; (800ecbc <Zigbee_CallBackProcessing+0x1028>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f000 83d4 	beq.w	800f31c <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 800eb74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	66fb      	str	r3, [r7, #108]	; 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 800eb7c:	4b4f      	ldr	r3, [pc, #316]	; (800ecbc <Zigbee_CallBackProcessing+0x1028>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a4f      	ldr	r2, [pc, #316]	; (800ecc0 <Zigbee_CallBackProcessing+0x102c>)
 800eb82:	6812      	ldr	r2, [r2, #0]
 800eb84:	4611      	mov	r1, r2
 800eb86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb88:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 800eb8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	2b85      	cmp	r3, #133	; 0x85
 800eb90:	f040 83c4 	bne.w	800f31c <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 800eb94:	4b49      	ldr	r3, [pc, #292]	; (800ecbc <Zigbee_CallBackProcessing+0x1028>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 800eb9a:	e3bf      	b.n	800f31c <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 800eb9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	2b02      	cmp	r3, #2
 800eba4:	d006      	beq.n	800ebb4 <Zigbee_CallBackProcessing+0xf20>
 800eba6:	4b41      	ldr	r3, [pc, #260]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800eba8:	4a41      	ldr	r2, [pc, #260]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800ebaa:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800ebae:	4841      	ldr	r0, [pc, #260]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800ebb0:	f001 fdf4 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ebb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ebbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 83ac 	beq.w	800f320 <Zigbee_CallBackProcessing+0x168c>
 800ebc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 83a6 	beq.w	800f320 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 800ebd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 800ebde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	4798      	blx	r3
            }
            break;
 800ebf4:	e394      	b.n	800f320 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 800ebf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d006      	beq.n	800ec0e <Zigbee_CallBackProcessing+0xf7a>
 800ec00:	4b2a      	ldr	r3, [pc, #168]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800ec02:	4a2b      	ldr	r2, [pc, #172]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800ec04:	f640 71eb 	movw	r1, #4075	; 0xfeb
 800ec08:	482a      	ldr	r0, [pc, #168]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800ec0a:	f001 fdc7 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ec0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ec18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 8381 	beq.w	800f324 <Zigbee_CallBackProcessing+0x1690>
 800ec22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 837b 	beq.w	800f324 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 800ec2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 800ec38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	4798      	blx	r3
            }
            break;
 800ec4e:	e369      	b.n	800f324 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 800ec50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d006      	beq.n	800ec68 <Zigbee_CallBackProcessing+0xfd4>
 800ec5a:	4b14      	ldr	r3, [pc, #80]	; (800ecac <Zigbee_CallBackProcessing+0x1018>)
 800ec5c:	4a14      	ldr	r2, [pc, #80]	; (800ecb0 <Zigbee_CallBackProcessing+0x101c>)
 800ec5e:	f640 71f6 	movw	r1, #4086	; 0xff6
 800ec62:	4814      	ldr	r0, [pc, #80]	; (800ecb4 <Zigbee_CallBackProcessing+0x1020>)
 800ec64:	f001 fd9a 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ec68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ec72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 8356 	beq.w	800f328 <Zigbee_CallBackProcessing+0x1694>
 800ec7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 8350 	beq.w	800f328 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 800ec88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 800ec92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ec9e:	685a      	ldr	r2, [r3, #4]
 800eca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eca4:	4611      	mov	r1, r2
 800eca6:	4798      	blx	r3
            }
            break;
 800eca8:	e33e      	b.n	800f328 <Zigbee_CallBackProcessing+0x1694>
 800ecaa:	bf00      	nop
 800ecac:	08011bf8 	.word	0x08011bf8
 800ecb0:	08012400 	.word	0x08012400
 800ecb4:	08011b60 	.word	0x08011b60
 800ecb8:	08011bc0 	.word	0x08011bc0
 800ecbc:	200006bc 	.word	0x200006bc
 800ecc0:	200006c0 	.word	0x200006c0

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 800ecc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d006      	beq.n	800ecdc <Zigbee_CallBackProcessing+0x1048>
 800ecce:	4bc5      	ldr	r3, [pc, #788]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800ecd0:	4ac5      	ldr	r2, [pc, #788]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ecd2:	f241 0101 	movw	r1, #4097	; 0x1001
 800ecd6:	48c5      	ldr	r0, [pc, #788]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ecd8:	f001 fd60 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ecdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ece6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 831e 	beq.w	800f32c <Zigbee_CallBackProcessing+0x1698>
 800ecf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f000 8318 	beq.w	800f32c <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 800ecfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 800ed06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed12:	685a      	ldr	r2, [r3, #4]
 800ed14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed18:	4611      	mov	r1, r2
 800ed1a:	4798      	blx	r3
            }
            break;
 800ed1c:	e306      	b.n	800f32c <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 800ed1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d006      	beq.n	800ed36 <Zigbee_CallBackProcessing+0x10a2>
 800ed28:	4bae      	ldr	r3, [pc, #696]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800ed2a:	4aaf      	ldr	r2, [pc, #700]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ed2c:	f241 010c 	movw	r1, #4108	; 0x100c
 800ed30:	48ae      	ldr	r0, [pc, #696]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ed32:	f001 fd33 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ed36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ed40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f000 82f3 	beq.w	800f330 <Zigbee_CallBackProcessing+0x169c>
 800ed4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 82ed 	beq.w	800f330 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 800ed56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 800ed60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ed72:	4611      	mov	r1, r2
 800ed74:	4798      	blx	r3
            }
            break;
 800ed76:	e2db      	b.n	800f330 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 800ed78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	2b02      	cmp	r3, #2
 800ed80:	d006      	beq.n	800ed90 <Zigbee_CallBackProcessing+0x10fc>
 800ed82:	4b98      	ldr	r3, [pc, #608]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800ed84:	4a98      	ldr	r2, [pc, #608]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ed86:	f241 0117 	movw	r1, #4119	; 0x1017
 800ed8a:	4898      	ldr	r0, [pc, #608]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ed8c:	f001 fd06 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ed90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ed9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f000 82c8 	beq.w	800f334 <Zigbee_CallBackProcessing+0x16a0>
 800eda4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 82c2 	beq.w	800f334 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 800edb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 800edba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800edcc:	4611      	mov	r1, r2
 800edce:	4798      	blx	r3
            }
            break;
 800edd0:	e2b0      	b.n	800f334 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 800edd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	2b02      	cmp	r3, #2
 800edda:	d006      	beq.n	800edea <Zigbee_CallBackProcessing+0x1156>
 800eddc:	4b81      	ldr	r3, [pc, #516]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800edde:	4a82      	ldr	r2, [pc, #520]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ede0:	f241 0122 	movw	r1, #4130	; 0x1022
 800ede4:	4881      	ldr	r0, [pc, #516]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ede6:	f001 fcd9 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800edea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800edf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 829d 	beq.w	800f338 <Zigbee_CallBackProcessing+0x16a4>
 800edfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f000 8297 	beq.w	800f338 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 800ee0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 800ee14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee26:	4611      	mov	r1, r2
 800ee28:	4798      	blx	r3
            }
            break;
 800ee2a:	e285      	b.n	800f338 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 800ee2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	d006      	beq.n	800ee44 <Zigbee_CallBackProcessing+0x11b0>
 800ee36:	4b6b      	ldr	r3, [pc, #428]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800ee38:	4a6b      	ldr	r2, [pc, #428]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ee3a:	f241 012d 	movw	r1, #4141	; 0x102d
 800ee3e:	486b      	ldr	r0, [pc, #428]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ee40:	f001 fcac 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ee44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ee4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f000 8272 	beq.w	800f33c <Zigbee_CallBackProcessing+0x16a8>
 800ee58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f000 826c 	beq.w	800f33c <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 800ee64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 800ee6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee7a:	685a      	ldr	r2, [r3, #4]
 800ee7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee80:	4611      	mov	r1, r2
 800ee82:	4798      	blx	r3
            }
            break;
 800ee84:	e25a      	b.n	800f33c <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 800ee86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d006      	beq.n	800ee9e <Zigbee_CallBackProcessing+0x120a>
 800ee90:	4b57      	ldr	r3, [pc, #348]	; (800eff0 <Zigbee_CallBackProcessing+0x135c>)
 800ee92:	4a55      	ldr	r2, [pc, #340]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ee94:	f241 013b 	movw	r1, #4155	; 0x103b
 800ee98:	4854      	ldr	r0, [pc, #336]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ee9a:	f001 fc7f 	bl	801079c <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 800ee9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 800eea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8247 	beq.w	800f340 <Zigbee_CallBackProcessing+0x16ac>
 800eeb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 8241 	beq.w	800f340 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800eebe:	2300      	movs	r3, #0
 800eec0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eec4:	e032      	b.n	800ef2c <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 800eec6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800eeca:	4613      	mov	r3, r2
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	4413      	add	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4a48      	ldr	r2, [pc, #288]	; (800eff4 <Zigbee_CallBackProcessing+0x1360>)
 800eed4:	4413      	add	r3, r2
 800eed6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d120      	bne.n	800ef20 <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 800eede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d026      	beq.n	800ef36 <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 800eee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 800eef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 800eefc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 800ef06:	4b3c      	ldr	r3, [pc, #240]	; (800eff8 <Zigbee_CallBackProcessing+0x1364>)
 800ef08:	6818      	ldr	r0, [r3, #0]
 800ef0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800ef14:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800ef18:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800ef1c:	47a0      	blx	r4
                    break;
 800ef1e:	e00b      	b.n	800ef38 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 800ef20:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800ef22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef26:	3301      	adds	r3, #1
 800ef28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ef2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef30:	2b07      	cmp	r3, #7
 800ef32:	d9c8      	bls.n	800eec6 <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 800ef34:	e204      	b.n	800f340 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 800ef36:	bf00      	nop
            break;
 800ef38:	e202      	b.n	800f340 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 800ef3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d006      	beq.n	800ef52 <Zigbee_CallBackProcessing+0x12be>
 800ef44:	4b27      	ldr	r3, [pc, #156]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800ef46:	4a28      	ldr	r2, [pc, #160]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ef48:	f241 015c 	movw	r1, #4188	; 0x105c
 800ef4c:	4827      	ldr	r0, [pc, #156]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ef4e:	f001 fc25 	bl	801079c <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800ef52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            cb_arg = (void *)p_notification->Data[1];
 800ef5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 800ef66:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ef6a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800ef6e:	f7f1 fe3d 	bl	8000bec <zcl_cluster_data_ind>
 800ef72:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800ef76:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ef7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef7e:	60da      	str	r2, [r3, #12]
            break;
 800ef80:	e1f7      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 800ef82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	d006      	beq.n	800ef9a <Zigbee_CallBackProcessing+0x1306>
 800ef8c:	4b15      	ldr	r3, [pc, #84]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800ef8e:	4a16      	ldr	r2, [pc, #88]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800ef90:	f241 016b 	movw	r1, #4203	; 0x106b
 800ef94:	4815      	ldr	r0, [pc, #84]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800ef96:	f001 fc01 	bl	801079c <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800ef9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            cb_arg = (void *)p_notification->Data[1];
 800efa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 800efae:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800efb2:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800efb6:	f7f1 fe33 	bl	8000c20 <zcl_cluster_alarm_data_ind>
 800efba:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800efbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800efc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efc6:	60da      	str	r2, [r3, #12]
            break;
 800efc8:	e1d3      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 800efca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d013      	beq.n	800effc <Zigbee_CallBackProcessing+0x1368>
 800efd4:	4b03      	ldr	r3, [pc, #12]	; (800efe4 <Zigbee_CallBackProcessing+0x1350>)
 800efd6:	4a04      	ldr	r2, [pc, #16]	; (800efe8 <Zigbee_CallBackProcessing+0x1354>)
 800efd8:	f241 0175 	movw	r1, #4213	; 0x1075
 800efdc:	4803      	ldr	r0, [pc, #12]	; (800efec <Zigbee_CallBackProcessing+0x1358>)
 800efde:	f001 fbdd 	bl	801079c <__assert_func>
 800efe2:	bf00      	nop
 800efe4:	08011bf8 	.word	0x08011bf8
 800efe8:	08012400 	.word	0x08012400
 800efec:	08011b60 	.word	0x08011b60
 800eff0:	08011bdc 	.word	0x08011bdc
 800eff4:	20000858 	.word	0x20000858
 800eff8:	200006c4 	.word	0x200006c4
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800effc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800f006:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 81a8 	beq.w	800f360 <Zigbee_CallBackProcessing+0x16cc>
 800f010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 81a2 	beq.w	800f360 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 800f01c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 800f026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f038:	4611      	mov	r1, r2
 800f03a:	4798      	blx	r3
            }
            break;
 800f03c:	e190      	b.n	800f360 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 800f03e:	2300      	movs	r3, #0
 800f040:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            assert(p_notification->Size == 2);
 800f044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d006      	beq.n	800f05c <Zigbee_CallBackProcessing+0x13c8>
 800f04e:	4bbd      	ldr	r3, [pc, #756]	; (800f344 <Zigbee_CallBackProcessing+0x16b0>)
 800f050:	4abd      	ldr	r2, [pc, #756]	; (800f348 <Zigbee_CallBackProcessing+0x16b4>)
 800f052:	f241 0183 	movw	r1, #4227	; 0x1083
 800f056:	48bd      	ldr	r0, [pc, #756]	; (800f34c <Zigbee_CallBackProcessing+0x16b8>)
 800f058:	f001 fba0 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800f05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 800f066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d026      	beq.n	800f0bc <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 800f06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                if (info->callback != NULL) {
 800f078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00f      	beq.n	800f0a2 <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 800f082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    err = callback(zcl_rsp, info->arg);
 800f08c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f090:	685a      	ldr	r2, [r3, #4]
 800f092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f096:	4611      	mov	r1, r2
 800f098:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f09c:	4798      	blx	r3
 800f09e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 800f0a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f0a6:	7a1b      	ldrb	r3, [r3, #8]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d007      	beq.n	800f0bc <Zigbee_CallBackProcessing+0x1428>
 800f0ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0b0:	785b      	ldrb	r3, [r3, #1]
 800f0b2:	2b94      	cmp	r3, #148	; 0x94
 800f0b4:	d002      	beq.n	800f0bc <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800f0bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800f0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f0c4:	60da      	str	r2, [r3, #12]
            break;
 800f0c6:	e154      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 800f0c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	d006      	beq.n	800f0e0 <Zigbee_CallBackProcessing+0x144c>
 800f0d2:	4b9c      	ldr	r3, [pc, #624]	; (800f344 <Zigbee_CallBackProcessing+0x16b0>)
 800f0d4:	4a9c      	ldr	r2, [pc, #624]	; (800f348 <Zigbee_CallBackProcessing+0x16b4>)
 800f0d6:	f241 019b 	movw	r1, #4251	; 0x109b
 800f0da:	489c      	ldr	r0, [pc, #624]	; (800f34c <Zigbee_CallBackProcessing+0x16b8>)
 800f0dc:	f001 fb5e 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800f0e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800f0ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f000 8138 	beq.w	800f364 <Zigbee_CallBackProcessing+0x16d0>
 800f0f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 8132 	beq.w	800f364 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 800f100:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 800f10a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	4618      	mov	r0, r3
 800f112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f116:	685a      	ldr	r2, [r3, #4]
 800f118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f11c:	4611      	mov	r1, r2
 800f11e:	4798      	blx	r3
            }
            break;
 800f120:	e120      	b.n	800f364 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 800f122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	2b02      	cmp	r3, #2
 800f12a:	d006      	beq.n	800f13a <Zigbee_CallBackProcessing+0x14a6>
 800f12c:	4b85      	ldr	r3, [pc, #532]	; (800f344 <Zigbee_CallBackProcessing+0x16b0>)
 800f12e:	4a86      	ldr	r2, [pc, #536]	; (800f348 <Zigbee_CallBackProcessing+0x16b4>)
 800f130:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800f134:	4885      	ldr	r0, [pc, #532]	; (800f34c <Zigbee_CallBackProcessing+0x16b8>)
 800f136:	f001 fb31 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800f13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800f144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 810d 	beq.w	800f368 <Zigbee_CallBackProcessing+0x16d4>
 800f14e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 8107 	beq.w	800f368 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 800f15a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 800f164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f170:	685a      	ldr	r2, [r3, #4]
 800f172:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f176:	4611      	mov	r1, r2
 800f178:	4798      	blx	r3
            }
            break;
 800f17a:	e0f5      	b.n	800f368 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 800f17c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	2b02      	cmp	r3, #2
 800f184:	d006      	beq.n	800f194 <Zigbee_CallBackProcessing+0x1500>
 800f186:	4b6f      	ldr	r3, [pc, #444]	; (800f344 <Zigbee_CallBackProcessing+0x16b0>)
 800f188:	4a6f      	ldr	r2, [pc, #444]	; (800f348 <Zigbee_CallBackProcessing+0x16b4>)
 800f18a:	f241 01b1 	movw	r1, #4273	; 0x10b1
 800f18e:	486f      	ldr	r0, [pc, #444]	; (800f34c <Zigbee_CallBackProcessing+0x16b8>)
 800f190:	f001 fb04 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800f194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800f19e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f000 80e2 	beq.w	800f36c <Zigbee_CallBackProcessing+0x16d8>
 800f1a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 80dc 	beq.w	800f36c <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 800f1b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 800f1be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1ca:	685a      	ldr	r2, [r3, #4]
 800f1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	4798      	blx	r3
            }
            break;
 800f1d4:	e0ca      	b.n	800f36c <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 800f1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	2b05      	cmp	r3, #5
 800f1de:	d006      	beq.n	800f1ee <Zigbee_CallBackProcessing+0x155a>
 800f1e0:	4b5b      	ldr	r3, [pc, #364]	; (800f350 <Zigbee_CallBackProcessing+0x16bc>)
 800f1e2:	4a59      	ldr	r2, [pc, #356]	; (800f348 <Zigbee_CallBackProcessing+0x16b4>)
 800f1e4:	f241 01bc 	movw	r1, #4284	; 0x10bc
 800f1e8:	4858      	ldr	r0, [pc, #352]	; (800f34c <Zigbee_CallBackProcessing+0x16b8>)
 800f1ea:	f001 fad7 	bl	801079c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 800f1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800f1f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f000 80b7 	beq.w	800f370 <Zigbee_CallBackProcessing+0x16dc>
 800f202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f000 80b1 	beq.w	800f370 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 800f20e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f212:	f103 0108 	add.w	r1, r3, #8
 800f216:	463b      	mov	r3, r7
 800f218:	2208      	movs	r2, #8
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fd fc92 	bl	800cb44 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 800f220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 800f22a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	b29a      	uxth	r2, r3
 800f236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f23a:	695b      	ldr	r3, [r3, #20]
 800f23c:	b2dd      	uxtb	r5, r3
 800f23e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800f24a:	462b      	mov	r3, r5
 800f24c:	47a0      	blx	r4
            }
            break;
 800f24e:	e08f      	b.n	800f370 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 800f250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	2b03      	cmp	r3, #3
 800f258:	d006      	beq.n	800f268 <Zigbee_CallBackProcessing+0x15d4>
 800f25a:	4b3e      	ldr	r3, [pc, #248]	; (800f354 <Zigbee_CallBackProcessing+0x16c0>)
 800f25c:	4a3a      	ldr	r2, [pc, #232]	; (800f348 <Zigbee_CallBackProcessing+0x16b4>)
 800f25e:	f241 01cd 	movw	r1, #4301	; 0x10cd
 800f262:	483a      	ldr	r0, [pc, #232]	; (800f34c <Zigbee_CallBackProcessing+0x16b8>)
 800f264:	f001 fa9a 	bl	801079c <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 800f268:	4b3b      	ldr	r3, [pc, #236]	; (800f358 <Zigbee_CallBackProcessing+0x16c4>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d103      	bne.n	800f278 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 800f270:	2381      	movs	r3, #129	; 0x81
 800f272:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                break;
 800f276:	e07c      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 800f278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	64fb      	str	r3, [r7, #76]	; 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 800f280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	64bb      	str	r3, [r7, #72]	; 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 800f288:	4b33      	ldr	r3, [pc, #204]	; (800f358 <Zigbee_CallBackProcessing+0x16c4>)
 800f28a:	681c      	ldr	r4, [r3, #0]
 800f28c:	4b33      	ldr	r3, [pc, #204]	; (800f35c <Zigbee_CallBackProcessing+0x16c8>)
 800f28e:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 800f290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f294:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 800f296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f298:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f29a:	47a0      	blx	r4
 800f29c:	4603      	mov	r3, r0
 800f29e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 800f2a2:	e066      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 800f2aa:	e062      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2ac:	bf00      	nop
 800f2ae:	e060      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2b0:	bf00      	nop
 800f2b2:	e05e      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2b4:	bf00      	nop
 800f2b6:	e05c      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2b8:	bf00      	nop
 800f2ba:	e05a      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2bc:	bf00      	nop
 800f2be:	e058      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2c0:	bf00      	nop
 800f2c2:	e056      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2c4:	bf00      	nop
 800f2c6:	e054      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2c8:	bf00      	nop
 800f2ca:	e052      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2cc:	bf00      	nop
 800f2ce:	e050      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2d0:	bf00      	nop
 800f2d2:	e04e      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2d4:	bf00      	nop
 800f2d6:	e04c      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2d8:	bf00      	nop
 800f2da:	e04a      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2dc:	bf00      	nop
 800f2de:	e048      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2e0:	bf00      	nop
 800f2e2:	e046      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2e4:	bf00      	nop
 800f2e6:	e044      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2e8:	bf00      	nop
 800f2ea:	e042      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2ec:	bf00      	nop
 800f2ee:	e040      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2f0:	bf00      	nop
 800f2f2:	e03e      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2f4:	bf00      	nop
 800f2f6:	e03c      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2f8:	bf00      	nop
 800f2fa:	e03a      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f2fc:	bf00      	nop
 800f2fe:	e038      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f300:	bf00      	nop
 800f302:	e036      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f304:	bf00      	nop
 800f306:	e034      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f308:	bf00      	nop
 800f30a:	e032      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f30c:	bf00      	nop
 800f30e:	e030      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f310:	bf00      	nop
 800f312:	e02e      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f314:	bf00      	nop
 800f316:	e02c      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f318:	bf00      	nop
 800f31a:	e02a      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f31c:	bf00      	nop
 800f31e:	e028      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f320:	bf00      	nop
 800f322:	e026      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f324:	bf00      	nop
 800f326:	e024      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f328:	bf00      	nop
 800f32a:	e022      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f32c:	bf00      	nop
 800f32e:	e020      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f330:	bf00      	nop
 800f332:	e01e      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f334:	bf00      	nop
 800f336:	e01c      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f338:	bf00      	nop
 800f33a:	e01a      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f33c:	bf00      	nop
 800f33e:	e018      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f340:	bf00      	nop
 800f342:	e016      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
 800f344:	08011bf8 	.word	0x08011bf8
 800f348:	08012400 	.word	0x08012400
 800f34c:	08011b60 	.word	0x08011b60
 800f350:	08011c14 	.word	0x08011c14
 800f354:	08011bdc 	.word	0x08011bdc
 800f358:	200006b0 	.word	0x200006b0
 800f35c:	200006c4 	.word	0x200006c4
            break;
 800f360:	bf00      	nop
 800f362:	e006      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f364:	bf00      	nop
 800f366:	e004      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f368:	bf00      	nop
 800f36a:	e002      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f36c:	bf00      	nop
 800f36e:	e000      	b.n	800f372 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f370:	bf00      	nop
    }

    if (info != NULL) {
 800f372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 800f37a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800f37e:	f7fd fc1d 	bl	800cbbc <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 800f382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f386:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f38a:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 800f38c:	f7fd f9ce 	bl	800c72c <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 800f390:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 800f394:	4618      	mov	r0, r3
 800f396:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f39e:	bf00      	nop

0800f3a0 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 800f3a0:	b590      	push	{r4, r7, lr}
 800f3a2:	b089      	sub	sp, #36	; 0x24
 800f3a4:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 800f3aa:	f000 fbef 	bl	800fb8c <ZIGBEE_Get_M0RequestPayloadBuffer>
 800f3ae:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b09      	cmp	r3, #9
 800f3b6:	d046      	beq.n	800f446 <Zigbee_M0RequestProcessing+0xa6>
 800f3b8:	2b09      	cmp	r3, #9
 800f3ba:	d864      	bhi.n	800f486 <Zigbee_M0RequestProcessing+0xe6>
 800f3bc:	2b07      	cmp	r3, #7
 800f3be:	d002      	beq.n	800f3c6 <Zigbee_M0RequestProcessing+0x26>
 800f3c0:	2b08      	cmp	r3, #8
 800f3c2:	d01e      	beq.n	800f402 <Zigbee_M0RequestProcessing+0x62>
 800f3c4:	e05f      	b.n	800f486 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d006      	beq.n	800f3dc <Zigbee_M0RequestProcessing+0x3c>
 800f3ce:	4b33      	ldr	r3, [pc, #204]	; (800f49c <Zigbee_M0RequestProcessing+0xfc>)
 800f3d0:	4a33      	ldr	r2, [pc, #204]	; (800f4a0 <Zigbee_M0RequestProcessing+0x100>)
 800f3d2:	f241 01f4 	movw	r1, #4340	; 0x10f4
 800f3d6:	4833      	ldr	r0, [pc, #204]	; (800f4a4 <Zigbee_M0RequestProcessing+0x104>)
 800f3d8:	f001 f9e0 	bl	801079c <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 800f3e2:	4b31      	ldr	r3, [pc, #196]	; (800f4a8 <Zigbee_M0RequestProcessing+0x108>)
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d050      	beq.n	800f48c <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 800f3ea:	4b2f      	ldr	r3, [pc, #188]	; (800f4a8 <Zigbee_M0RequestProcessing+0x108>)
 800f3ec:	685c      	ldr	r4, [r3, #4]
 800f3ee:	4b2e      	ldr	r3, [pc, #184]	; (800f4a8 <Zigbee_M0RequestProcessing+0x108>)
 800f3f0:	6818      	ldr	r0, [r3, #0]
 800f3f2:	4b2e      	ldr	r3, [pc, #184]	; (800f4ac <Zigbee_M0RequestProcessing+0x10c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 800f400:	e044      	b.n	800f48c <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d006      	beq.n	800f418 <Zigbee_M0RequestProcessing+0x78>
 800f40a:	4b24      	ldr	r3, [pc, #144]	; (800f49c <Zigbee_M0RequestProcessing+0xfc>)
 800f40c:	4a24      	ldr	r2, [pc, #144]	; (800f4a0 <Zigbee_M0RequestProcessing+0x100>)
 800f40e:	f241 1104 	movw	r1, #4356	; 0x1104
 800f412:	4824      	ldr	r0, [pc, #144]	; (800f4a4 <Zigbee_M0RequestProcessing+0x104>)
 800f414:	f001 f9c2 	bl	801079c <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3304      	adds	r3, #4
 800f422:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 f9d7 	bl	80107d8 <malloc>
 800f42a:	4603      	mov	r3, r0
 800f42c:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 800f434:	6879      	ldr	r1, [r7, #4]
 800f436:	6938      	ldr	r0, [r7, #16]
 800f438:	f000 f83c 	bl	800f4b4 <zb_malloc_track>
 800f43c:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 800f43e:	693a      	ldr	r2, [r7, #16]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	60da      	str	r2, [r3, #12]
            break;
 800f444:	e023      	b.n	800f48e <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d006      	beq.n	800f45c <Zigbee_M0RequestProcessing+0xbc>
 800f44e:	4b13      	ldr	r3, [pc, #76]	; (800f49c <Zigbee_M0RequestProcessing+0xfc>)
 800f450:	4a13      	ldr	r2, [pc, #76]	; (800f4a0 <Zigbee_M0RequestProcessing+0x100>)
 800f452:	f241 1118 	movw	r1, #4376	; 0x1118
 800f456:	4813      	ldr	r0, [pc, #76]	; (800f4a4 <Zigbee_M0RequestProcessing+0x104>)
 800f458:	f001 f9a0 	bl	801079c <__assert_func>
            ptr = (void *)p_logging->Data[0];
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d106      	bne.n	800f476 <Zigbee_M0RequestProcessing+0xd6>
 800f468:	4b11      	ldr	r3, [pc, #68]	; (800f4b0 <Zigbee_M0RequestProcessing+0x110>)
 800f46a:	4a0d      	ldr	r2, [pc, #52]	; (800f4a0 <Zigbee_M0RequestProcessing+0x100>)
 800f46c:	f241 111a 	movw	r1, #4378	; 0x111a
 800f470:	480c      	ldr	r0, [pc, #48]	; (800f4a4 <Zigbee_M0RequestProcessing+0x104>)
 800f472:	f001 f993 	bl	801079c <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 800f476:	68b8      	ldr	r0, [r7, #8]
 800f478:	f000 f838 	bl	800f4ec <zb_malloc_untrack>
 800f47c:	60b8      	str	r0, [r7, #8]
            free(ptr);
 800f47e:	68b8      	ldr	r0, [r7, #8]
 800f480:	f001 f9b2 	bl	80107e8 <free>
            break;
 800f484:	e003      	b.n	800f48e <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	75fb      	strb	r3, [r7, #23]
            break;
 800f48a:	e000      	b.n	800f48e <Zigbee_M0RequestProcessing+0xee>
            break;
 800f48c:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 800f48e:	f7fd f967 	bl	800c760 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 800f492:	7dfb      	ldrb	r3, [r7, #23]
}
 800f494:	4618      	mov	r0, r3
 800f496:	371c      	adds	r7, #28
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd90      	pop	{r4, r7, pc}
 800f49c:	08011c30 	.word	0x08011c30
 800f4a0:	0801241c 	.word	0x0801241c
 800f4a4:	08011b60 	.word	0x08011b60
 800f4a8:	200006c4 	.word	0x200006c4
 800f4ac:	080121b8 	.word	0x080121b8
 800f4b0:	08011c48 	.word	0x08011c48

0800f4b4 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b085      	sub	sp, #20
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 800f4ca:	4b07      	ldr	r3, [pc, #28]	; (800f4e8 <zb_malloc_track+0x34>)
 800f4cc:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	4a04      	ldr	r2, [pc, #16]	; (800f4e8 <zb_malloc_track+0x34>)
 800f4d6:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 800f4da:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3714      	adds	r7, #20
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr
 800f4e8:	200006c4 	.word	0x200006c4

0800f4ec <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3b04      	subs	r3, #4
 800f4f8:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <zb_malloc_untrack+0x34>)
 800f502:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	1ad3      	subs	r3, r2, r3
 800f50a:	4a05      	ldr	r2, [pc, #20]	; (800f520 <zb_malloc_untrack+0x34>)
 800f50c:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 800f510:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800f512:	4618      	mov	r0, r3
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	200006c4 	.word	0x200006c4

0800f524 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 800f52a:	4a12      	ldr	r2, [pc, #72]	; (800f574 <APP_ZIGBEE_Init+0x50>)
 800f52c:	2101      	movs	r1, #1
 800f52e:	2000      	movs	r0, #0
 800f530:	f7f8 fc2e 	bl	8007d90 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 800f534:	f000 fa20 	bl	800f978 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 800f538:	480f      	ldr	r0, [pc, #60]	; (800f578 <APP_ZIGBEE_Init+0x54>)
 800f53a:	f000 faf3 	bl	800fb24 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 800f53e:	f000 fbad 	bl	800fc9c <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 800f542:	4a0e      	ldr	r2, [pc, #56]	; (800f57c <APP_ZIGBEE_Init+0x58>)
 800f544:	2100      	movs	r1, #0
 800f546:	2001      	movs	r0, #1
 800f548:	f001 f826 	bl	8010598 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 800f54c:	4a0c      	ldr	r2, [pc, #48]	; (800f580 <APP_ZIGBEE_Init+0x5c>)
 800f54e:	2100      	movs	r1, #0
 800f550:	2002      	movs	r0, #2
 800f552:	f001 f821 	bl	8010598 <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 800f556:	4a0b      	ldr	r2, [pc, #44]	; (800f584 <APP_ZIGBEE_Init+0x60>)
 800f558:	2100      	movs	r1, #0
 800f55a:	2004      	movs	r0, #4
 800f55c:	f001 f81c 	bl	8010598 <UTIL_SEQ_RegTask>
  /* USER CODE BEGIN APP_ZIGBEE_INIT */

  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 800f560:	f7fc fdb0 	bl	800c0c4 <SHCI_C2_ZIGBEE_Init>
 800f564:	4603      	mov	r3, r0
 800f566:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 800f568:	f000 f80e 	bl	800f588 <APP_ZIGBEE_StackLayersInit>

}
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	08011c54 	.word	0x08011c54
 800f578:	20030838 	.word	0x20030838
 800f57c:	0800fccd 	.word	0x0800fccd
 800f580:	0800fcfd 	.word	0x0800fcfd
 800f584:	0800f761 	.word	0x0800f761

0800f588 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 800f58c:	4a17      	ldr	r2, [pc, #92]	; (800f5ec <APP_ZIGBEE_StackLayersInit+0x64>)
 800f58e:	2101      	movs	r1, #1
 800f590:	2000      	movs	r0, #0
 800f592:	f7f8 fbfd 	bl	8007d90 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 800f596:	2300      	movs	r3, #0
 800f598:	2200      	movs	r2, #0
 800f59a:	f04f 0000 	mov.w	r0, #0
 800f59e:	f04f 0100 	mov.w	r1, #0
 800f5a2:	f7fd fb3b 	bl	800cc1c <ZbInit>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	4a11      	ldr	r2, [pc, #68]	; (800f5f0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f5aa:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 800f5ac:	4b10      	ldr	r3, [pc, #64]	; (800f5f0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d105      	bne.n	800f5c0 <APP_ZIGBEE_StackLayersInit+0x38>
 800f5b4:	4b0f      	ldr	r3, [pc, #60]	; (800f5f4 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800f5b6:	4a10      	ldr	r2, [pc, #64]	; (800f5f8 <APP_ZIGBEE_StackLayersInit+0x70>)
 800f5b8:	21b0      	movs	r1, #176	; 0xb0
 800f5ba:	4810      	ldr	r0, [pc, #64]	; (800f5fc <APP_ZIGBEE_StackLayersInit+0x74>)
 800f5bc:	f001 f8ee 	bl	801079c <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 800f5c0:	f000 f81e 	bl	800f600 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 800f5ca:	f7f8 fdc1 	bl	8008150 <HAL_GetTick>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	4a07      	ldr	r2, [pc, #28]	; (800f5f0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f5d2:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeForm;
 800f5d4:	4b06      	ldr	r3, [pc, #24]	; (800f5f0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	721a      	strb	r2, [r3, #8]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 800f5da:	4b05      	ldr	r3, [pc, #20]	; (800f5f0 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f5dc:	2201      	movs	r2, #1
 800f5de:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	2004      	movs	r0, #4
 800f5e4:	f000 fffa 	bl	80105dc <UTIL_SEQ_SetTask>
}
 800f5e8:	bf00      	nop
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	08011c64 	.word	0x08011c64
 800f5f0:	200008cc 	.word	0x200008cc
 800f5f4:	08011c80 	.word	0x08011c80
 800f5f8:	08012438 	.word	0x08012438
 800f5fc:	08011c9c 	.word	0x08011c9c

0800f600 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b088      	sub	sp, #32
 800f604:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 800f606:	f107 0308 	add.w	r3, r7, #8
 800f60a:	2218      	movs	r2, #24
 800f60c:	2100      	movs	r1, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f001 fad5 	bl	8010bbe <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 800f614:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f618:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_REMOTE_CONTROL;
 800f61a:	2306      	movs	r3, #6
 800f61c:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 800f61e:	2301      	movs	r3, #1
 800f620:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 800f622:	4b46      	ldr	r3, [pc, #280]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f624:	685b      	ldr	r3, [r3, #4]
 800f626:	1d3a      	adds	r2, r7, #4
 800f628:	f107 0108 	add.w	r1, r7, #8
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe f8b7 	bl	800d7a0 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 800f632:	793b      	ldrb	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d005      	beq.n	800f644 <APP_ZIGBEE_ConfigEndpoints+0x44>
 800f638:	4b41      	ldr	r3, [pc, #260]	; (800f740 <APP_ZIGBEE_ConfigEndpoints+0x140>)
 800f63a:	4a42      	ldr	r2, [pc, #264]	; (800f744 <APP_ZIGBEE_ConfigEndpoints+0x144>)
 800f63c:	21d5      	movs	r1, #213	; 0xd5
 800f63e:	4842      	ldr	r0, [pc, #264]	; (800f748 <APP_ZIGBEE_ConfigEndpoints+0x148>)
 800f640:	f001 f8ac 	bl	801079c <__assert_func>

  /* Temperature meas client */
  zigbee_app_info.temperature_meas_client_1 = ZbZclTempMeasClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 800f644:	4b3d      	ldr	r3, [pc, #244]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	2101      	movs	r1, #1
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7f1 fdb2 	bl	80011b4 <ZbZclTempMeasClientAlloc>
 800f650:	4603      	mov	r3, r0
 800f652:	4a3a      	ldr	r2, [pc, #232]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f654:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.temperature_meas_client_1 != NULL);
 800f656:	4b39      	ldr	r3, [pc, #228]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f658:	695b      	ldr	r3, [r3, #20]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d105      	bne.n	800f66a <APP_ZIGBEE_ConfigEndpoints+0x6a>
 800f65e:	4b3b      	ldr	r3, [pc, #236]	; (800f74c <APP_ZIGBEE_ConfigEndpoints+0x14c>)
 800f660:	4a38      	ldr	r2, [pc, #224]	; (800f744 <APP_ZIGBEE_ConfigEndpoints+0x144>)
 800f662:	21d9      	movs	r1, #217	; 0xd9
 800f664:	4838      	ldr	r0, [pc, #224]	; (800f748 <APP_ZIGBEE_ConfigEndpoints+0x148>)
 800f666:	f001 f899 	bl	801079c <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.temperature_meas_client_1);
 800f66a:	4b34      	ldr	r3, [pc, #208]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f66c:	695b      	ldr	r3, [r3, #20]
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fe f9c3 	bl	800d9fa <ZbZclClusterEndpointRegister>
  /* ElectricalMeasurement client */
  zigbee_app_info.electricalMeasurement_client_1 = ZbZclElecMeasClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 800f674:	4b31      	ldr	r3, [pc, #196]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	2101      	movs	r1, #1
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7f1 fbbd 	bl	8000dfa <ZbZclElecMeasClientAlloc>
 800f680:	4603      	mov	r3, r0
 800f682:	4a2e      	ldr	r2, [pc, #184]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f684:	6193      	str	r3, [r2, #24]
  assert(zigbee_app_info.electricalMeasurement_client_1 != NULL);
 800f686:	4b2d      	ldr	r3, [pc, #180]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f688:	699b      	ldr	r3, [r3, #24]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d105      	bne.n	800f69a <APP_ZIGBEE_ConfigEndpoints+0x9a>
 800f68e:	4b30      	ldr	r3, [pc, #192]	; (800f750 <APP_ZIGBEE_ConfigEndpoints+0x150>)
 800f690:	4a2c      	ldr	r2, [pc, #176]	; (800f744 <APP_ZIGBEE_ConfigEndpoints+0x144>)
 800f692:	21dd      	movs	r1, #221	; 0xdd
 800f694:	482c      	ldr	r0, [pc, #176]	; (800f748 <APP_ZIGBEE_ConfigEndpoints+0x148>)
 800f696:	f001 f881 	bl	801079c <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.electricalMeasurement_client_1);
 800f69a:	4b28      	ldr	r3, [pc, #160]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f69c:	699b      	ldr	r3, [r3, #24]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fe f9ab 	bl	800d9fa <ZbZclClusterEndpointRegister>
  /* Fan client */
  zigbee_app_info.fan_client_1 = ZbZclFanClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 800f6a4:	4b25      	ldr	r3, [pc, #148]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	2101      	movs	r1, #1
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f1 fc29 	bl	8000f02 <ZbZclFanClientAlloc>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	4a22      	ldr	r2, [pc, #136]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6b4:	61d3      	str	r3, [r2, #28]
  assert(zigbee_app_info.fan_client_1 != NULL);
 800f6b6:	4b21      	ldr	r3, [pc, #132]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6b8:	69db      	ldr	r3, [r3, #28]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d105      	bne.n	800f6ca <APP_ZIGBEE_ConfigEndpoints+0xca>
 800f6be:	4b25      	ldr	r3, [pc, #148]	; (800f754 <APP_ZIGBEE_ConfigEndpoints+0x154>)
 800f6c0:	4a20      	ldr	r2, [pc, #128]	; (800f744 <APP_ZIGBEE_ConfigEndpoints+0x144>)
 800f6c2:	21e1      	movs	r1, #225	; 0xe1
 800f6c4:	4820      	ldr	r0, [pc, #128]	; (800f748 <APP_ZIGBEE_ConfigEndpoints+0x148>)
 800f6c6:	f001 f869 	bl	801079c <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.fan_client_1);
 800f6ca:	4b1c      	ldr	r3, [pc, #112]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6cc:	69db      	ldr	r3, [r3, #28]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe f993 	bl	800d9fa <ZbZclClusterEndpointRegister>
  /* OnOff client */
  zigbee_app_info.onOff_client_1 = ZbZclOnOffClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 800f6d4:	4b19      	ldr	r3, [pc, #100]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	2101      	movs	r1, #1
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7f1 fcfc 	bl	80010d8 <ZbZclOnOffClientAlloc>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4a16      	ldr	r2, [pc, #88]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6e4:	6213      	str	r3, [r2, #32]
  assert(zigbee_app_info.onOff_client_1 != NULL);
 800f6e6:	4b15      	ldr	r3, [pc, #84]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6e8:	6a1b      	ldr	r3, [r3, #32]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d105      	bne.n	800f6fa <APP_ZIGBEE_ConfigEndpoints+0xfa>
 800f6ee:	4b1a      	ldr	r3, [pc, #104]	; (800f758 <APP_ZIGBEE_ConfigEndpoints+0x158>)
 800f6f0:	4a14      	ldr	r2, [pc, #80]	; (800f744 <APP_ZIGBEE_ConfigEndpoints+0x144>)
 800f6f2:	21e5      	movs	r1, #229	; 0xe5
 800f6f4:	4814      	ldr	r0, [pc, #80]	; (800f748 <APP_ZIGBEE_ConfigEndpoints+0x148>)
 800f6f6:	f001 f851 	bl	801079c <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.onOff_client_1);
 800f6fa:	4b10      	ldr	r3, [pc, #64]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f6fc:	6a1b      	ldr	r3, [r3, #32]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe f97b 	bl	800d9fa <ZbZclClusterEndpointRegister>
  /* Illuminance meas client */
  zigbee_app_info.illuminance_meas_client_1 = ZbZclIllumMeasClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 800f704:	4b0d      	ldr	r3, [pc, #52]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	2101      	movs	r1, #1
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7f1 fccd 	bl	80010aa <ZbZclIllumMeasClientAlloc>
 800f710:	4603      	mov	r3, r0
 800f712:	4a0a      	ldr	r2, [pc, #40]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f714:	6253      	str	r3, [r2, #36]	; 0x24
  assert(zigbee_app_info.illuminance_meas_client_1 != NULL);
 800f716:	4b09      	ldr	r3, [pc, #36]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d105      	bne.n	800f72a <APP_ZIGBEE_ConfigEndpoints+0x12a>
 800f71e:	4b0f      	ldr	r3, [pc, #60]	; (800f75c <APP_ZIGBEE_ConfigEndpoints+0x15c>)
 800f720:	4a08      	ldr	r2, [pc, #32]	; (800f744 <APP_ZIGBEE_ConfigEndpoints+0x144>)
 800f722:	21e9      	movs	r1, #233	; 0xe9
 800f724:	4808      	ldr	r0, [pc, #32]	; (800f748 <APP_ZIGBEE_ConfigEndpoints+0x148>)
 800f726:	f001 f839 	bl	801079c <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.illuminance_meas_client_1);
 800f72a:	4b04      	ldr	r3, [pc, #16]	; (800f73c <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 800f72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fe f963 	bl	800d9fa <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
}
 800f734:	bf00      	nop
 800f736:	3720      	adds	r7, #32
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	200008cc 	.word	0x200008cc
 800f740:	08011cbc 	.word	0x08011cbc
 800f744:	08012454 	.word	0x08012454
 800f748:	08011c9c 	.word	0x08011c9c
 800f74c:	08011ce0 	.word	0x08011ce0
 800f750:	08011d14 	.word	0x08011d14
 800f754:	08011d4c 	.word	0x08011d4c
 800f758:	08011d74 	.word	0x08011d74
 800f75c:	08011d9c 	.word	0x08011d9c

0800f760 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 800f760:	b590      	push	{r4, r7, lr}
 800f762:	b0f9      	sub	sp, #484	; 0x1e4
 800f764:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 800f766:	4b44      	ldr	r3, [pc, #272]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f768:	7a5b      	ldrb	r3, [r3, #9]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d076      	beq.n	800f85c <APP_ZIGBEE_NwkForm+0xfc>
 800f76e:	f7f8 fcef 	bl	8008150 <HAL_GetTick>
 800f772:	4602      	mov	r2, r0
 800f774:	4b40      	ldr	r3, [pc, #256]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d36f      	bcc.n	800f85c <APP_ZIGBEE_NwkForm+0xfc>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 800f77c:	4b3e      	ldr	r3, [pc, #248]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	2200      	movs	r2, #0
 800f782:	211f      	movs	r1, #31
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd fa9d 	bl	800ccc4 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 800f78a:	463b      	mov	r3, r7
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd fb37 	bl	800ce00 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_COORDINATOR");
 800f792:	4a3a      	ldr	r2, [pc, #232]	; (800f87c <APP_ZIGBEE_NwkForm+0x11c>)
 800f794:	2101      	movs	r1, #1
 800f796:	2000      	movs	r0, #0
 800f798:	f7f8 fafa 	bl	8007d90 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 800f79c:	4b36      	ldr	r3, [pc, #216]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f79e:	7a1a      	ldrb	r2, [r3, #8]
 800f7a0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800f7a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f7a8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 800f7ac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800f7b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f7b4:	4a32      	ldr	r2, [pc, #200]	; (800f880 <APP_ZIGBEE_NwkForm+0x120>)
 800f7b6:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	6859      	ldr	r1, [r3, #4]
 800f7c0:	689a      	ldr	r2, [r3, #8]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 800f7c6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800f7ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 800f7d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800f7d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f7da:	2200      	movs	r2, #0
 800f7dc:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 800f7de:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800f7e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f7e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f7ea:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 800f7ec:	4b22      	ldr	r3, [pc, #136]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	463a      	mov	r2, r7
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 f863 	bl	800f8c0 <ZbStartupWait>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 800f800:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800f804:	4a1f      	ldr	r2, [pc, #124]	; (800f884 <APP_ZIGBEE_NwkForm+0x124>)
 800f806:	2101      	movs	r1, #1
 800f808:	2000      	movs	r0, #0
 800f80a:	f7f8 fac1 	bl	8007d90 <logApplication>
    zigbee_app_info.join_status = status;
 800f80e:	4a1a      	ldr	r2, [pc, #104]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f810:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800f814:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 800f816:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d110      	bne.n	800f840 <APP_ZIGBEE_NwkForm+0xe0>
    {
      zigbee_app_info.join_delay = 0U;
 800f81e:	4b16      	ldr	r3, [pc, #88]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f820:	2200      	movs	r2, #0
 800f822:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 800f824:	4b14      	ldr	r3, [pc, #80]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f826:	2201      	movs	r2, #1
 800f828:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 800f82a:	4a17      	ldr	r2, [pc, #92]	; (800f888 <APP_ZIGBEE_NwkForm+0x128>)
 800f82c:	2101      	movs	r1, #1
 800f82e:	2000      	movs	r0, #0
 800f830:	f7f8 faae 	bl	8007d90 <logApplication>
      /* USER CODE BEGIN 0 */
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800f834:	2201      	movs	r2, #1
 800f836:	2120      	movs	r1, #32
 800f838:	4814      	ldr	r0, [pc, #80]	; (800f88c <APP_ZIGBEE_NwkForm+0x12c>)
 800f83a:	f7f8 ffe9 	bl	8008810 <HAL_GPIO_WritePin>
 800f83e:	e00d      	b.n	800f85c <APP_ZIGBEE_NwkForm+0xfc>
      /* USER CODE END 0 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 800f840:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f844:	4a12      	ldr	r2, [pc, #72]	; (800f890 <APP_ZIGBEE_NwkForm+0x130>)
 800f846:	2101      	movs	r1, #1
 800f848:	2000      	movs	r0, #0
 800f84a:	f7f8 faa1 	bl	8007d90 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 800f84e:	f7f8 fc7f 	bl	8008150 <HAL_GetTick>
 800f852:	4603      	mov	r3, r0
 800f854:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f858:	4a07      	ldr	r2, [pc, #28]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f85a:	60d3      	str	r3, [r2, #12]
    }

  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 800f85c:	4b06      	ldr	r3, [pc, #24]	; (800f878 <APP_ZIGBEE_NwkForm+0x118>)
 800f85e:	7a5b      	ldrb	r3, [r3, #9]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d003      	beq.n	800f86c <APP_ZIGBEE_NwkForm+0x10c>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800f864:	2100      	movs	r1, #0
 800f866:	2004      	movs	r0, #4
 800f868:	f000 feb8 	bl	80105dc <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN NW_FORM */
  /* USER CODE END NW_FORM */
}
 800f86c:	bf00      	nop
 800f86e:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 800f872:	46bd      	mov	sp, r7
 800f874:	bd90      	pop	{r4, r7, pc}
 800f876:	bf00      	nop
 800f878:	200008cc 	.word	0x200008cc
 800f87c:	08011dd0 	.word	0x08011dd0
 800f880:	08012198 	.word	0x08012198
 800f884:	08011e08 	.word	0x08011e08
 800f888:	08011e30 	.word	0x08011e30
 800f88c:	48000400 	.word	0x48000400
 800f890:	08011e40 	.word	0x08011e40

0800f894 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	4603      	mov	r3, r0
 800f89c:	6039      	str	r1, [r7, #0]
 800f89e:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	60fb      	str	r3, [r7, #12]

  info->status = status;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	79fa      	ldrb	r2, [r7, #7]
 800f8a8:	705a      	strb	r2, [r3, #1]
  info->active = false;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800f8b0:	2008      	movs	r0, #8
 800f8b2:	f000 febf 	bl	8010634 <UTIL_SEQ_SetEvt>
}
 800f8b6:	bf00      	nop
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
	...

0800f8c0 <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 800f8ca:	2002      	movs	r0, #2
 800f8cc:	f000 ff84 	bl	80107d8 <malloc>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d101      	bne.n	800f8de <ZbStartupWait+0x1e>
  {
    return ZB_STATUS_ALLOC_FAIL;
 800f8da:	2370      	movs	r3, #112	; 0x70
 800f8dc:	e021      	b.n	800f922 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 800f8de:	2202      	movs	r2, #2
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f001 f96b 	bl	8010bbe <memset>

  info->active = true;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	4a0e      	ldr	r2, [pc, #56]	; (800f92c <ZbStartupWait+0x6c>)
 800f8f2:	6839      	ldr	r1, [r7, #0]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f7fd faad 	bl	800ce54 <ZbStartup>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 800f8fe:	7afb      	ldrb	r3, [r7, #11]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d004      	beq.n	800f90e <ZbStartupWait+0x4e>
  {
    info->active = false;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	701a      	strb	r2, [r3, #0]
    return status;
 800f90a:	7afb      	ldrb	r3, [r7, #11]
 800f90c:	e009      	b.n	800f922 <ZbStartupWait+0x62>
  }

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800f90e:	2008      	movs	r0, #8
 800f910:	f000 feb0 	bl	8010674 <UTIL_SEQ_WaitEvt>
  status = info->status;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	785b      	ldrb	r3, [r3, #1]
 800f918:	72fb      	strb	r3, [r7, #11]
  free(info);
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f000 ff64 	bl	80107e8 <free>
  return status;
 800f920:	7afb      	ldrb	r3, [r7, #11]
}
 800f922:	4618      	mov	r0, r3
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	0800f895 	.word	0x0800f895

0800f930 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 800f93a:	2100      	movs	r1, #0
 800f93c:	4803      	ldr	r0, [pc, #12]	; (800f94c <APP_ZIGBEE_Error+0x1c>)
 800f93e:	f000 f807 	bl	800f950 <APP_ZIGBEE_TraceError>
      break;
 800f942:	bf00      	nop
  }
}
 800f944:	bf00      	nop
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	08011e80 	.word	0x08011e80

0800f950 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af02      	add	r7, sp, #8
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a04      	ldr	r2, [pc, #16]	; (800f974 <APP_ZIGBEE_TraceError+0x24>)
 800f962:	2101      	movs	r1, #1
 800f964:	2000      	movs	r0, #0
 800f966:	f7f8 fa13 	bl	8007d90 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  /* USER CODE END TRACE_ERROR */

}
 800f96a:	bf00      	nop
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	08011e90 	.word	0x08011e90

0800f978 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b098      	sub	sp, #96	; 0x60
 800f97c:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800f97e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f982:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800f984:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f986:	f7fc fbb1 	bl	800c0ec <SHCI_GetWirelessFwInfo>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d004      	beq.n	800f99a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f990:	2101      	movs	r1, #1
 800f992:	2002      	movs	r0, #2
 800f994:	f7ff ffcc 	bl	800f930 <APP_ZIGBEE_Error>
    APP_DBG("fan Client on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("onOff Client on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("illuminance_meas Client on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
}
 800f998:	e09b      	b.n	800fad2 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15a>
    APP_DBG("**********************************************************");
 800f99a:	4a50      	ldr	r2, [pc, #320]	; (800fadc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 800f99c:	2101      	movs	r1, #1
 800f99e:	2000      	movs	r0, #0
 800f9a0:	f7f8 f9f6 	bl	8007d90 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800f9a4:	4a4e      	ldr	r2, [pc, #312]	; (800fae0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	f7f8 f9f1 	bl	8007d90 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800f9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9b6:	785b      	ldrb	r3, [r3, #1]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9bc:	789b      	ldrb	r3, [r3, #2]
 800f9be:	9301      	str	r3, [sp, #4]
 800f9c0:	9200      	str	r2, [sp, #0]
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4a47      	ldr	r2, [pc, #284]	; (800fae4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x16c>)
 800f9c6:	2101      	movs	r1, #1
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	f7f8 f9e1 	bl	8007d90 <logApplication>
    switch (p_wireless_info->StackType)
 800f9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9d0:	7a5b      	ldrb	r3, [r3, #9]
 800f9d2:	2b30      	cmp	r3, #48	; 0x30
 800f9d4:	d002      	beq.n	800f9dc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 800f9d6:	2b31      	cmp	r3, #49	; 0x31
 800f9d8:	d006      	beq.n	800f9e8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 800f9da:	e00b      	b.n	800f9f4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
        APP_DBG("FW Type : FFD Zigbee stack");
 800f9dc:	4a42      	ldr	r2, [pc, #264]	; (800fae8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x170>)
 800f9de:	2101      	movs	r1, #1
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	f7f8 f9d5 	bl	8007d90 <logApplication>
        break;
 800f9e6:	e00a      	b.n	800f9fe <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_DBG("FW Type : RFD Zigbee stack");
 800f9e8:	4a40      	ldr	r2, [pc, #256]	; (800faec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x174>)
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	f7f8 f9cf 	bl	8007d90 <logApplication>
        break;
 800f9f2:	e004      	b.n	800f9fe <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	2002      	movs	r0, #2
 800f9f8:	f7ff ff9a 	bl	800f930 <APP_ZIGBEE_Error>
        break;
 800f9fc:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800f9fe:	4b3c      	ldr	r3, [pc, #240]	; (800faf0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x178>)
 800fa00:	653b      	str	r3, [r7, #80]	; 0x50
    char *pdel = NULL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	657b      	str	r3, [r7, #84]	; 0x54
      pdel = strchr(__PathProject__, '/');
 800fa06:	212f      	movs	r1, #47	; 0x2f
 800fa08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fa0a:	f001 f8e0 	bl	8010bce <strchr>
 800fa0e:	6578      	str	r0, [r7, #84]	; 0x54
    int index = (int)(pdel - __PathProject__);
 800fa10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	647b      	str	r3, [r7, #68]	; 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 800fa18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa22:	4a34      	ldr	r2, [pc, #208]	; (800faf4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x17c>)
 800fa24:	2101      	movs	r1, #1
 800fa26:	2000      	movs	r0, #0
 800fa28:	f7f8 f9b2 	bl	8007d90 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 800fa2c:	230b      	movs	r3, #11
 800fa2e:	4a32      	ldr	r2, [pc, #200]	; (800faf8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x180>)
 800fa30:	2101      	movs	r1, #1
 800fa32:	2000      	movs	r0, #0
 800fa34:	f7f8 f9ac 	bl	8007d90 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 800fa38:	4b30      	ldr	r3, [pc, #192]	; (800fafc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x184>)
 800fa3a:	4a31      	ldr	r2, [pc, #196]	; (800fb00 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x188>)
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	2000      	movs	r0, #0
 800fa40:	f7f8 f9a6 	bl	8007d90 <logApplication>
    Z09_LL_string[0] = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa4c:	e010      	b.n	800fa70 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf8>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 800fa4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa50:	4613      	mov	r3, r2
 800fa52:	005b      	lsls	r3, r3, #1
 800fa54:	4413      	add	r3, r2
 800fa56:	463a      	mov	r2, r7
 800fa58:	18d0      	adds	r0, r2, r3
 800fa5a:	4a28      	ldr	r2, [pc, #160]	; (800fafc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x184>)
 800fa5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa5e:	4413      	add	r3, r2
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	461a      	mov	r2, r3
 800fa64:	4927      	ldr	r1, [pc, #156]	; (800fb04 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x18c>)
 800fa66:	f001 f847 	bl	8010af8 <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800fa6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa72:	2b0f      	cmp	r3, #15
 800fa74:	d9eb      	bls.n	800fa4e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd6>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 800fa76:	463b      	mov	r3, r7
 800fa78:	4a23      	ldr	r2, [pc, #140]	; (800fb08 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x190>)
 800fa7a:	2101      	movs	r1, #1
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	f7f8 f987 	bl	8007d90 <logApplication>
    APP_DBG("Clusters allocated are:");
 800fa82:	4a22      	ldr	r2, [pc, #136]	; (800fb0c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x194>)
 800fa84:	2101      	movs	r1, #1
 800fa86:	2000      	movs	r0, #0
 800fa88:	f7f8 f982 	bl	8007d90 <logApplication>
    APP_DBG("temperature_meas Client on Endpoint %d", SW1_ENDPOINT);
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	4a20      	ldr	r2, [pc, #128]	; (800fb10 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x198>)
 800fa90:	2101      	movs	r1, #1
 800fa92:	2000      	movs	r0, #0
 800fa94:	f7f8 f97c 	bl	8007d90 <logApplication>
    APP_DBG("electricalMeasurement Client on Endpoint %d", SW1_ENDPOINT);
 800fa98:	2301      	movs	r3, #1
 800fa9a:	4a1e      	ldr	r2, [pc, #120]	; (800fb14 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x19c>)
 800fa9c:	2101      	movs	r1, #1
 800fa9e:	2000      	movs	r0, #0
 800faa0:	f7f8 f976 	bl	8007d90 <logApplication>
    APP_DBG("fan Client on Endpoint %d", SW1_ENDPOINT);
 800faa4:	2301      	movs	r3, #1
 800faa6:	4a1c      	ldr	r2, [pc, #112]	; (800fb18 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x1a0>)
 800faa8:	2101      	movs	r1, #1
 800faaa:	2000      	movs	r0, #0
 800faac:	f7f8 f970 	bl	8007d90 <logApplication>
    APP_DBG("onOff Client on Endpoint %d", SW1_ENDPOINT);
 800fab0:	2301      	movs	r3, #1
 800fab2:	4a1a      	ldr	r2, [pc, #104]	; (800fb1c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x1a4>)
 800fab4:	2101      	movs	r1, #1
 800fab6:	2000      	movs	r0, #0
 800fab8:	f7f8 f96a 	bl	8007d90 <logApplication>
    APP_DBG("illuminance_meas Client on Endpoint %d", SW1_ENDPOINT);
 800fabc:	2301      	movs	r3, #1
 800fabe:	4a18      	ldr	r2, [pc, #96]	; (800fb20 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x1a8>)
 800fac0:	2101      	movs	r1, #1
 800fac2:	2000      	movs	r0, #0
 800fac4:	f7f8 f964 	bl	8007d90 <logApplication>
    APP_DBG("**********************************************************");
 800fac8:	4a04      	ldr	r2, [pc, #16]	; (800fadc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 800faca:	2101      	movs	r1, #1
 800facc:	2000      	movs	r0, #0
 800face:	f7f8 f95f 	bl	8007d90 <logApplication>
}
 800fad2:	bf00      	nop
 800fad4:	3758      	adds	r7, #88	; 0x58
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	08011eb4 	.word	0x08011eb4
 800fae0:	08011ef0 	.word	0x08011ef0
 800fae4:	08011f0c 	.word	0x08011f0c
 800fae8:	08011f24 	.word	0x08011f24
 800faec:	08011f40 	.word	0x08011f40
 800faf0:	08011c9c 	.word	0x08011c9c
 800faf4:	08011f5c 	.word	0x08011f5c
 800faf8:	08011f78 	.word	0x08011f78
 800fafc:	08012198 	.word	0x08012198
 800fb00:	08011f8c 	.word	0x08011f8c
 800fb04:	08011f9c 	.word	0x08011f9c
 800fb08:	08011fa4 	.word	0x08011fa4
 800fb0c:	08011fb8 	.word	0x08011fb8
 800fb10:	08011fd0 	.word	0x08011fd0
 800fb14:	08011ff8 	.word	0x08011ff8
 800fb18:	08012024 	.word	0x08012024
 800fb1c:	08012040 	.word	0x08012040
 800fb20:	0801205c 	.word	0x0801205c

0800fb24 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 800fb2c:	4a04      	ldr	r2, [pc, #16]	; (800fb40 <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6013      	str	r3, [r2, #0]
}
 800fb32:	bf00      	nop
 800fb34:	370c      	adds	r7, #12
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	200008b8 	.word	0x200008b8

0800fb44 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800fb44:	b480      	push	{r7}
 800fb46:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800fb48:	4b03      	ldr	r3, [pc, #12]	; (800fb58 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	330c      	adds	r3, #12
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	200008b8 	.word	0x200008b8

0800fb5c <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800fb60:	4b03      	ldr	r3, [pc, #12]	; (800fb70 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	330b      	adds	r3, #11
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	200008b8 	.word	0x200008b8

0800fb74 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800fb74:	b480      	push	{r7}
 800fb76:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 800fb78:	4b03      	ldr	r3, [pc, #12]	; (800fb88 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	330b      	adds	r3, #11
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	200008bc 	.word	0x200008bc

0800fb8c <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 800fb90:	4b03      	ldr	r3, [pc, #12]	; (800fba0 <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	330b      	adds	r3, #11
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	200008c0 	.word	0x200008c0

0800fba4 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800fbaa:	4b0f      	ldr	r3, [pc, #60]	; (800fbe8 <ZIGBEE_CmdTransfer+0x44>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	330c      	adds	r3, #12
 800fbb0:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800fbb2:	4b0d      	ldr	r3, [pc, #52]	; (800fbe8 <ZIGBEE_CmdTransfer+0x44>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fbbc:	725a      	strb	r2, [r3, #9]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f042 0202 	orr.w	r2, r2, #2
 800fbc4:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	3302      	adds	r3, #2
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b06      	ldr	r3, [pc, #24]	; (800fbe8 <ZIGBEE_CmdTransfer+0x44>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	0092      	lsls	r2, r2, #2
 800fbd4:	b2d2      	uxtb	r2, r2
 800fbd6:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 800fbd8:	f7fc fd82 	bl	800c6e0 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800fbdc:	f000 f827 	bl	800fc2e <Wait_Getting_Ack_From_M0>
}
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	200008b8 	.word	0x200008b8

0800fbec <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800fbf4:	f000 f822 	bl	800fc3c <Receive_Ack_From_M0>
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 800fc08:	4a04      	ldr	r2, [pc, #16]	; (800fc1c <TL_ZIGBEE_NotReceived+0x1c>)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800fc0e:	f000 f81d 	bl	800fc4c <Receive_Notification_From_M0>
}
 800fc12:	bf00      	nop
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	200008bc 	.word	0x200008bc

0800fc20 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800fc24:	2004      	movs	r0, #4
 800fc26:	f000 fd25 	bl	8010674 <UTIL_SEQ_WaitEvt>
}
 800fc2a:	bf00      	nop
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800fc32:	2002      	movs	r0, #2
 800fc34:	f000 fd1e 	bl	8010674 <UTIL_SEQ_WaitEvt>
}
 800fc38:	bf00      	nop
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800fc40:	2002      	movs	r0, #2
 800fc42:	f000 fcf7 	bl	8010634 <UTIL_SEQ_SetEvt>
}
 800fc46:	bf00      	nop
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 800fc50:	4b05      	ldr	r3, [pc, #20]	; (800fc68 <Receive_Notification_From_M0+0x1c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3301      	adds	r3, #1
 800fc56:	4a04      	ldr	r2, [pc, #16]	; (800fc68 <Receive_Notification_From_M0+0x1c>)
 800fc58:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	2001      	movs	r0, #1
 800fc5e:	f000 fcbd 	bl	80105dc <UTIL_SEQ_SetTask>
}
 800fc62:	bf00      	nop
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	200008c4 	.word	0x200008c4

0800fc6c <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800fc74:	4a07      	ldr	r2, [pc, #28]	; (800fc94 <TL_ZIGBEE_M0RequestReceived+0x28>)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 800fc7a:	4b07      	ldr	r3, [pc, #28]	; (800fc98 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800fc82:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800fc84:	2100      	movs	r1, #0
 800fc86:	2002      	movs	r0, #2
 800fc88:	f000 fca8 	bl	80105dc <UTIL_SEQ_SetTask>
}
 800fc8c:	bf00      	nop
 800fc8e:	3708      	adds	r7, #8
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	200008c0 	.word	0x200008c0
 800fc98:	200008c8 	.word	0x200008c8

0800fc9c <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 800fca0:	4b06      	ldr	r3, [pc, #24]	; (800fcbc <APP_ZIGBEE_TL_INIT+0x20>)
 800fca2:	4a07      	ldr	r2, [pc, #28]	; (800fcc0 <APP_ZIGBEE_TL_INIT+0x24>)
 800fca4:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 800fca6:	4b05      	ldr	r3, [pc, #20]	; (800fcbc <APP_ZIGBEE_TL_INIT+0x20>)
 800fca8:	4a06      	ldr	r2, [pc, #24]	; (800fcc4 <APP_ZIGBEE_TL_INIT+0x28>)
 800fcaa:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 800fcac:	4b03      	ldr	r3, [pc, #12]	; (800fcbc <APP_ZIGBEE_TL_INIT+0x20>)
 800fcae:	4a06      	ldr	r2, [pc, #24]	; (800fcc8 <APP_ZIGBEE_TL_INIT+0x2c>)
 800fcb0:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 800fcb2:	4802      	ldr	r0, [pc, #8]	; (800fcbc <APP_ZIGBEE_TL_INIT+0x20>)
 800fcb4:	f7fc fcf8 	bl	800c6a8 <TL_ZIGBEE_Init>
}
 800fcb8:	bf00      	nop
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	200300d8 	.word	0x200300d8
 800fcc0:	20030838 	.word	0x20030838
 800fcc4:	20030944 	.word	0x20030944
 800fcc8:	20030a50 	.word	0x20030a50

0800fccc <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 800fcd0:	4b09      	ldr	r3, [pc, #36]	; (800fcf8 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d00d      	beq.n	800fcf4 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x28>
  {
    /* If CptReceiveNotifyFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveNotifyFromM0 > 1U)
 800fcd8:	4b07      	ldr	r3, [pc, #28]	; (800fcf8 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d904      	bls.n	800fcea <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1e>
    {
      APP_ZIGBEE_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 800fce0:	2100      	movs	r1, #0
 800fce2:	2000      	movs	r0, #0
 800fce4:	f7ff fe24 	bl	800f930 <APP_ZIGBEE_Error>
 800fce8:	e001      	b.n	800fcee <APP_ZIGBEE_ProcessNotifyM0ToM4+0x22>
    }
    else
    {
      Zigbee_CallBackProcessing();
 800fcea:	f7fd ffd3 	bl	800dc94 <Zigbee_CallBackProcessing>
    }

    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 800fcee:	4b02      	ldr	r3, [pc, #8]	; (800fcf8 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	601a      	str	r2, [r3, #0]
  }
}
 800fcf4:	bf00      	nop
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	200008c4 	.word	0x200008c4

0800fcfc <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param
 * @return
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	af00      	add	r7, sp, #0
  if (CptReceiveRequestFromM0 != 0)
 800fd00:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d004      	beq.n	800fd12 <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
  {
    Zigbee_M0RequestProcessing();
 800fd08:	f7ff fb4a 	bl	800f3a0 <Zigbee_M0RequestProcessing>
    CptReceiveRequestFromM0 = 0;
 800fd0c:	4b02      	ldr	r3, [pc, #8]	; (800fd18 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	601a      	str	r2, [r3, #0]
  }
}
 800fd12:	bf00      	nop
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	200008c8 	.word	0x200008c8

0800fd1c <LL_PWR_EnableBootC2>:
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800fd20:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <LL_PWR_EnableBootC2+0x1c>)
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	4a04      	ldr	r2, [pc, #16]	; (800fd38 <LL_PWR_EnableBootC2+0x1c>)
 800fd26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd2a:	60d3      	str	r3, [r2, #12]
}
 800fd2c:	bf00      	nop
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	58000400 	.word	0x58000400

0800fd3c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800fd44:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fd46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800fd4a:	4905      	ldr	r1, [pc, #20]	; (800fd60 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	58000800 	.word	0x58000800

0800fd64 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fd6c:	4b05      	ldr	r3, [pc, #20]	; (800fd84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fd6e:	6a1a      	ldr	r2, [r3, #32]
 800fd70:	4904      	ldr	r1, [pc, #16]	; (800fd84 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	620b      	str	r3, [r1, #32]
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr
 800fd84:	58000800 	.word	0x58000800

0800fd88 <LL_AHB3_GRP1_EnableClock>:
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800fd90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fd94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800fda0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fda4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4013      	ands	r3, r2
 800fdaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fdac:	68fb      	ldr	r3, [r7, #12]
}
 800fdae:	bf00      	nop
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr

0800fdba <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800fdba:	b480      	push	{r7}
 800fdbc:	b085      	sub	sp, #20
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800fdc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fdc6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800fdca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800fdd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fdda:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4013      	ands	r3, r2
 800fde2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800fde4:	68fb      	ldr	r3, [r7, #12]
}
 800fde6:	bf00      	nop
 800fde8:	3714      	adds	r7, #20
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <LL_C1_IPCC_EnableIT_TXF>:
{
 800fdf2:	b480      	push	{r7}
 800fdf4:	b083      	sub	sp, #12
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	601a      	str	r2, [r3, #0]
}
 800fe06:	bf00      	nop
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr

0800fe12 <LL_C1_IPCC_EnableIT_RXO>:
{
 800fe12:	b480      	push	{r7}
 800fe14:	b083      	sub	sp, #12
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	f043 0201 	orr.w	r2, r3, #1
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	601a      	str	r2, [r3, #0]
}
 800fe26:	bf00      	nop
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685a      	ldr	r2, [r3, #4]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	041b      	lsls	r3, r3, #16
 800fe44:	43db      	mvns	r3, r3
 800fe46:	401a      	ands	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	605a      	str	r2, [r3, #4]
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685a      	ldr	r2, [r3, #4]
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	041b      	lsls	r3, r3, #16
 800fe6a:	431a      	orrs	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	605a      	str	r2, [r3, #4]
}
 800fe70:	bf00      	nop
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	43db      	mvns	r3, r3
 800fe8e:	401a      	ands	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	605a      	str	r2, [r3, #4]
}
 800fe94:	bf00      	nop
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	431a      	orrs	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	605a      	str	r2, [r3, #4]
}
 800feb6:	bf00      	nop
 800feb8:	370c      	adds	r7, #12
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800fec2:	b480      	push	{r7}
 800fec4:	b083      	sub	sp, #12
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
 800feca:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	609a      	str	r2, [r3, #8]
}
 800fed2:	bf00      	nop
 800fed4:	370c      	adds	r7, #12
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr

0800fede <LL_C1_IPCC_SetFlag_CHx>:
{
 800fede:	b480      	push	{r7}
 800fee0:	b083      	sub	sp, #12
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
 800fee6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	041a      	lsls	r2, r3, #16
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	609a      	str	r2, [r3, #8]
}
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68da      	ldr	r2, [r3, #12]
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d101      	bne.n	800ff18 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800ff14:	2301      	movs	r3, #1
 800ff16:	e000      	b.n	800ff1a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr

0800ff26 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ff26:	b480      	push	{r7}
 800ff28:	b083      	sub	sp, #12
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	69da      	ldr	r2, [r3, #28]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	4013      	ands	r3, r2
 800ff38:	683a      	ldr	r2, [r7, #0]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d101      	bne.n	800ff42 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e000      	b.n	800ff44 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800ff42:	2300      	movs	r3, #0
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800ff54:	2102      	movs	r1, #2
 800ff56:	4828      	ldr	r0, [pc, #160]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ff58:	f7ff ffe5 	bl	800ff26 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d008      	beq.n	800ff74 <HW_IPCC_Rx_Handler+0x24>
 800ff62:	4b25      	ldr	r3, [pc, #148]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	f003 0302 	and.w	r3, r3, #2
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d102      	bne.n	800ff74 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800ff6e:	f000 f8f1 	bl	8010154 <HW_IPCC_SYS_EvtHandler>
 800ff72:	e03e      	b.n	800fff2 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800ff74:	2104      	movs	r1, #4
 800ff76:	4820      	ldr	r0, [pc, #128]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ff78:	f7ff ffd5 	bl	800ff26 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d008      	beq.n	800ff94 <HW_IPCC_Rx_Handler+0x44>
 800ff82:	4b1d      	ldr	r3, [pc, #116]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	f003 0304 	and.w	r3, r3, #4
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d102      	bne.n	800ff94 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800ff8e:	f000 f923 	bl	80101d8 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800ff92:	e02e      	b.n	800fff2 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800ff94:	2110      	movs	r1, #16
 800ff96:	4818      	ldr	r0, [pc, #96]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ff98:	f7ff ffc5 	bl	800ff26 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d008      	beq.n	800ffb4 <HW_IPCC_Rx_Handler+0x64>
 800ffa2:	4b15      	ldr	r3, [pc, #84]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	f003 0310 	and.w	r3, r3, #16
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800ffae:	f000 f91f 	bl	80101f0 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800ffb2:	e01e      	b.n	800fff2 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800ffb4:	2101      	movs	r1, #1
 800ffb6:	4810      	ldr	r0, [pc, #64]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ffb8:	f7ff ffb5 	bl	800ff26 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d008      	beq.n	800ffd4 <HW_IPCC_Rx_Handler+0x84>
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d102      	bne.n	800ffd4 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800ffce:	f000 f885 	bl	80100dc <HW_IPCC_BLE_EvtHandler>
 800ffd2:	e00e      	b.n	800fff2 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800ffd4:	2108      	movs	r1, #8
 800ffd6:	4808      	ldr	r0, [pc, #32]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ffd8:	f7ff ffa5 	bl	800ff26 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d008      	beq.n	800fff4 <HW_IPCC_Rx_Handler+0xa4>
 800ffe2:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <HW_IPCC_Rx_Handler+0xa8>)
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	f003 0308 	and.w	r3, r3, #8
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d102      	bne.n	800fff4 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800ffee:	f000 f959 	bl	80102a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800fff2:	bf00      	nop
 800fff4:	bf00      	nop
}
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	58000c00 	.word	0x58000c00

0800fffc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010000:	2102      	movs	r1, #2
 8010002:	4820      	ldr	r0, [pc, #128]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 8010004:	f7ff ff7a 	bl	800fefc <LL_C1_IPCC_IsActiveFlag_CHx>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d107      	bne.n	801001e <HW_IPCC_Tx_Handler+0x22>
 801000e:	4b1d      	ldr	r3, [pc, #116]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010016:	2b00      	cmp	r3, #0
 8010018:	d101      	bne.n	801001e <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801001a:	f000 f88f 	bl	801013c <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 801001e:	2104      	movs	r1, #4
 8010020:	4818      	ldr	r0, [pc, #96]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 8010022:	f7ff ff6b 	bl	800fefc <LL_C1_IPCC_IsActiveFlag_CHx>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d108      	bne.n	801003e <HW_IPCC_Tx_Handler+0x42>
 801002c:	4b15      	ldr	r3, [pc, #84]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010034:	2b00      	cmp	r3, #0
 8010036:	d102      	bne.n	801003e <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 8010038:	f000 f8c2 	bl	80101c0 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 801003c:	e01e      	b.n	801007c <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801003e:	2108      	movs	r1, #8
 8010040:	4810      	ldr	r0, [pc, #64]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 8010042:	f7ff ff5b 	bl	800fefc <LL_C1_IPCC_IsActiveFlag_CHx>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d108      	bne.n	801005e <HW_IPCC_Tx_Handler+0x62>
 801004c:	4b0d      	ldr	r3, [pc, #52]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010054:	2b00      	cmp	r3, #0
 8010056:	d102      	bne.n	801005e <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010058:	f000 f906 	bl	8010268 <HW_IPCC_MM_FreeBufHandler>
 801005c:	e00e      	b.n	801007c <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801005e:	2120      	movs	r1, #32
 8010060:	4808      	ldr	r0, [pc, #32]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 8010062:	f7ff ff4b 	bl	800fefc <LL_C1_IPCC_IsActiveFlag_CHx>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d108      	bne.n	801007e <HW_IPCC_Tx_Handler+0x82>
 801006c:	4b05      	ldr	r3, [pc, #20]	; (8010084 <HW_IPCC_Tx_Handler+0x88>)
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d102      	bne.n	801007e <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010078:	f000 f83c 	bl	80100f4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801007c:	bf00      	nop
 801007e:	bf00      	nop
}
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	58000c00 	.word	0x58000c00

08010088 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801008c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010090:	f7ff fe93 	bl	800fdba <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010094:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010098:	f7ff fe64 	bl	800fd64 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801009c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80100a0:	f7ff fe4c 	bl	800fd3c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80100a4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80100a6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80100a8:	f7ff fe38 	bl	800fd1c <LL_PWR_EnableBootC2>

  return;
 80100ac:	bf00      	nop
}
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80100b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80100b8:	f7ff fe66 	bl	800fd88 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80100bc:	4806      	ldr	r0, [pc, #24]	; (80100d8 <HW_IPCC_Init+0x28>)
 80100be:	f7ff fea8 	bl	800fe12 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80100c2:	4805      	ldr	r0, [pc, #20]	; (80100d8 <HW_IPCC_Init+0x28>)
 80100c4:	f7ff fe95 	bl	800fdf2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80100c8:	202c      	movs	r0, #44	; 0x2c
 80100ca:	f7f8 f99c 	bl	8008406 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80100ce:	202d      	movs	r0, #45	; 0x2d
 80100d0:	f7f8 f999 	bl	8008406 <HAL_NVIC_EnableIRQ>

  return;
 80100d4:	bf00      	nop
}
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	58000c00 	.word	0x58000c00

080100dc <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80100e0:	f7fc fa2a 	bl	800c538 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80100e4:	2101      	movs	r1, #1
 80100e6:	4802      	ldr	r0, [pc, #8]	; (80100f0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80100e8:	f7ff feeb 	bl	800fec2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80100ec:	bf00      	nop
}
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	58000c00 	.word	0x58000c00

080100f4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80100f8:	2120      	movs	r1, #32
 80100fa:	4803      	ldr	r0, [pc, #12]	; (8010108 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80100fc:	f7ff feac 	bl	800fe58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8010100:	f7fc fa4a 	bl	800c598 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010104:	bf00      	nop
}
 8010106:	bd80      	pop	{r7, pc}
 8010108:	58000c00 	.word	0x58000c00

0801010c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010110:	2102      	movs	r1, #2
 8010112:	4802      	ldr	r0, [pc, #8]	; (801011c <HW_IPCC_SYS_Init+0x10>)
 8010114:	f7ff feb2 	bl	800fe7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010118:	bf00      	nop
}
 801011a:	bd80      	pop	{r7, pc}
 801011c:	58000c00 	.word	0x58000c00

08010120 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010124:	2102      	movs	r1, #2
 8010126:	4804      	ldr	r0, [pc, #16]	; (8010138 <HW_IPCC_SYS_SendCmd+0x18>)
 8010128:	f7ff fed9 	bl	800fede <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801012c:	2102      	movs	r1, #2
 801012e:	4802      	ldr	r0, [pc, #8]	; (8010138 <HW_IPCC_SYS_SendCmd+0x18>)
 8010130:	f7ff fe7f 	bl	800fe32 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010134:	bf00      	nop
}
 8010136:	bd80      	pop	{r7, pc}
 8010138:	58000c00 	.word	0x58000c00

0801013c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010140:	2102      	movs	r1, #2
 8010142:	4803      	ldr	r0, [pc, #12]	; (8010150 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010144:	f7ff fe88 	bl	800fe58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010148:	f7fc fa76 	bl	800c638 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801014c:	bf00      	nop
}
 801014e:	bd80      	pop	{r7, pc}
 8010150:	58000c00 	.word	0x58000c00

08010154 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010158:	f7fc fa84 	bl	800c664 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801015c:	2102      	movs	r1, #2
 801015e:	4802      	ldr	r0, [pc, #8]	; (8010168 <HW_IPCC_SYS_EvtHandler+0x14>)
 8010160:	f7ff feaf 	bl	800fec2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010164:	bf00      	nop
}
 8010166:	bd80      	pop	{r7, pc}
 8010168:	58000c00 	.word	0x58000c00

0801016c <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8010170:	2104      	movs	r1, #4
 8010172:	4804      	ldr	r0, [pc, #16]	; (8010184 <HW_IPCC_ZIGBEE_Init+0x18>)
 8010174:	f7ff fe82 	bl	800fe7c <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8010178:	2110      	movs	r1, #16
 801017a:	4802      	ldr	r0, [pc, #8]	; (8010184 <HW_IPCC_ZIGBEE_Init+0x18>)
 801017c:	f7ff fe7e 	bl	800fe7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010180:	bf00      	nop
}
 8010182:	bd80      	pop	{r7, pc}
 8010184:	58000c00 	.word	0x58000c00

08010188 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 8010188:	b580      	push	{r7, lr}
 801018a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 801018c:	2104      	movs	r1, #4
 801018e:	4804      	ldr	r0, [pc, #16]	; (80101a0 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8010190:	f7ff fea5 	bl	800fede <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8010194:	2104      	movs	r1, #4
 8010196:	4802      	ldr	r0, [pc, #8]	; (80101a0 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8010198:	f7ff fe4b 	bl	800fe32 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 801019c:	bf00      	nop
}
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	58000c00 	.word	0x58000c00

080101a4 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 80101a8:	2104      	movs	r1, #4
 80101aa:	4804      	ldr	r0, [pc, #16]	; (80101bc <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 80101ac:	f7ff fe89 	bl	800fec2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 80101b0:	2104      	movs	r1, #4
 80101b2:	4802      	ldr	r0, [pc, #8]	; (80101bc <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 80101b4:	f7ff fe62 	bl	800fe7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80101b8:	bf00      	nop
}
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	58000c00 	.word	0x58000c00

080101c0 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 80101c4:	2104      	movs	r1, #4
 80101c6:	4803      	ldr	r0, [pc, #12]	; (80101d4 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 80101c8:	f7ff fe46 	bl	800fe58 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 80101cc:	f7fc fa96 	bl	800c6fc <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 80101d0:	bf00      	nop
}
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	58000c00 	.word	0x58000c00

080101d8 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 80101dc:	2104      	movs	r1, #4
 80101de:	4803      	ldr	r0, [pc, #12]	; (80101ec <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 80101e0:	f7ff fe5e 	bl	800fea0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 80101e4:	f7fc fa96 	bl	800c714 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 80101e8:	bf00      	nop
}
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	58000c00 	.word	0x58000c00

080101f0 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80101f4:	2110      	movs	r1, #16
 80101f6:	4803      	ldr	r0, [pc, #12]	; (8010204 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 80101f8:	f7ff fe52 	bl	800fea0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 80101fc:	f7fc faa4 	bl	800c748 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8010200:	bf00      	nop
}
 8010202:	bd80      	pop	{r7, pc}
 8010204:	58000c00 	.word	0x58000c00

08010208 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 801020c:	2110      	movs	r1, #16
 801020e:	4804      	ldr	r0, [pc, #16]	; (8010220 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8010210:	f7ff fe57 	bl	800fec2 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8010214:	2110      	movs	r1, #16
 8010216:	4802      	ldr	r0, [pc, #8]	; (8010220 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8010218:	f7ff fe30 	bl	800fe7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801021c:	bf00      	nop
}
 801021e:	bd80      	pop	{r7, pc}
 8010220:	58000c00 	.word	0x58000c00

08010224 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801022c:	2108      	movs	r1, #8
 801022e:	480c      	ldr	r0, [pc, #48]	; (8010260 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010230:	f7ff fe64 	bl	800fefc <LL_C1_IPCC_IsActiveFlag_CHx>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d007      	beq.n	801024a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801023a:	4a0a      	ldr	r2, [pc, #40]	; (8010264 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010240:	2108      	movs	r1, #8
 8010242:	4807      	ldr	r0, [pc, #28]	; (8010260 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010244:	f7ff fdf5 	bl	800fe32 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010248:	e006      	b.n	8010258 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801024e:	2108      	movs	r1, #8
 8010250:	4803      	ldr	r0, [pc, #12]	; (8010260 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010252:	f7ff fe44 	bl	800fede <LL_C1_IPCC_SetFlag_CHx>
  return;
 8010256:	bf00      	nop
}
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	58000c00 	.word	0x58000c00
 8010264:	200008f4 	.word	0x200008f4

08010268 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801026c:	2108      	movs	r1, #8
 801026e:	4806      	ldr	r0, [pc, #24]	; (8010288 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010270:	f7ff fdf2 	bl	800fe58 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8010274:	4b05      	ldr	r3, [pc, #20]	; (801028c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801027a:	2108      	movs	r1, #8
 801027c:	4802      	ldr	r0, [pc, #8]	; (8010288 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801027e:	f7ff fe2e 	bl	800fede <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010282:	bf00      	nop
}
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	58000c00 	.word	0x58000c00
 801028c:	200008f4 	.word	0x200008f4

08010290 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010294:	2108      	movs	r1, #8
 8010296:	4802      	ldr	r0, [pc, #8]	; (80102a0 <HW_IPCC_TRACES_Init+0x10>)
 8010298:	f7ff fdf0 	bl	800fe7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801029c:	bf00      	nop
}
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	58000c00 	.word	0x58000c00

080102a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80102a8:	f7fc faee 	bl	800c888 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80102ac:	2108      	movs	r1, #8
 80102ae:	4802      	ldr	r0, [pc, #8]	; (80102b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80102b0:	f7ff fe07 	bl	800fec2 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80102b4:	bf00      	nop
}
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	58000c00 	.word	0x58000c00

080102bc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80102bc:	b480      	push	{r7}
 80102be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80102c0:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <UTIL_LPM_Init+0x1c>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80102c6:	4b05      	ldr	r3, [pc, #20]	; (80102dc <UTIL_LPM_Init+0x20>)
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80102cc:	bf00      	nop
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	200008f8 	.word	0x200008f8
 80102dc:	200008fc 	.word	0x200008fc

080102e0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80102e0:	b480      	push	{r7}
 80102e2:	b087      	sub	sp, #28
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	460b      	mov	r3, r1
 80102ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102ec:	f3ef 8310 	mrs	r3, PRIMASK
 80102f0:	613b      	str	r3, [r7, #16]
  return(result);
 80102f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80102f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80102f6:	b672      	cpsid	i
}
 80102f8:	bf00      	nop
  
  switch( state )
 80102fa:	78fb      	ldrb	r3, [r7, #3]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d008      	beq.n	8010312 <UTIL_LPM_SetStopMode+0x32>
 8010300:	2b01      	cmp	r3, #1
 8010302:	d10e      	bne.n	8010322 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8010304:	4b0d      	ldr	r3, [pc, #52]	; (801033c <UTIL_LPM_SetStopMode+0x5c>)
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	4313      	orrs	r3, r2
 801030c:	4a0b      	ldr	r2, [pc, #44]	; (801033c <UTIL_LPM_SetStopMode+0x5c>)
 801030e:	6013      	str	r3, [r2, #0]
      break;
 8010310:	e008      	b.n	8010324 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	43da      	mvns	r2, r3
 8010316:	4b09      	ldr	r3, [pc, #36]	; (801033c <UTIL_LPM_SetStopMode+0x5c>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4013      	ands	r3, r2
 801031c:	4a07      	ldr	r2, [pc, #28]	; (801033c <UTIL_LPM_SetStopMode+0x5c>)
 801031e:	6013      	str	r3, [r2, #0]
      break;
 8010320:	e000      	b.n	8010324 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8010322:	bf00      	nop
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f383 8810 	msr	PRIMASK, r3
}
 801032e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010330:	bf00      	nop
 8010332:	371c      	adds	r7, #28
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	200008f8 	.word	0x200008f8

08010340 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010340:	b480      	push	{r7}
 8010342:	b087      	sub	sp, #28
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	460b      	mov	r3, r1
 801034a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801034c:	f3ef 8310 	mrs	r3, PRIMASK
 8010350:	613b      	str	r3, [r7, #16]
  return(result);
 8010352:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010354:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010356:	b672      	cpsid	i
}
 8010358:	bf00      	nop
  
  switch(state)
 801035a:	78fb      	ldrb	r3, [r7, #3]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d008      	beq.n	8010372 <UTIL_LPM_SetOffMode+0x32>
 8010360:	2b01      	cmp	r3, #1
 8010362:	d10e      	bne.n	8010382 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010364:	4b0d      	ldr	r3, [pc, #52]	; (801039c <UTIL_LPM_SetOffMode+0x5c>)
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4313      	orrs	r3, r2
 801036c:	4a0b      	ldr	r2, [pc, #44]	; (801039c <UTIL_LPM_SetOffMode+0x5c>)
 801036e:	6013      	str	r3, [r2, #0]
      break;
 8010370:	e008      	b.n	8010384 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	43da      	mvns	r2, r3
 8010376:	4b09      	ldr	r3, [pc, #36]	; (801039c <UTIL_LPM_SetOffMode+0x5c>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4013      	ands	r3, r2
 801037c:	4a07      	ldr	r2, [pc, #28]	; (801039c <UTIL_LPM_SetOffMode+0x5c>)
 801037e:	6013      	str	r3, [r2, #0]
      break;
 8010380:	e000      	b.n	8010384 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010382:	bf00      	nop
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f383 8810 	msr	PRIMASK, r3
}
 801038e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010390:	bf00      	nop
 8010392:	371c      	adds	r7, #28
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr
 801039c:	200008fc 	.word	0x200008fc

080103a0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b090      	sub	sp, #64	; 0x40
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80103a8:	4b73      	ldr	r3, [pc, #460]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80103ae:	4b72      	ldr	r3, [pc, #456]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4013      	ands	r3, r2
 80103b6:	4a70      	ldr	r2, [pc, #448]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 80103b8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80103ba:	4b70      	ldr	r3, [pc, #448]	; (801057c <UTIL_SEQ_Run+0x1dc>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80103c0:	4b6f      	ldr	r3, [pc, #444]	; (8010580 <UTIL_SEQ_Run+0x1e0>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80103c6:	4b6f      	ldr	r3, [pc, #444]	; (8010584 <UTIL_SEQ_Run+0x1e4>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80103cc:	4b6e      	ldr	r3, [pc, #440]	; (8010588 <UTIL_SEQ_Run+0x1e8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80103d2:	e08d      	b.n	80104f0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80103d4:	2300      	movs	r3, #0
 80103d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80103d8:	e002      	b.n	80103e0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80103da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103dc:	3301      	adds	r3, #1
 80103de:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80103e0:	4a6a      	ldr	r2, [pc, #424]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 80103e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80103e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ea:	401a      	ands	r2, r3
 80103ec:	4b62      	ldr	r3, [pc, #392]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4013      	ands	r3, r2
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0f1      	beq.n	80103da <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80103f6:	4a65      	ldr	r2, [pc, #404]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 80103f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80103fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010400:	401a      	ands	r2, r3
 8010402:	4b5d      	ldr	r3, [pc, #372]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4013      	ands	r3, r2
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801040a:	4a60      	ldr	r2, [pc, #384]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 801040c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040e:	00db      	lsls	r3, r3, #3
 8010410:	4413      	add	r3, r2
 8010412:	685a      	ldr	r2, [r3, #4]
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	4013      	ands	r3, r2
 8010418:	2b00      	cmp	r3, #0
 801041a:	d106      	bne.n	801042a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801041c:	4a5b      	ldr	r2, [pc, #364]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 801041e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010420:	00db      	lsls	r3, r3, #3
 8010422:	4413      	add	r3, r2
 8010424:	f04f 32ff 	mov.w	r2, #4294967295
 8010428:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801042a:	4a58      	ldr	r2, [pc, #352]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 801042c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042e:	00db      	lsls	r3, r3, #3
 8010430:	4413      	add	r3, r2
 8010432:	685a      	ldr	r2, [r3, #4]
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010436:	4013      	ands	r3, r2
 8010438:	4618      	mov	r0, r3
 801043a:	f000 f973 	bl	8010724 <SEQ_BitPosition>
 801043e:	4603      	mov	r3, r0
 8010440:	461a      	mov	r2, r3
 8010442:	4b53      	ldr	r3, [pc, #332]	; (8010590 <UTIL_SEQ_Run+0x1f0>)
 8010444:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010446:	4a51      	ldr	r2, [pc, #324]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 8010448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	4413      	add	r3, r2
 801044e:	685a      	ldr	r2, [r3, #4]
 8010450:	4b4f      	ldr	r3, [pc, #316]	; (8010590 <UTIL_SEQ_Run+0x1f0>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2101      	movs	r1, #1
 8010456:	fa01 f303 	lsl.w	r3, r1, r3
 801045a:	43db      	mvns	r3, r3
 801045c:	401a      	ands	r2, r3
 801045e:	494b      	ldr	r1, [pc, #300]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 8010460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010462:	00db      	lsls	r3, r3, #3
 8010464:	440b      	add	r3, r1
 8010466:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010468:	f3ef 8310 	mrs	r3, PRIMASK
 801046c:	61bb      	str	r3, [r7, #24]
  return(result);
 801046e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010470:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010472:	b672      	cpsid	i
}
 8010474:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010476:	4b46      	ldr	r3, [pc, #280]	; (8010590 <UTIL_SEQ_Run+0x1f0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2201      	movs	r2, #1
 801047c:	fa02 f303 	lsl.w	r3, r2, r3
 8010480:	43da      	mvns	r2, r3
 8010482:	4b3e      	ldr	r3, [pc, #248]	; (801057c <UTIL_SEQ_Run+0x1dc>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4013      	ands	r3, r2
 8010488:	4a3c      	ldr	r2, [pc, #240]	; (801057c <UTIL_SEQ_Run+0x1dc>)
 801048a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801048c:	2302      	movs	r3, #2
 801048e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010490:	e013      	b.n	80104ba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010494:	3b01      	subs	r3, #1
 8010496:	4a3d      	ldr	r2, [pc, #244]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 8010498:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801049c:	4b3c      	ldr	r3, [pc, #240]	; (8010590 <UTIL_SEQ_Run+0x1f0>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	2201      	movs	r2, #1
 80104a2:	fa02 f303 	lsl.w	r3, r2, r3
 80104a6:	43da      	mvns	r2, r3
 80104a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104aa:	3b01      	subs	r3, #1
 80104ac:	400a      	ands	r2, r1
 80104ae:	4937      	ldr	r1, [pc, #220]	; (801058c <UTIL_SEQ_Run+0x1ec>)
 80104b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80104b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b6:	3b01      	subs	r3, #1
 80104b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1e8      	bne.n	8010492 <UTIL_SEQ_Run+0xf2>
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	f383 8810 	msr	PRIMASK, r3
}
 80104ca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80104cc:	4b30      	ldr	r3, [pc, #192]	; (8010590 <UTIL_SEQ_Run+0x1f0>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a30      	ldr	r2, [pc, #192]	; (8010594 <UTIL_SEQ_Run+0x1f4>)
 80104d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d6:	4798      	blx	r3

    local_taskset = TaskSet;
 80104d8:	4b28      	ldr	r3, [pc, #160]	; (801057c <UTIL_SEQ_Run+0x1dc>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80104de:	4b28      	ldr	r3, [pc, #160]	; (8010580 <UTIL_SEQ_Run+0x1e0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80104e4:	4b27      	ldr	r3, [pc, #156]	; (8010584 <UTIL_SEQ_Run+0x1e4>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80104ea:	4b27      	ldr	r3, [pc, #156]	; (8010588 <UTIL_SEQ_Run+0x1e8>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80104f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f4:	401a      	ands	r2, r3
 80104f6:	4b20      	ldr	r3, [pc, #128]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4013      	ands	r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d005      	beq.n	801050c <UTIL_SEQ_Run+0x16c>
 8010500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010504:	4013      	ands	r3, r2
 8010506:	2b00      	cmp	r3, #0
 8010508:	f43f af64 	beq.w	80103d4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801050c:	4b20      	ldr	r3, [pc, #128]	; (8010590 <UTIL_SEQ_Run+0x1f0>)
 801050e:	f04f 32ff 	mov.w	r2, #4294967295
 8010512:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010514:	f000 f8f8 	bl	8010708 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010518:	f3ef 8310 	mrs	r3, PRIMASK
 801051c:	613b      	str	r3, [r7, #16]
  return(result);
 801051e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010520:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010522:	b672      	cpsid	i
}
 8010524:	bf00      	nop
  local_taskset = TaskSet;
 8010526:	4b15      	ldr	r3, [pc, #84]	; (801057c <UTIL_SEQ_Run+0x1dc>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801052c:	4b14      	ldr	r3, [pc, #80]	; (8010580 <UTIL_SEQ_Run+0x1e0>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8010532:	4b14      	ldr	r3, [pc, #80]	; (8010584 <UTIL_SEQ_Run+0x1e4>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801053a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053c:	401a      	ands	r2, r3
 801053e:	4b0e      	ldr	r3, [pc, #56]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4013      	ands	r3, r2
 8010544:	2b00      	cmp	r3, #0
 8010546:	d107      	bne.n	8010558 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8010548:	4b0f      	ldr	r3, [pc, #60]	; (8010588 <UTIL_SEQ_Run+0x1e8>)
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801054e:	4013      	ands	r3, r2
 8010550:	2b00      	cmp	r3, #0
 8010552:	d101      	bne.n	8010558 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8010554:	f7f6 fd93 	bl	800707e <UTIL_SEQ_Idle>
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f383 8810 	msr	PRIMASK, r3
}
 8010562:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8010564:	f000 f8d7 	bl	8010716 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8010568:	4a03      	ldr	r2, [pc, #12]	; (8010578 <UTIL_SEQ_Run+0x1d8>)
 801056a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056c:	6013      	str	r3, [r2, #0]

  return;
 801056e:	bf00      	nop
}
 8010570:	3740      	adds	r7, #64	; 0x40
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	2000002c 	.word	0x2000002c
 801057c:	20000900 	.word	0x20000900
 8010580:	20000904 	.word	0x20000904
 8010584:	20000028 	.word	0x20000028
 8010588:	20000908 	.word	0x20000908
 801058c:	20000990 	.word	0x20000990
 8010590:	2000090c 	.word	0x2000090c
 8010594:	20000910 	.word	0x20000910

08010598 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105a4:	f3ef 8310 	mrs	r3, PRIMASK
 80105a8:	617b      	str	r3, [r7, #20]
  return(result);
 80105aa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80105ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80105ae:	b672      	cpsid	i
}
 80105b0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f000 f8b6 	bl	8010724 <SEQ_BitPosition>
 80105b8:	4603      	mov	r3, r0
 80105ba:	4619      	mov	r1, r3
 80105bc:	4a06      	ldr	r2, [pc, #24]	; (80105d8 <UTIL_SEQ_RegTask+0x40>)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	f383 8810 	msr	PRIMASK, r3
}
 80105ce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80105d0:	bf00      	nop
}
 80105d2:	3720      	adds	r7, #32
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	20000910 	.word	0x20000910

080105dc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80105dc:	b480      	push	{r7}
 80105de:	b087      	sub	sp, #28
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105e6:	f3ef 8310 	mrs	r3, PRIMASK
 80105ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80105ec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80105ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80105f0:	b672      	cpsid	i
}
 80105f2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80105f4:	4b0d      	ldr	r3, [pc, #52]	; (801062c <UTIL_SEQ_SetTask+0x50>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4313      	orrs	r3, r2
 80105fc:	4a0b      	ldr	r2, [pc, #44]	; (801062c <UTIL_SEQ_SetTask+0x50>)
 80105fe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010600:	4a0b      	ldr	r2, [pc, #44]	; (8010630 <UTIL_SEQ_SetTask+0x54>)
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	431a      	orrs	r2, r3
 801060c:	4908      	ldr	r1, [pc, #32]	; (8010630 <UTIL_SEQ_SetTask+0x54>)
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	f383 8810 	msr	PRIMASK, r3
}
 801061e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010620:	bf00      	nop
}
 8010622:	371c      	adds	r7, #28
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	20000900 	.word	0x20000900
 8010630:	20000990 	.word	0x20000990

08010634 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010634:	b480      	push	{r7}
 8010636:	b087      	sub	sp, #28
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801063c:	f3ef 8310 	mrs	r3, PRIMASK
 8010640:	60fb      	str	r3, [r7, #12]
  return(result);
 8010642:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010646:	b672      	cpsid	i
}
 8010648:	bf00      	nop

  EvtSet |= EvtId_bm;
 801064a:	4b09      	ldr	r3, [pc, #36]	; (8010670 <UTIL_SEQ_SetEvt+0x3c>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4313      	orrs	r3, r2
 8010652:	4a07      	ldr	r2, [pc, #28]	; (8010670 <UTIL_SEQ_SetEvt+0x3c>)
 8010654:	6013      	str	r3, [r2, #0]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	f383 8810 	msr	PRIMASK, r3
}
 8010660:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010662:	bf00      	nop
}
 8010664:	371c      	adds	r7, #28
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr
 801066e:	bf00      	nop
 8010670:	20000904 	.word	0x20000904

08010674 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b088      	sub	sp, #32
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801067c:	4b1f      	ldr	r3, [pc, #124]	; (80106fc <UTIL_SEQ_WaitEvt+0x88>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8010682:	4b1e      	ldr	r3, [pc, #120]	; (80106fc <UTIL_SEQ_WaitEvt+0x88>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801068a:	d102      	bne.n	8010692 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801068c:	2300      	movs	r3, #0
 801068e:	61fb      	str	r3, [r7, #28]
 8010690:	e005      	b.n	801069e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8010692:	4b1a      	ldr	r3, [pc, #104]	; (80106fc <UTIL_SEQ_WaitEvt+0x88>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2201      	movs	r2, #1
 8010698:	fa02 f303 	lsl.w	r3, r2, r3
 801069c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801069e:	4b18      	ldr	r3, [pc, #96]	; (8010700 <UTIL_SEQ_WaitEvt+0x8c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80106a4:	4a16      	ldr	r2, [pc, #88]	; (8010700 <UTIL_SEQ_WaitEvt+0x8c>)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80106aa:	e003      	b.n	80106b4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80106ac:	6879      	ldr	r1, [r7, #4]
 80106ae:	69f8      	ldr	r0, [r7, #28]
 80106b0:	f7f6 fcec 	bl	800708c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80106b4:	4b13      	ldr	r3, [pc, #76]	; (8010704 <UTIL_SEQ_WaitEvt+0x90>)
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4013      	ands	r3, r2
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d0f5      	beq.n	80106ac <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80106c0:	4a0e      	ldr	r2, [pc, #56]	; (80106fc <UTIL_SEQ_WaitEvt+0x88>)
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106c6:	f3ef 8310 	mrs	r3, PRIMASK
 80106ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80106cc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80106ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80106d0:	b672      	cpsid	i
}
 80106d2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	43da      	mvns	r2, r3
 80106d8:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <UTIL_SEQ_WaitEvt+0x90>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4013      	ands	r3, r2
 80106de:	4a09      	ldr	r2, [pc, #36]	; (8010704 <UTIL_SEQ_WaitEvt+0x90>)
 80106e0:	6013      	str	r3, [r2, #0]
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f383 8810 	msr	PRIMASK, r3
}
 80106ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80106ee:	4a04      	ldr	r2, [pc, #16]	; (8010700 <UTIL_SEQ_WaitEvt+0x8c>)
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	6013      	str	r3, [r2, #0]
  return;
 80106f4:	bf00      	nop
}
 80106f6:	3720      	adds	r7, #32
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	2000090c 	.word	0x2000090c
 8010700:	20000908 	.word	0x20000908
 8010704:	20000904 	.word	0x20000904

08010708 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010708:	b480      	push	{r7}
 801070a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801070c:	bf00      	nop
}
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr

08010716 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010716:	b480      	push	{r7}
 8010718:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801071a:	bf00      	nop
}
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801072c:	2300      	movs	r3, #0
 801072e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	0c1b      	lsrs	r3, r3, #16
 8010738:	041b      	lsls	r3, r3, #16
 801073a:	2b00      	cmp	r3, #0
 801073c:	d104      	bne.n	8010748 <SEQ_BitPosition+0x24>
 801073e:	2310      	movs	r3, #16
 8010740:	73fb      	strb	r3, [r7, #15]
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	041b      	lsls	r3, r3, #16
 8010746:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801074e:	2b00      	cmp	r3, #0
 8010750:	d105      	bne.n	801075e <SEQ_BitPosition+0x3a>
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	3308      	adds	r3, #8
 8010756:	73fb      	strb	r3, [r7, #15]
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	021b      	lsls	r3, r3, #8
 801075c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010764:	2b00      	cmp	r3, #0
 8010766:	d105      	bne.n	8010774 <SEQ_BitPosition+0x50>
 8010768:	7bfb      	ldrb	r3, [r7, #15]
 801076a:	3304      	adds	r3, #4
 801076c:	73fb      	strb	r3, [r7, #15]
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	011b      	lsls	r3, r3, #4
 8010772:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	0f1b      	lsrs	r3, r3, #28
 8010778:	4a07      	ldr	r2, [pc, #28]	; (8010798 <SEQ_BitPosition+0x74>)
 801077a:	5cd2      	ldrb	r2, [r2, r3]
 801077c:	7bfb      	ldrb	r3, [r7, #15]
 801077e:	4413      	add	r3, r2
 8010780:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8010782:	7bfb      	ldrb	r3, [r7, #15]
 8010784:	f1c3 031f 	rsb	r3, r3, #31
 8010788:	b2db      	uxtb	r3, r3
}
 801078a:	4618      	mov	r0, r3
 801078c:	3714      	adds	r7, #20
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop
 8010798:	08012470 	.word	0x08012470

0801079c <__assert_func>:
 801079c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801079e:	4614      	mov	r4, r2
 80107a0:	461a      	mov	r2, r3
 80107a2:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <__assert_func+0x2c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4605      	mov	r5, r0
 80107a8:	68d8      	ldr	r0, [r3, #12]
 80107aa:	b14c      	cbz	r4, 80107c0 <__assert_func+0x24>
 80107ac:	4b07      	ldr	r3, [pc, #28]	; (80107cc <__assert_func+0x30>)
 80107ae:	9100      	str	r1, [sp, #0]
 80107b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107b4:	4906      	ldr	r1, [pc, #24]	; (80107d0 <__assert_func+0x34>)
 80107b6:	462b      	mov	r3, r5
 80107b8:	f000 f96e 	bl	8010a98 <fiprintf>
 80107bc:	f000 faa7 	bl	8010d0e <abort>
 80107c0:	4b04      	ldr	r3, [pc, #16]	; (80107d4 <__assert_func+0x38>)
 80107c2:	461c      	mov	r4, r3
 80107c4:	e7f3      	b.n	80107ae <__assert_func+0x12>
 80107c6:	bf00      	nop
 80107c8:	20000088 	.word	0x20000088
 80107cc:	08012480 	.word	0x08012480
 80107d0:	0801248d 	.word	0x0801248d
 80107d4:	080124bb 	.word	0x080124bb

080107d8 <malloc>:
 80107d8:	4b02      	ldr	r3, [pc, #8]	; (80107e4 <malloc+0xc>)
 80107da:	4601      	mov	r1, r0
 80107dc:	6818      	ldr	r0, [r3, #0]
 80107de:	f000 b82b 	b.w	8010838 <_malloc_r>
 80107e2:	bf00      	nop
 80107e4:	20000088 	.word	0x20000088

080107e8 <free>:
 80107e8:	4b02      	ldr	r3, [pc, #8]	; (80107f4 <free+0xc>)
 80107ea:	4601      	mov	r1, r0
 80107ec:	6818      	ldr	r0, [r3, #0]
 80107ee:	f000 ba95 	b.w	8010d1c <_free_r>
 80107f2:	bf00      	nop
 80107f4:	20000088 	.word	0x20000088

080107f8 <sbrk_aligned>:
 80107f8:	b570      	push	{r4, r5, r6, lr}
 80107fa:	4e0e      	ldr	r6, [pc, #56]	; (8010834 <sbrk_aligned+0x3c>)
 80107fc:	460c      	mov	r4, r1
 80107fe:	6831      	ldr	r1, [r6, #0]
 8010800:	4605      	mov	r5, r0
 8010802:	b911      	cbnz	r1, 801080a <sbrk_aligned+0x12>
 8010804:	f000 fa24 	bl	8010c50 <_sbrk_r>
 8010808:	6030      	str	r0, [r6, #0]
 801080a:	4621      	mov	r1, r4
 801080c:	4628      	mov	r0, r5
 801080e:	f000 fa1f 	bl	8010c50 <_sbrk_r>
 8010812:	1c43      	adds	r3, r0, #1
 8010814:	d00a      	beq.n	801082c <sbrk_aligned+0x34>
 8010816:	1cc4      	adds	r4, r0, #3
 8010818:	f024 0403 	bic.w	r4, r4, #3
 801081c:	42a0      	cmp	r0, r4
 801081e:	d007      	beq.n	8010830 <sbrk_aligned+0x38>
 8010820:	1a21      	subs	r1, r4, r0
 8010822:	4628      	mov	r0, r5
 8010824:	f000 fa14 	bl	8010c50 <_sbrk_r>
 8010828:	3001      	adds	r0, #1
 801082a:	d101      	bne.n	8010830 <sbrk_aligned+0x38>
 801082c:	f04f 34ff 	mov.w	r4, #4294967295
 8010830:	4620      	mov	r0, r4
 8010832:	bd70      	pop	{r4, r5, r6, pc}
 8010834:	200009a4 	.word	0x200009a4

08010838 <_malloc_r>:
 8010838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801083c:	1ccd      	adds	r5, r1, #3
 801083e:	f025 0503 	bic.w	r5, r5, #3
 8010842:	3508      	adds	r5, #8
 8010844:	2d0c      	cmp	r5, #12
 8010846:	bf38      	it	cc
 8010848:	250c      	movcc	r5, #12
 801084a:	2d00      	cmp	r5, #0
 801084c:	4607      	mov	r7, r0
 801084e:	db01      	blt.n	8010854 <_malloc_r+0x1c>
 8010850:	42a9      	cmp	r1, r5
 8010852:	d905      	bls.n	8010860 <_malloc_r+0x28>
 8010854:	230c      	movs	r3, #12
 8010856:	603b      	str	r3, [r7, #0]
 8010858:	2600      	movs	r6, #0
 801085a:	4630      	mov	r0, r6
 801085c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010860:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010934 <_malloc_r+0xfc>
 8010864:	f000 f868 	bl	8010938 <__malloc_lock>
 8010868:	f8d8 3000 	ldr.w	r3, [r8]
 801086c:	461c      	mov	r4, r3
 801086e:	bb5c      	cbnz	r4, 80108c8 <_malloc_r+0x90>
 8010870:	4629      	mov	r1, r5
 8010872:	4638      	mov	r0, r7
 8010874:	f7ff ffc0 	bl	80107f8 <sbrk_aligned>
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	4604      	mov	r4, r0
 801087c:	d155      	bne.n	801092a <_malloc_r+0xf2>
 801087e:	f8d8 4000 	ldr.w	r4, [r8]
 8010882:	4626      	mov	r6, r4
 8010884:	2e00      	cmp	r6, #0
 8010886:	d145      	bne.n	8010914 <_malloc_r+0xdc>
 8010888:	2c00      	cmp	r4, #0
 801088a:	d048      	beq.n	801091e <_malloc_r+0xe6>
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	4631      	mov	r1, r6
 8010890:	4638      	mov	r0, r7
 8010892:	eb04 0903 	add.w	r9, r4, r3
 8010896:	f000 f9db 	bl	8010c50 <_sbrk_r>
 801089a:	4581      	cmp	r9, r0
 801089c:	d13f      	bne.n	801091e <_malloc_r+0xe6>
 801089e:	6821      	ldr	r1, [r4, #0]
 80108a0:	1a6d      	subs	r5, r5, r1
 80108a2:	4629      	mov	r1, r5
 80108a4:	4638      	mov	r0, r7
 80108a6:	f7ff ffa7 	bl	80107f8 <sbrk_aligned>
 80108aa:	3001      	adds	r0, #1
 80108ac:	d037      	beq.n	801091e <_malloc_r+0xe6>
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	442b      	add	r3, r5
 80108b2:	6023      	str	r3, [r4, #0]
 80108b4:	f8d8 3000 	ldr.w	r3, [r8]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d038      	beq.n	801092e <_malloc_r+0xf6>
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	42a2      	cmp	r2, r4
 80108c0:	d12b      	bne.n	801091a <_malloc_r+0xe2>
 80108c2:	2200      	movs	r2, #0
 80108c4:	605a      	str	r2, [r3, #4]
 80108c6:	e00f      	b.n	80108e8 <_malloc_r+0xb0>
 80108c8:	6822      	ldr	r2, [r4, #0]
 80108ca:	1b52      	subs	r2, r2, r5
 80108cc:	d41f      	bmi.n	801090e <_malloc_r+0xd6>
 80108ce:	2a0b      	cmp	r2, #11
 80108d0:	d917      	bls.n	8010902 <_malloc_r+0xca>
 80108d2:	1961      	adds	r1, r4, r5
 80108d4:	42a3      	cmp	r3, r4
 80108d6:	6025      	str	r5, [r4, #0]
 80108d8:	bf18      	it	ne
 80108da:	6059      	strne	r1, [r3, #4]
 80108dc:	6863      	ldr	r3, [r4, #4]
 80108de:	bf08      	it	eq
 80108e0:	f8c8 1000 	streq.w	r1, [r8]
 80108e4:	5162      	str	r2, [r4, r5]
 80108e6:	604b      	str	r3, [r1, #4]
 80108e8:	4638      	mov	r0, r7
 80108ea:	f104 060b 	add.w	r6, r4, #11
 80108ee:	f000 f829 	bl	8010944 <__malloc_unlock>
 80108f2:	f026 0607 	bic.w	r6, r6, #7
 80108f6:	1d23      	adds	r3, r4, #4
 80108f8:	1af2      	subs	r2, r6, r3
 80108fa:	d0ae      	beq.n	801085a <_malloc_r+0x22>
 80108fc:	1b9b      	subs	r3, r3, r6
 80108fe:	50a3      	str	r3, [r4, r2]
 8010900:	e7ab      	b.n	801085a <_malloc_r+0x22>
 8010902:	42a3      	cmp	r3, r4
 8010904:	6862      	ldr	r2, [r4, #4]
 8010906:	d1dd      	bne.n	80108c4 <_malloc_r+0x8c>
 8010908:	f8c8 2000 	str.w	r2, [r8]
 801090c:	e7ec      	b.n	80108e8 <_malloc_r+0xb0>
 801090e:	4623      	mov	r3, r4
 8010910:	6864      	ldr	r4, [r4, #4]
 8010912:	e7ac      	b.n	801086e <_malloc_r+0x36>
 8010914:	4634      	mov	r4, r6
 8010916:	6876      	ldr	r6, [r6, #4]
 8010918:	e7b4      	b.n	8010884 <_malloc_r+0x4c>
 801091a:	4613      	mov	r3, r2
 801091c:	e7cc      	b.n	80108b8 <_malloc_r+0x80>
 801091e:	230c      	movs	r3, #12
 8010920:	603b      	str	r3, [r7, #0]
 8010922:	4638      	mov	r0, r7
 8010924:	f000 f80e 	bl	8010944 <__malloc_unlock>
 8010928:	e797      	b.n	801085a <_malloc_r+0x22>
 801092a:	6025      	str	r5, [r4, #0]
 801092c:	e7dc      	b.n	80108e8 <_malloc_r+0xb0>
 801092e:	605b      	str	r3, [r3, #4]
 8010930:	deff      	udf	#255	; 0xff
 8010932:	bf00      	nop
 8010934:	200009a0 	.word	0x200009a0

08010938 <__malloc_lock>:
 8010938:	4801      	ldr	r0, [pc, #4]	; (8010940 <__malloc_lock+0x8>)
 801093a:	f000 b9d6 	b.w	8010cea <__retarget_lock_acquire_recursive>
 801093e:	bf00      	nop
 8010940:	20000ae8 	.word	0x20000ae8

08010944 <__malloc_unlock>:
 8010944:	4801      	ldr	r0, [pc, #4]	; (801094c <__malloc_unlock+0x8>)
 8010946:	f000 b9d1 	b.w	8010cec <__retarget_lock_release_recursive>
 801094a:	bf00      	nop
 801094c:	20000ae8 	.word	0x20000ae8

08010950 <std>:
 8010950:	2300      	movs	r3, #0
 8010952:	b510      	push	{r4, lr}
 8010954:	4604      	mov	r4, r0
 8010956:	e9c0 3300 	strd	r3, r3, [r0]
 801095a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801095e:	6083      	str	r3, [r0, #8]
 8010960:	8181      	strh	r1, [r0, #12]
 8010962:	6643      	str	r3, [r0, #100]	; 0x64
 8010964:	81c2      	strh	r2, [r0, #14]
 8010966:	6183      	str	r3, [r0, #24]
 8010968:	4619      	mov	r1, r3
 801096a:	2208      	movs	r2, #8
 801096c:	305c      	adds	r0, #92	; 0x5c
 801096e:	f000 f926 	bl	8010bbe <memset>
 8010972:	4b0d      	ldr	r3, [pc, #52]	; (80109a8 <std+0x58>)
 8010974:	6263      	str	r3, [r4, #36]	; 0x24
 8010976:	4b0d      	ldr	r3, [pc, #52]	; (80109ac <std+0x5c>)
 8010978:	62a3      	str	r3, [r4, #40]	; 0x28
 801097a:	4b0d      	ldr	r3, [pc, #52]	; (80109b0 <std+0x60>)
 801097c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801097e:	4b0d      	ldr	r3, [pc, #52]	; (80109b4 <std+0x64>)
 8010980:	6323      	str	r3, [r4, #48]	; 0x30
 8010982:	4b0d      	ldr	r3, [pc, #52]	; (80109b8 <std+0x68>)
 8010984:	6224      	str	r4, [r4, #32]
 8010986:	429c      	cmp	r4, r3
 8010988:	d006      	beq.n	8010998 <std+0x48>
 801098a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801098e:	4294      	cmp	r4, r2
 8010990:	d002      	beq.n	8010998 <std+0x48>
 8010992:	33d0      	adds	r3, #208	; 0xd0
 8010994:	429c      	cmp	r4, r3
 8010996:	d105      	bne.n	80109a4 <std+0x54>
 8010998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109a0:	f000 b9a2 	b.w	8010ce8 <__retarget_lock_init_recursive>
 80109a4:	bd10      	pop	{r4, pc}
 80109a6:	bf00      	nop
 80109a8:	08010b39 	.word	0x08010b39
 80109ac:	08010b5b 	.word	0x08010b5b
 80109b0:	08010b93 	.word	0x08010b93
 80109b4:	08010bb7 	.word	0x08010bb7
 80109b8:	200009a8 	.word	0x200009a8

080109bc <stdio_exit_handler>:
 80109bc:	4a02      	ldr	r2, [pc, #8]	; (80109c8 <stdio_exit_handler+0xc>)
 80109be:	4903      	ldr	r1, [pc, #12]	; (80109cc <stdio_exit_handler+0x10>)
 80109c0:	4803      	ldr	r0, [pc, #12]	; (80109d0 <stdio_exit_handler+0x14>)
 80109c2:	f000 b87b 	b.w	8010abc <_fwalk_sglue>
 80109c6:	bf00      	nop
 80109c8:	20000030 	.word	0x20000030
 80109cc:	08011719 	.word	0x08011719
 80109d0:	2000003c 	.word	0x2000003c

080109d4 <cleanup_stdio>:
 80109d4:	6841      	ldr	r1, [r0, #4]
 80109d6:	4b0c      	ldr	r3, [pc, #48]	; (8010a08 <cleanup_stdio+0x34>)
 80109d8:	4299      	cmp	r1, r3
 80109da:	b510      	push	{r4, lr}
 80109dc:	4604      	mov	r4, r0
 80109de:	d001      	beq.n	80109e4 <cleanup_stdio+0x10>
 80109e0:	f000 fe9a 	bl	8011718 <_fflush_r>
 80109e4:	68a1      	ldr	r1, [r4, #8]
 80109e6:	4b09      	ldr	r3, [pc, #36]	; (8010a0c <cleanup_stdio+0x38>)
 80109e8:	4299      	cmp	r1, r3
 80109ea:	d002      	beq.n	80109f2 <cleanup_stdio+0x1e>
 80109ec:	4620      	mov	r0, r4
 80109ee:	f000 fe93 	bl	8011718 <_fflush_r>
 80109f2:	68e1      	ldr	r1, [r4, #12]
 80109f4:	4b06      	ldr	r3, [pc, #24]	; (8010a10 <cleanup_stdio+0x3c>)
 80109f6:	4299      	cmp	r1, r3
 80109f8:	d004      	beq.n	8010a04 <cleanup_stdio+0x30>
 80109fa:	4620      	mov	r0, r4
 80109fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a00:	f000 be8a 	b.w	8011718 <_fflush_r>
 8010a04:	bd10      	pop	{r4, pc}
 8010a06:	bf00      	nop
 8010a08:	200009a8 	.word	0x200009a8
 8010a0c:	20000a10 	.word	0x20000a10
 8010a10:	20000a78 	.word	0x20000a78

08010a14 <global_stdio_init.part.0>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	4b0b      	ldr	r3, [pc, #44]	; (8010a44 <global_stdio_init.part.0+0x30>)
 8010a18:	4c0b      	ldr	r4, [pc, #44]	; (8010a48 <global_stdio_init.part.0+0x34>)
 8010a1a:	4a0c      	ldr	r2, [pc, #48]	; (8010a4c <global_stdio_init.part.0+0x38>)
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	4620      	mov	r0, r4
 8010a20:	2200      	movs	r2, #0
 8010a22:	2104      	movs	r1, #4
 8010a24:	f7ff ff94 	bl	8010950 <std>
 8010a28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	2109      	movs	r1, #9
 8010a30:	f7ff ff8e 	bl	8010950 <std>
 8010a34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010a38:	2202      	movs	r2, #2
 8010a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a3e:	2112      	movs	r1, #18
 8010a40:	f7ff bf86 	b.w	8010950 <std>
 8010a44:	20000ae0 	.word	0x20000ae0
 8010a48:	200009a8 	.word	0x200009a8
 8010a4c:	080109bd 	.word	0x080109bd

08010a50 <__sfp_lock_acquire>:
 8010a50:	4801      	ldr	r0, [pc, #4]	; (8010a58 <__sfp_lock_acquire+0x8>)
 8010a52:	f000 b94a 	b.w	8010cea <__retarget_lock_acquire_recursive>
 8010a56:	bf00      	nop
 8010a58:	20000ae9 	.word	0x20000ae9

08010a5c <__sfp_lock_release>:
 8010a5c:	4801      	ldr	r0, [pc, #4]	; (8010a64 <__sfp_lock_release+0x8>)
 8010a5e:	f000 b945 	b.w	8010cec <__retarget_lock_release_recursive>
 8010a62:	bf00      	nop
 8010a64:	20000ae9 	.word	0x20000ae9

08010a68 <__sinit>:
 8010a68:	b510      	push	{r4, lr}
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	f7ff fff0 	bl	8010a50 <__sfp_lock_acquire>
 8010a70:	6a23      	ldr	r3, [r4, #32]
 8010a72:	b11b      	cbz	r3, 8010a7c <__sinit+0x14>
 8010a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a78:	f7ff bff0 	b.w	8010a5c <__sfp_lock_release>
 8010a7c:	4b04      	ldr	r3, [pc, #16]	; (8010a90 <__sinit+0x28>)
 8010a7e:	6223      	str	r3, [r4, #32]
 8010a80:	4b04      	ldr	r3, [pc, #16]	; (8010a94 <__sinit+0x2c>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1f5      	bne.n	8010a74 <__sinit+0xc>
 8010a88:	f7ff ffc4 	bl	8010a14 <global_stdio_init.part.0>
 8010a8c:	e7f2      	b.n	8010a74 <__sinit+0xc>
 8010a8e:	bf00      	nop
 8010a90:	080109d5 	.word	0x080109d5
 8010a94:	20000ae0 	.word	0x20000ae0

08010a98 <fiprintf>:
 8010a98:	b40e      	push	{r1, r2, r3}
 8010a9a:	b503      	push	{r0, r1, lr}
 8010a9c:	4601      	mov	r1, r0
 8010a9e:	ab03      	add	r3, sp, #12
 8010aa0:	4805      	ldr	r0, [pc, #20]	; (8010ab8 <fiprintf+0x20>)
 8010aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa6:	6800      	ldr	r0, [r0, #0]
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	f000 fb05 	bl	80110b8 <_vfiprintf_r>
 8010aae:	b002      	add	sp, #8
 8010ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ab4:	b003      	add	sp, #12
 8010ab6:	4770      	bx	lr
 8010ab8:	20000088 	.word	0x20000088

08010abc <_fwalk_sglue>:
 8010abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ac0:	4607      	mov	r7, r0
 8010ac2:	4688      	mov	r8, r1
 8010ac4:	4614      	mov	r4, r2
 8010ac6:	2600      	movs	r6, #0
 8010ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010acc:	f1b9 0901 	subs.w	r9, r9, #1
 8010ad0:	d505      	bpl.n	8010ade <_fwalk_sglue+0x22>
 8010ad2:	6824      	ldr	r4, [r4, #0]
 8010ad4:	2c00      	cmp	r4, #0
 8010ad6:	d1f7      	bne.n	8010ac8 <_fwalk_sglue+0xc>
 8010ad8:	4630      	mov	r0, r6
 8010ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ade:	89ab      	ldrh	r3, [r5, #12]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d907      	bls.n	8010af4 <_fwalk_sglue+0x38>
 8010ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	d003      	beq.n	8010af4 <_fwalk_sglue+0x38>
 8010aec:	4629      	mov	r1, r5
 8010aee:	4638      	mov	r0, r7
 8010af0:	47c0      	blx	r8
 8010af2:	4306      	orrs	r6, r0
 8010af4:	3568      	adds	r5, #104	; 0x68
 8010af6:	e7e9      	b.n	8010acc <_fwalk_sglue+0x10>

08010af8 <siprintf>:
 8010af8:	b40e      	push	{r1, r2, r3}
 8010afa:	b500      	push	{lr}
 8010afc:	b09c      	sub	sp, #112	; 0x70
 8010afe:	ab1d      	add	r3, sp, #116	; 0x74
 8010b00:	9002      	str	r0, [sp, #8]
 8010b02:	9006      	str	r0, [sp, #24]
 8010b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b08:	4809      	ldr	r0, [pc, #36]	; (8010b30 <siprintf+0x38>)
 8010b0a:	9107      	str	r1, [sp, #28]
 8010b0c:	9104      	str	r1, [sp, #16]
 8010b0e:	4909      	ldr	r1, [pc, #36]	; (8010b34 <siprintf+0x3c>)
 8010b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b14:	9105      	str	r1, [sp, #20]
 8010b16:	6800      	ldr	r0, [r0, #0]
 8010b18:	9301      	str	r3, [sp, #4]
 8010b1a:	a902      	add	r1, sp, #8
 8010b1c:	f000 f9a4 	bl	8010e68 <_svfiprintf_r>
 8010b20:	9b02      	ldr	r3, [sp, #8]
 8010b22:	2200      	movs	r2, #0
 8010b24:	701a      	strb	r2, [r3, #0]
 8010b26:	b01c      	add	sp, #112	; 0x70
 8010b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b2c:	b003      	add	sp, #12
 8010b2e:	4770      	bx	lr
 8010b30:	20000088 	.word	0x20000088
 8010b34:	ffff0208 	.word	0xffff0208

08010b38 <__sread>:
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	460c      	mov	r4, r1
 8010b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b40:	f000 f874 	bl	8010c2c <_read_r>
 8010b44:	2800      	cmp	r0, #0
 8010b46:	bfab      	itete	ge
 8010b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8010b4c:	181b      	addge	r3, r3, r0
 8010b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b52:	bfac      	ite	ge
 8010b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b56:	81a3      	strhlt	r3, [r4, #12]
 8010b58:	bd10      	pop	{r4, pc}

08010b5a <__swrite>:
 8010b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b5e:	461f      	mov	r7, r3
 8010b60:	898b      	ldrh	r3, [r1, #12]
 8010b62:	05db      	lsls	r3, r3, #23
 8010b64:	4605      	mov	r5, r0
 8010b66:	460c      	mov	r4, r1
 8010b68:	4616      	mov	r6, r2
 8010b6a:	d505      	bpl.n	8010b78 <__swrite+0x1e>
 8010b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b70:	2302      	movs	r3, #2
 8010b72:	2200      	movs	r2, #0
 8010b74:	f000 f848 	bl	8010c08 <_lseek_r>
 8010b78:	89a3      	ldrh	r3, [r4, #12]
 8010b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b82:	81a3      	strh	r3, [r4, #12]
 8010b84:	4632      	mov	r2, r6
 8010b86:	463b      	mov	r3, r7
 8010b88:	4628      	mov	r0, r5
 8010b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8e:	f000 b86f 	b.w	8010c70 <_write_r>

08010b92 <__sseek>:
 8010b92:	b510      	push	{r4, lr}
 8010b94:	460c      	mov	r4, r1
 8010b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b9a:	f000 f835 	bl	8010c08 <_lseek_r>
 8010b9e:	1c43      	adds	r3, r0, #1
 8010ba0:	89a3      	ldrh	r3, [r4, #12]
 8010ba2:	bf15      	itete	ne
 8010ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010bae:	81a3      	strheq	r3, [r4, #12]
 8010bb0:	bf18      	it	ne
 8010bb2:	81a3      	strhne	r3, [r4, #12]
 8010bb4:	bd10      	pop	{r4, pc}

08010bb6 <__sclose>:
 8010bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bba:	f000 b815 	b.w	8010be8 <_close_r>

08010bbe <memset>:
 8010bbe:	4402      	add	r2, r0
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d100      	bne.n	8010bc8 <memset+0xa>
 8010bc6:	4770      	bx	lr
 8010bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8010bcc:	e7f9      	b.n	8010bc2 <memset+0x4>

08010bce <strchr>:
 8010bce:	b2c9      	uxtb	r1, r1
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bd6:	b11a      	cbz	r2, 8010be0 <strchr+0x12>
 8010bd8:	428a      	cmp	r2, r1
 8010bda:	d1f9      	bne.n	8010bd0 <strchr+0x2>
 8010bdc:	4618      	mov	r0, r3
 8010bde:	4770      	bx	lr
 8010be0:	2900      	cmp	r1, #0
 8010be2:	bf18      	it	ne
 8010be4:	2300      	movne	r3, #0
 8010be6:	e7f9      	b.n	8010bdc <strchr+0xe>

08010be8 <_close_r>:
 8010be8:	b538      	push	{r3, r4, r5, lr}
 8010bea:	4d06      	ldr	r5, [pc, #24]	; (8010c04 <_close_r+0x1c>)
 8010bec:	2300      	movs	r3, #0
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4608      	mov	r0, r1
 8010bf2:	602b      	str	r3, [r5, #0]
 8010bf4:	f7f7 f937 	bl	8007e66 <_close>
 8010bf8:	1c43      	adds	r3, r0, #1
 8010bfa:	d102      	bne.n	8010c02 <_close_r+0x1a>
 8010bfc:	682b      	ldr	r3, [r5, #0]
 8010bfe:	b103      	cbz	r3, 8010c02 <_close_r+0x1a>
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	bd38      	pop	{r3, r4, r5, pc}
 8010c04:	20000ae4 	.word	0x20000ae4

08010c08 <_lseek_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d07      	ldr	r5, [pc, #28]	; (8010c28 <_lseek_r+0x20>)
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	4608      	mov	r0, r1
 8010c10:	4611      	mov	r1, r2
 8010c12:	2200      	movs	r2, #0
 8010c14:	602a      	str	r2, [r5, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	f7f7 f94c 	bl	8007eb4 <_lseek>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_lseek_r+0x1e>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_lseek_r+0x1e>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	20000ae4 	.word	0x20000ae4

08010c2c <_read_r>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	4d07      	ldr	r5, [pc, #28]	; (8010c4c <_read_r+0x20>)
 8010c30:	4604      	mov	r4, r0
 8010c32:	4608      	mov	r0, r1
 8010c34:	4611      	mov	r1, r2
 8010c36:	2200      	movs	r2, #0
 8010c38:	602a      	str	r2, [r5, #0]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f7f7 f8da 	bl	8007df4 <_read>
 8010c40:	1c43      	adds	r3, r0, #1
 8010c42:	d102      	bne.n	8010c4a <_read_r+0x1e>
 8010c44:	682b      	ldr	r3, [r5, #0]
 8010c46:	b103      	cbz	r3, 8010c4a <_read_r+0x1e>
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
 8010c4c:	20000ae4 	.word	0x20000ae4

08010c50 <_sbrk_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4d06      	ldr	r5, [pc, #24]	; (8010c6c <_sbrk_r+0x1c>)
 8010c54:	2300      	movs	r3, #0
 8010c56:	4604      	mov	r4, r0
 8010c58:	4608      	mov	r0, r1
 8010c5a:	602b      	str	r3, [r5, #0]
 8010c5c:	f7f7 f938 	bl	8007ed0 <_sbrk>
 8010c60:	1c43      	adds	r3, r0, #1
 8010c62:	d102      	bne.n	8010c6a <_sbrk_r+0x1a>
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	b103      	cbz	r3, 8010c6a <_sbrk_r+0x1a>
 8010c68:	6023      	str	r3, [r4, #0]
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}
 8010c6c:	20000ae4 	.word	0x20000ae4

08010c70 <_write_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4d07      	ldr	r5, [pc, #28]	; (8010c90 <_write_r+0x20>)
 8010c74:	4604      	mov	r4, r0
 8010c76:	4608      	mov	r0, r1
 8010c78:	4611      	mov	r1, r2
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	602a      	str	r2, [r5, #0]
 8010c7e:	461a      	mov	r2, r3
 8010c80:	f7f7 f8d5 	bl	8007e2e <_write>
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	d102      	bne.n	8010c8e <_write_r+0x1e>
 8010c88:	682b      	ldr	r3, [r5, #0]
 8010c8a:	b103      	cbz	r3, 8010c8e <_write_r+0x1e>
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	20000ae4 	.word	0x20000ae4

08010c94 <__errno>:
 8010c94:	4b01      	ldr	r3, [pc, #4]	; (8010c9c <__errno+0x8>)
 8010c96:	6818      	ldr	r0, [r3, #0]
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	20000088 	.word	0x20000088

08010ca0 <__libc_init_array>:
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	4d0d      	ldr	r5, [pc, #52]	; (8010cd8 <__libc_init_array+0x38>)
 8010ca4:	4c0d      	ldr	r4, [pc, #52]	; (8010cdc <__libc_init_array+0x3c>)
 8010ca6:	1b64      	subs	r4, r4, r5
 8010ca8:	10a4      	asrs	r4, r4, #2
 8010caa:	2600      	movs	r6, #0
 8010cac:	42a6      	cmp	r6, r4
 8010cae:	d109      	bne.n	8010cc4 <__libc_init_array+0x24>
 8010cb0:	4d0b      	ldr	r5, [pc, #44]	; (8010ce0 <__libc_init_array+0x40>)
 8010cb2:	4c0c      	ldr	r4, [pc, #48]	; (8010ce4 <__libc_init_array+0x44>)
 8010cb4:	f000 ff08 	bl	8011ac8 <_init>
 8010cb8:	1b64      	subs	r4, r4, r5
 8010cba:	10a4      	asrs	r4, r4, #2
 8010cbc:	2600      	movs	r6, #0
 8010cbe:	42a6      	cmp	r6, r4
 8010cc0:	d105      	bne.n	8010cce <__libc_init_array+0x2e>
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}
 8010cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cc8:	4798      	blx	r3
 8010cca:	3601      	adds	r6, #1
 8010ccc:	e7ee      	b.n	8010cac <__libc_init_array+0xc>
 8010cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cd2:	4798      	blx	r3
 8010cd4:	3601      	adds	r6, #1
 8010cd6:	e7f2      	b.n	8010cbe <__libc_init_array+0x1e>
 8010cd8:	080124f8 	.word	0x080124f8
 8010cdc:	080124f8 	.word	0x080124f8
 8010ce0:	080124f8 	.word	0x080124f8
 8010ce4:	080124fc 	.word	0x080124fc

08010ce8 <__retarget_lock_init_recursive>:
 8010ce8:	4770      	bx	lr

08010cea <__retarget_lock_acquire_recursive>:
 8010cea:	4770      	bx	lr

08010cec <__retarget_lock_release_recursive>:
 8010cec:	4770      	bx	lr

08010cee <__aeabi_memcpy>:
 8010cee:	f000 b800 	b.w	8010cf2 <memcpy>

08010cf2 <memcpy>:
 8010cf2:	440a      	add	r2, r1
 8010cf4:	4291      	cmp	r1, r2
 8010cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cfa:	d100      	bne.n	8010cfe <memcpy+0xc>
 8010cfc:	4770      	bx	lr
 8010cfe:	b510      	push	{r4, lr}
 8010d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d08:	4291      	cmp	r1, r2
 8010d0a:	d1f9      	bne.n	8010d00 <memcpy+0xe>
 8010d0c:	bd10      	pop	{r4, pc}

08010d0e <abort>:
 8010d0e:	b508      	push	{r3, lr}
 8010d10:	2006      	movs	r0, #6
 8010d12:	f000 fe01 	bl	8011918 <raise>
 8010d16:	2001      	movs	r0, #1
 8010d18:	f7f7 f862 	bl	8007de0 <_exit>

08010d1c <_free_r>:
 8010d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d1e:	2900      	cmp	r1, #0
 8010d20:	d044      	beq.n	8010dac <_free_r+0x90>
 8010d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d26:	9001      	str	r0, [sp, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8010d2e:	bfb8      	it	lt
 8010d30:	18e4      	addlt	r4, r4, r3
 8010d32:	f7ff fe01 	bl	8010938 <__malloc_lock>
 8010d36:	4a1e      	ldr	r2, [pc, #120]	; (8010db0 <_free_r+0x94>)
 8010d38:	9801      	ldr	r0, [sp, #4]
 8010d3a:	6813      	ldr	r3, [r2, #0]
 8010d3c:	b933      	cbnz	r3, 8010d4c <_free_r+0x30>
 8010d3e:	6063      	str	r3, [r4, #4]
 8010d40:	6014      	str	r4, [r2, #0]
 8010d42:	b003      	add	sp, #12
 8010d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d48:	f7ff bdfc 	b.w	8010944 <__malloc_unlock>
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	d908      	bls.n	8010d62 <_free_r+0x46>
 8010d50:	6825      	ldr	r5, [r4, #0]
 8010d52:	1961      	adds	r1, r4, r5
 8010d54:	428b      	cmp	r3, r1
 8010d56:	bf01      	itttt	eq
 8010d58:	6819      	ldreq	r1, [r3, #0]
 8010d5a:	685b      	ldreq	r3, [r3, #4]
 8010d5c:	1949      	addeq	r1, r1, r5
 8010d5e:	6021      	streq	r1, [r4, #0]
 8010d60:	e7ed      	b.n	8010d3e <_free_r+0x22>
 8010d62:	461a      	mov	r2, r3
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	b10b      	cbz	r3, 8010d6c <_free_r+0x50>
 8010d68:	42a3      	cmp	r3, r4
 8010d6a:	d9fa      	bls.n	8010d62 <_free_r+0x46>
 8010d6c:	6811      	ldr	r1, [r2, #0]
 8010d6e:	1855      	adds	r5, r2, r1
 8010d70:	42a5      	cmp	r5, r4
 8010d72:	d10b      	bne.n	8010d8c <_free_r+0x70>
 8010d74:	6824      	ldr	r4, [r4, #0]
 8010d76:	4421      	add	r1, r4
 8010d78:	1854      	adds	r4, r2, r1
 8010d7a:	42a3      	cmp	r3, r4
 8010d7c:	6011      	str	r1, [r2, #0]
 8010d7e:	d1e0      	bne.n	8010d42 <_free_r+0x26>
 8010d80:	681c      	ldr	r4, [r3, #0]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	6053      	str	r3, [r2, #4]
 8010d86:	440c      	add	r4, r1
 8010d88:	6014      	str	r4, [r2, #0]
 8010d8a:	e7da      	b.n	8010d42 <_free_r+0x26>
 8010d8c:	d902      	bls.n	8010d94 <_free_r+0x78>
 8010d8e:	230c      	movs	r3, #12
 8010d90:	6003      	str	r3, [r0, #0]
 8010d92:	e7d6      	b.n	8010d42 <_free_r+0x26>
 8010d94:	6825      	ldr	r5, [r4, #0]
 8010d96:	1961      	adds	r1, r4, r5
 8010d98:	428b      	cmp	r3, r1
 8010d9a:	bf04      	itt	eq
 8010d9c:	6819      	ldreq	r1, [r3, #0]
 8010d9e:	685b      	ldreq	r3, [r3, #4]
 8010da0:	6063      	str	r3, [r4, #4]
 8010da2:	bf04      	itt	eq
 8010da4:	1949      	addeq	r1, r1, r5
 8010da6:	6021      	streq	r1, [r4, #0]
 8010da8:	6054      	str	r4, [r2, #4]
 8010daa:	e7ca      	b.n	8010d42 <_free_r+0x26>
 8010dac:	b003      	add	sp, #12
 8010dae:	bd30      	pop	{r4, r5, pc}
 8010db0:	200009a0 	.word	0x200009a0

08010db4 <__ssputs_r>:
 8010db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db8:	688e      	ldr	r6, [r1, #8]
 8010dba:	461f      	mov	r7, r3
 8010dbc:	42be      	cmp	r6, r7
 8010dbe:	680b      	ldr	r3, [r1, #0]
 8010dc0:	4682      	mov	sl, r0
 8010dc2:	460c      	mov	r4, r1
 8010dc4:	4690      	mov	r8, r2
 8010dc6:	d82c      	bhi.n	8010e22 <__ssputs_r+0x6e>
 8010dc8:	898a      	ldrh	r2, [r1, #12]
 8010dca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010dce:	d026      	beq.n	8010e1e <__ssputs_r+0x6a>
 8010dd0:	6965      	ldr	r5, [r4, #20]
 8010dd2:	6909      	ldr	r1, [r1, #16]
 8010dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dd8:	eba3 0901 	sub.w	r9, r3, r1
 8010ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010de0:	1c7b      	adds	r3, r7, #1
 8010de2:	444b      	add	r3, r9
 8010de4:	106d      	asrs	r5, r5, #1
 8010de6:	429d      	cmp	r5, r3
 8010de8:	bf38      	it	cc
 8010dea:	461d      	movcc	r5, r3
 8010dec:	0553      	lsls	r3, r2, #21
 8010dee:	d527      	bpl.n	8010e40 <__ssputs_r+0x8c>
 8010df0:	4629      	mov	r1, r5
 8010df2:	f7ff fd21 	bl	8010838 <_malloc_r>
 8010df6:	4606      	mov	r6, r0
 8010df8:	b360      	cbz	r0, 8010e54 <__ssputs_r+0xa0>
 8010dfa:	6921      	ldr	r1, [r4, #16]
 8010dfc:	464a      	mov	r2, r9
 8010dfe:	f7ff ff78 	bl	8010cf2 <memcpy>
 8010e02:	89a3      	ldrh	r3, [r4, #12]
 8010e04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e0c:	81a3      	strh	r3, [r4, #12]
 8010e0e:	6126      	str	r6, [r4, #16]
 8010e10:	6165      	str	r5, [r4, #20]
 8010e12:	444e      	add	r6, r9
 8010e14:	eba5 0509 	sub.w	r5, r5, r9
 8010e18:	6026      	str	r6, [r4, #0]
 8010e1a:	60a5      	str	r5, [r4, #8]
 8010e1c:	463e      	mov	r6, r7
 8010e1e:	42be      	cmp	r6, r7
 8010e20:	d900      	bls.n	8010e24 <__ssputs_r+0x70>
 8010e22:	463e      	mov	r6, r7
 8010e24:	6820      	ldr	r0, [r4, #0]
 8010e26:	4632      	mov	r2, r6
 8010e28:	4641      	mov	r1, r8
 8010e2a:	f000 fd33 	bl	8011894 <memmove>
 8010e2e:	68a3      	ldr	r3, [r4, #8]
 8010e30:	1b9b      	subs	r3, r3, r6
 8010e32:	60a3      	str	r3, [r4, #8]
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	4433      	add	r3, r6
 8010e38:	6023      	str	r3, [r4, #0]
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e40:	462a      	mov	r2, r5
 8010e42:	f000 fd85 	bl	8011950 <_realloc_r>
 8010e46:	4606      	mov	r6, r0
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d1e0      	bne.n	8010e0e <__ssputs_r+0x5a>
 8010e4c:	6921      	ldr	r1, [r4, #16]
 8010e4e:	4650      	mov	r0, sl
 8010e50:	f7ff ff64 	bl	8010d1c <_free_r>
 8010e54:	230c      	movs	r3, #12
 8010e56:	f8ca 3000 	str.w	r3, [sl]
 8010e5a:	89a3      	ldrh	r3, [r4, #12]
 8010e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e60:	81a3      	strh	r3, [r4, #12]
 8010e62:	f04f 30ff 	mov.w	r0, #4294967295
 8010e66:	e7e9      	b.n	8010e3c <__ssputs_r+0x88>

08010e68 <_svfiprintf_r>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	4698      	mov	r8, r3
 8010e6e:	898b      	ldrh	r3, [r1, #12]
 8010e70:	061b      	lsls	r3, r3, #24
 8010e72:	b09d      	sub	sp, #116	; 0x74
 8010e74:	4607      	mov	r7, r0
 8010e76:	460d      	mov	r5, r1
 8010e78:	4614      	mov	r4, r2
 8010e7a:	d50e      	bpl.n	8010e9a <_svfiprintf_r+0x32>
 8010e7c:	690b      	ldr	r3, [r1, #16]
 8010e7e:	b963      	cbnz	r3, 8010e9a <_svfiprintf_r+0x32>
 8010e80:	2140      	movs	r1, #64	; 0x40
 8010e82:	f7ff fcd9 	bl	8010838 <_malloc_r>
 8010e86:	6028      	str	r0, [r5, #0]
 8010e88:	6128      	str	r0, [r5, #16]
 8010e8a:	b920      	cbnz	r0, 8010e96 <_svfiprintf_r+0x2e>
 8010e8c:	230c      	movs	r3, #12
 8010e8e:	603b      	str	r3, [r7, #0]
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295
 8010e94:	e0d0      	b.n	8011038 <_svfiprintf_r+0x1d0>
 8010e96:	2340      	movs	r3, #64	; 0x40
 8010e98:	616b      	str	r3, [r5, #20]
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9e:	2320      	movs	r3, #32
 8010ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ea8:	2330      	movs	r3, #48	; 0x30
 8010eaa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011050 <_svfiprintf_r+0x1e8>
 8010eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010eb2:	f04f 0901 	mov.w	r9, #1
 8010eb6:	4623      	mov	r3, r4
 8010eb8:	469a      	mov	sl, r3
 8010eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ebe:	b10a      	cbz	r2, 8010ec4 <_svfiprintf_r+0x5c>
 8010ec0:	2a25      	cmp	r2, #37	; 0x25
 8010ec2:	d1f9      	bne.n	8010eb8 <_svfiprintf_r+0x50>
 8010ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ec8:	d00b      	beq.n	8010ee2 <_svfiprintf_r+0x7a>
 8010eca:	465b      	mov	r3, fp
 8010ecc:	4622      	mov	r2, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	4638      	mov	r0, r7
 8010ed2:	f7ff ff6f 	bl	8010db4 <__ssputs_r>
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	f000 80a9 	beq.w	801102e <_svfiprintf_r+0x1c6>
 8010edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ede:	445a      	add	r2, fp
 8010ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8010ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f000 80a1 	beq.w	801102e <_svfiprintf_r+0x1c6>
 8010eec:	2300      	movs	r3, #0
 8010eee:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ef6:	f10a 0a01 	add.w	sl, sl, #1
 8010efa:	9304      	str	r3, [sp, #16]
 8010efc:	9307      	str	r3, [sp, #28]
 8010efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f02:	931a      	str	r3, [sp, #104]	; 0x68
 8010f04:	4654      	mov	r4, sl
 8010f06:	2205      	movs	r2, #5
 8010f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f0c:	4850      	ldr	r0, [pc, #320]	; (8011050 <_svfiprintf_r+0x1e8>)
 8010f0e:	f7f4 ff0f 	bl	8005d30 <memchr>
 8010f12:	9a04      	ldr	r2, [sp, #16]
 8010f14:	b9d8      	cbnz	r0, 8010f4e <_svfiprintf_r+0xe6>
 8010f16:	06d0      	lsls	r0, r2, #27
 8010f18:	bf44      	itt	mi
 8010f1a:	2320      	movmi	r3, #32
 8010f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f20:	0711      	lsls	r1, r2, #28
 8010f22:	bf44      	itt	mi
 8010f24:	232b      	movmi	r3, #43	; 0x2b
 8010f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8010f30:	d015      	beq.n	8010f5e <_svfiprintf_r+0xf6>
 8010f32:	9a07      	ldr	r2, [sp, #28]
 8010f34:	4654      	mov	r4, sl
 8010f36:	2000      	movs	r0, #0
 8010f38:	f04f 0c0a 	mov.w	ip, #10
 8010f3c:	4621      	mov	r1, r4
 8010f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f42:	3b30      	subs	r3, #48	; 0x30
 8010f44:	2b09      	cmp	r3, #9
 8010f46:	d94d      	bls.n	8010fe4 <_svfiprintf_r+0x17c>
 8010f48:	b1b0      	cbz	r0, 8010f78 <_svfiprintf_r+0x110>
 8010f4a:	9207      	str	r2, [sp, #28]
 8010f4c:	e014      	b.n	8010f78 <_svfiprintf_r+0x110>
 8010f4e:	eba0 0308 	sub.w	r3, r0, r8
 8010f52:	fa09 f303 	lsl.w	r3, r9, r3
 8010f56:	4313      	orrs	r3, r2
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	46a2      	mov	sl, r4
 8010f5c:	e7d2      	b.n	8010f04 <_svfiprintf_r+0x9c>
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	1d19      	adds	r1, r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	9103      	str	r1, [sp, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	bfbb      	ittet	lt
 8010f6a:	425b      	neglt	r3, r3
 8010f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8010f70:	9307      	strge	r3, [sp, #28]
 8010f72:	9307      	strlt	r3, [sp, #28]
 8010f74:	bfb8      	it	lt
 8010f76:	9204      	strlt	r2, [sp, #16]
 8010f78:	7823      	ldrb	r3, [r4, #0]
 8010f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010f7c:	d10c      	bne.n	8010f98 <_svfiprintf_r+0x130>
 8010f7e:	7863      	ldrb	r3, [r4, #1]
 8010f80:	2b2a      	cmp	r3, #42	; 0x2a
 8010f82:	d134      	bne.n	8010fee <_svfiprintf_r+0x186>
 8010f84:	9b03      	ldr	r3, [sp, #12]
 8010f86:	1d1a      	adds	r2, r3, #4
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	9203      	str	r2, [sp, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bfb8      	it	lt
 8010f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f94:	3402      	adds	r4, #2
 8010f96:	9305      	str	r3, [sp, #20]
 8010f98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011060 <_svfiprintf_r+0x1f8>
 8010f9c:	7821      	ldrb	r1, [r4, #0]
 8010f9e:	2203      	movs	r2, #3
 8010fa0:	4650      	mov	r0, sl
 8010fa2:	f7f4 fec5 	bl	8005d30 <memchr>
 8010fa6:	b138      	cbz	r0, 8010fb8 <_svfiprintf_r+0x150>
 8010fa8:	9b04      	ldr	r3, [sp, #16]
 8010faa:	eba0 000a 	sub.w	r0, r0, sl
 8010fae:	2240      	movs	r2, #64	; 0x40
 8010fb0:	4082      	lsls	r2, r0
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	3401      	adds	r4, #1
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fbc:	4825      	ldr	r0, [pc, #148]	; (8011054 <_svfiprintf_r+0x1ec>)
 8010fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fc2:	2206      	movs	r2, #6
 8010fc4:	f7f4 feb4 	bl	8005d30 <memchr>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d038      	beq.n	801103e <_svfiprintf_r+0x1d6>
 8010fcc:	4b22      	ldr	r3, [pc, #136]	; (8011058 <_svfiprintf_r+0x1f0>)
 8010fce:	bb1b      	cbnz	r3, 8011018 <_svfiprintf_r+0x1b0>
 8010fd0:	9b03      	ldr	r3, [sp, #12]
 8010fd2:	3307      	adds	r3, #7
 8010fd4:	f023 0307 	bic.w	r3, r3, #7
 8010fd8:	3308      	adds	r3, #8
 8010fda:	9303      	str	r3, [sp, #12]
 8010fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fde:	4433      	add	r3, r6
 8010fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8010fe2:	e768      	b.n	8010eb6 <_svfiprintf_r+0x4e>
 8010fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fe8:	460c      	mov	r4, r1
 8010fea:	2001      	movs	r0, #1
 8010fec:	e7a6      	b.n	8010f3c <_svfiprintf_r+0xd4>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	3401      	adds	r4, #1
 8010ff2:	9305      	str	r3, [sp, #20]
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	f04f 0c0a 	mov.w	ip, #10
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011000:	3a30      	subs	r2, #48	; 0x30
 8011002:	2a09      	cmp	r2, #9
 8011004:	d903      	bls.n	801100e <_svfiprintf_r+0x1a6>
 8011006:	2b00      	cmp	r3, #0
 8011008:	d0c6      	beq.n	8010f98 <_svfiprintf_r+0x130>
 801100a:	9105      	str	r1, [sp, #20]
 801100c:	e7c4      	b.n	8010f98 <_svfiprintf_r+0x130>
 801100e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011012:	4604      	mov	r4, r0
 8011014:	2301      	movs	r3, #1
 8011016:	e7f0      	b.n	8010ffa <_svfiprintf_r+0x192>
 8011018:	ab03      	add	r3, sp, #12
 801101a:	9300      	str	r3, [sp, #0]
 801101c:	462a      	mov	r2, r5
 801101e:	4b0f      	ldr	r3, [pc, #60]	; (801105c <_svfiprintf_r+0x1f4>)
 8011020:	a904      	add	r1, sp, #16
 8011022:	4638      	mov	r0, r7
 8011024:	f3af 8000 	nop.w
 8011028:	1c42      	adds	r2, r0, #1
 801102a:	4606      	mov	r6, r0
 801102c:	d1d6      	bne.n	8010fdc <_svfiprintf_r+0x174>
 801102e:	89ab      	ldrh	r3, [r5, #12]
 8011030:	065b      	lsls	r3, r3, #25
 8011032:	f53f af2d 	bmi.w	8010e90 <_svfiprintf_r+0x28>
 8011036:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011038:	b01d      	add	sp, #116	; 0x74
 801103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103e:	ab03      	add	r3, sp, #12
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	462a      	mov	r2, r5
 8011044:	4b05      	ldr	r3, [pc, #20]	; (801105c <_svfiprintf_r+0x1f4>)
 8011046:	a904      	add	r1, sp, #16
 8011048:	4638      	mov	r0, r7
 801104a:	f000 f9bd 	bl	80113c8 <_printf_i>
 801104e:	e7eb      	b.n	8011028 <_svfiprintf_r+0x1c0>
 8011050:	080124bc 	.word	0x080124bc
 8011054:	080124c6 	.word	0x080124c6
 8011058:	00000000 	.word	0x00000000
 801105c:	08010db5 	.word	0x08010db5
 8011060:	080124c2 	.word	0x080124c2

08011064 <__sfputc_r>:
 8011064:	6893      	ldr	r3, [r2, #8]
 8011066:	3b01      	subs	r3, #1
 8011068:	2b00      	cmp	r3, #0
 801106a:	b410      	push	{r4}
 801106c:	6093      	str	r3, [r2, #8]
 801106e:	da08      	bge.n	8011082 <__sfputc_r+0x1e>
 8011070:	6994      	ldr	r4, [r2, #24]
 8011072:	42a3      	cmp	r3, r4
 8011074:	db01      	blt.n	801107a <__sfputc_r+0x16>
 8011076:	290a      	cmp	r1, #10
 8011078:	d103      	bne.n	8011082 <__sfputc_r+0x1e>
 801107a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801107e:	f000 bb73 	b.w	8011768 <__swbuf_r>
 8011082:	6813      	ldr	r3, [r2, #0]
 8011084:	1c58      	adds	r0, r3, #1
 8011086:	6010      	str	r0, [r2, #0]
 8011088:	7019      	strb	r1, [r3, #0]
 801108a:	4608      	mov	r0, r1
 801108c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011090:	4770      	bx	lr

08011092 <__sfputs_r>:
 8011092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011094:	4606      	mov	r6, r0
 8011096:	460f      	mov	r7, r1
 8011098:	4614      	mov	r4, r2
 801109a:	18d5      	adds	r5, r2, r3
 801109c:	42ac      	cmp	r4, r5
 801109e:	d101      	bne.n	80110a4 <__sfputs_r+0x12>
 80110a0:	2000      	movs	r0, #0
 80110a2:	e007      	b.n	80110b4 <__sfputs_r+0x22>
 80110a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110a8:	463a      	mov	r2, r7
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ff ffda 	bl	8011064 <__sfputc_r>
 80110b0:	1c43      	adds	r3, r0, #1
 80110b2:	d1f3      	bne.n	801109c <__sfputs_r+0xa>
 80110b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110b8 <_vfiprintf_r>:
 80110b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110bc:	460d      	mov	r5, r1
 80110be:	b09d      	sub	sp, #116	; 0x74
 80110c0:	4614      	mov	r4, r2
 80110c2:	4698      	mov	r8, r3
 80110c4:	4606      	mov	r6, r0
 80110c6:	b118      	cbz	r0, 80110d0 <_vfiprintf_r+0x18>
 80110c8:	6a03      	ldr	r3, [r0, #32]
 80110ca:	b90b      	cbnz	r3, 80110d0 <_vfiprintf_r+0x18>
 80110cc:	f7ff fccc 	bl	8010a68 <__sinit>
 80110d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110d2:	07d9      	lsls	r1, r3, #31
 80110d4:	d405      	bmi.n	80110e2 <_vfiprintf_r+0x2a>
 80110d6:	89ab      	ldrh	r3, [r5, #12]
 80110d8:	059a      	lsls	r2, r3, #22
 80110da:	d402      	bmi.n	80110e2 <_vfiprintf_r+0x2a>
 80110dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110de:	f7ff fe04 	bl	8010cea <__retarget_lock_acquire_recursive>
 80110e2:	89ab      	ldrh	r3, [r5, #12]
 80110e4:	071b      	lsls	r3, r3, #28
 80110e6:	d501      	bpl.n	80110ec <_vfiprintf_r+0x34>
 80110e8:	692b      	ldr	r3, [r5, #16]
 80110ea:	b99b      	cbnz	r3, 8011114 <_vfiprintf_r+0x5c>
 80110ec:	4629      	mov	r1, r5
 80110ee:	4630      	mov	r0, r6
 80110f0:	f000 fb78 	bl	80117e4 <__swsetup_r>
 80110f4:	b170      	cbz	r0, 8011114 <_vfiprintf_r+0x5c>
 80110f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110f8:	07dc      	lsls	r4, r3, #31
 80110fa:	d504      	bpl.n	8011106 <_vfiprintf_r+0x4e>
 80110fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011100:	b01d      	add	sp, #116	; 0x74
 8011102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011106:	89ab      	ldrh	r3, [r5, #12]
 8011108:	0598      	lsls	r0, r3, #22
 801110a:	d4f7      	bmi.n	80110fc <_vfiprintf_r+0x44>
 801110c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801110e:	f7ff fded 	bl	8010cec <__retarget_lock_release_recursive>
 8011112:	e7f3      	b.n	80110fc <_vfiprintf_r+0x44>
 8011114:	2300      	movs	r3, #0
 8011116:	9309      	str	r3, [sp, #36]	; 0x24
 8011118:	2320      	movs	r3, #32
 801111a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801111e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011122:	2330      	movs	r3, #48	; 0x30
 8011124:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80112d8 <_vfiprintf_r+0x220>
 8011128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801112c:	f04f 0901 	mov.w	r9, #1
 8011130:	4623      	mov	r3, r4
 8011132:	469a      	mov	sl, r3
 8011134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011138:	b10a      	cbz	r2, 801113e <_vfiprintf_r+0x86>
 801113a:	2a25      	cmp	r2, #37	; 0x25
 801113c:	d1f9      	bne.n	8011132 <_vfiprintf_r+0x7a>
 801113e:	ebba 0b04 	subs.w	fp, sl, r4
 8011142:	d00b      	beq.n	801115c <_vfiprintf_r+0xa4>
 8011144:	465b      	mov	r3, fp
 8011146:	4622      	mov	r2, r4
 8011148:	4629      	mov	r1, r5
 801114a:	4630      	mov	r0, r6
 801114c:	f7ff ffa1 	bl	8011092 <__sfputs_r>
 8011150:	3001      	adds	r0, #1
 8011152:	f000 80a9 	beq.w	80112a8 <_vfiprintf_r+0x1f0>
 8011156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011158:	445a      	add	r2, fp
 801115a:	9209      	str	r2, [sp, #36]	; 0x24
 801115c:	f89a 3000 	ldrb.w	r3, [sl]
 8011160:	2b00      	cmp	r3, #0
 8011162:	f000 80a1 	beq.w	80112a8 <_vfiprintf_r+0x1f0>
 8011166:	2300      	movs	r3, #0
 8011168:	f04f 32ff 	mov.w	r2, #4294967295
 801116c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011170:	f10a 0a01 	add.w	sl, sl, #1
 8011174:	9304      	str	r3, [sp, #16]
 8011176:	9307      	str	r3, [sp, #28]
 8011178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801117c:	931a      	str	r3, [sp, #104]	; 0x68
 801117e:	4654      	mov	r4, sl
 8011180:	2205      	movs	r2, #5
 8011182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011186:	4854      	ldr	r0, [pc, #336]	; (80112d8 <_vfiprintf_r+0x220>)
 8011188:	f7f4 fdd2 	bl	8005d30 <memchr>
 801118c:	9a04      	ldr	r2, [sp, #16]
 801118e:	b9d8      	cbnz	r0, 80111c8 <_vfiprintf_r+0x110>
 8011190:	06d1      	lsls	r1, r2, #27
 8011192:	bf44      	itt	mi
 8011194:	2320      	movmi	r3, #32
 8011196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801119a:	0713      	lsls	r3, r2, #28
 801119c:	bf44      	itt	mi
 801119e:	232b      	movmi	r3, #43	; 0x2b
 80111a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111a4:	f89a 3000 	ldrb.w	r3, [sl]
 80111a8:	2b2a      	cmp	r3, #42	; 0x2a
 80111aa:	d015      	beq.n	80111d8 <_vfiprintf_r+0x120>
 80111ac:	9a07      	ldr	r2, [sp, #28]
 80111ae:	4654      	mov	r4, sl
 80111b0:	2000      	movs	r0, #0
 80111b2:	f04f 0c0a 	mov.w	ip, #10
 80111b6:	4621      	mov	r1, r4
 80111b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111bc:	3b30      	subs	r3, #48	; 0x30
 80111be:	2b09      	cmp	r3, #9
 80111c0:	d94d      	bls.n	801125e <_vfiprintf_r+0x1a6>
 80111c2:	b1b0      	cbz	r0, 80111f2 <_vfiprintf_r+0x13a>
 80111c4:	9207      	str	r2, [sp, #28]
 80111c6:	e014      	b.n	80111f2 <_vfiprintf_r+0x13a>
 80111c8:	eba0 0308 	sub.w	r3, r0, r8
 80111cc:	fa09 f303 	lsl.w	r3, r9, r3
 80111d0:	4313      	orrs	r3, r2
 80111d2:	9304      	str	r3, [sp, #16]
 80111d4:	46a2      	mov	sl, r4
 80111d6:	e7d2      	b.n	801117e <_vfiprintf_r+0xc6>
 80111d8:	9b03      	ldr	r3, [sp, #12]
 80111da:	1d19      	adds	r1, r3, #4
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	9103      	str	r1, [sp, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	bfbb      	ittet	lt
 80111e4:	425b      	neglt	r3, r3
 80111e6:	f042 0202 	orrlt.w	r2, r2, #2
 80111ea:	9307      	strge	r3, [sp, #28]
 80111ec:	9307      	strlt	r3, [sp, #28]
 80111ee:	bfb8      	it	lt
 80111f0:	9204      	strlt	r2, [sp, #16]
 80111f2:	7823      	ldrb	r3, [r4, #0]
 80111f4:	2b2e      	cmp	r3, #46	; 0x2e
 80111f6:	d10c      	bne.n	8011212 <_vfiprintf_r+0x15a>
 80111f8:	7863      	ldrb	r3, [r4, #1]
 80111fa:	2b2a      	cmp	r3, #42	; 0x2a
 80111fc:	d134      	bne.n	8011268 <_vfiprintf_r+0x1b0>
 80111fe:	9b03      	ldr	r3, [sp, #12]
 8011200:	1d1a      	adds	r2, r3, #4
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	9203      	str	r2, [sp, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	bfb8      	it	lt
 801120a:	f04f 33ff 	movlt.w	r3, #4294967295
 801120e:	3402      	adds	r4, #2
 8011210:	9305      	str	r3, [sp, #20]
 8011212:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80112e8 <_vfiprintf_r+0x230>
 8011216:	7821      	ldrb	r1, [r4, #0]
 8011218:	2203      	movs	r2, #3
 801121a:	4650      	mov	r0, sl
 801121c:	f7f4 fd88 	bl	8005d30 <memchr>
 8011220:	b138      	cbz	r0, 8011232 <_vfiprintf_r+0x17a>
 8011222:	9b04      	ldr	r3, [sp, #16]
 8011224:	eba0 000a 	sub.w	r0, r0, sl
 8011228:	2240      	movs	r2, #64	; 0x40
 801122a:	4082      	lsls	r2, r0
 801122c:	4313      	orrs	r3, r2
 801122e:	3401      	adds	r4, #1
 8011230:	9304      	str	r3, [sp, #16]
 8011232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011236:	4829      	ldr	r0, [pc, #164]	; (80112dc <_vfiprintf_r+0x224>)
 8011238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801123c:	2206      	movs	r2, #6
 801123e:	f7f4 fd77 	bl	8005d30 <memchr>
 8011242:	2800      	cmp	r0, #0
 8011244:	d03f      	beq.n	80112c6 <_vfiprintf_r+0x20e>
 8011246:	4b26      	ldr	r3, [pc, #152]	; (80112e0 <_vfiprintf_r+0x228>)
 8011248:	bb1b      	cbnz	r3, 8011292 <_vfiprintf_r+0x1da>
 801124a:	9b03      	ldr	r3, [sp, #12]
 801124c:	3307      	adds	r3, #7
 801124e:	f023 0307 	bic.w	r3, r3, #7
 8011252:	3308      	adds	r3, #8
 8011254:	9303      	str	r3, [sp, #12]
 8011256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011258:	443b      	add	r3, r7
 801125a:	9309      	str	r3, [sp, #36]	; 0x24
 801125c:	e768      	b.n	8011130 <_vfiprintf_r+0x78>
 801125e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011262:	460c      	mov	r4, r1
 8011264:	2001      	movs	r0, #1
 8011266:	e7a6      	b.n	80111b6 <_vfiprintf_r+0xfe>
 8011268:	2300      	movs	r3, #0
 801126a:	3401      	adds	r4, #1
 801126c:	9305      	str	r3, [sp, #20]
 801126e:	4619      	mov	r1, r3
 8011270:	f04f 0c0a 	mov.w	ip, #10
 8011274:	4620      	mov	r0, r4
 8011276:	f810 2b01 	ldrb.w	r2, [r0], #1
 801127a:	3a30      	subs	r2, #48	; 0x30
 801127c:	2a09      	cmp	r2, #9
 801127e:	d903      	bls.n	8011288 <_vfiprintf_r+0x1d0>
 8011280:	2b00      	cmp	r3, #0
 8011282:	d0c6      	beq.n	8011212 <_vfiprintf_r+0x15a>
 8011284:	9105      	str	r1, [sp, #20]
 8011286:	e7c4      	b.n	8011212 <_vfiprintf_r+0x15a>
 8011288:	fb0c 2101 	mla	r1, ip, r1, r2
 801128c:	4604      	mov	r4, r0
 801128e:	2301      	movs	r3, #1
 8011290:	e7f0      	b.n	8011274 <_vfiprintf_r+0x1bc>
 8011292:	ab03      	add	r3, sp, #12
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	462a      	mov	r2, r5
 8011298:	4b12      	ldr	r3, [pc, #72]	; (80112e4 <_vfiprintf_r+0x22c>)
 801129a:	a904      	add	r1, sp, #16
 801129c:	4630      	mov	r0, r6
 801129e:	f3af 8000 	nop.w
 80112a2:	4607      	mov	r7, r0
 80112a4:	1c78      	adds	r0, r7, #1
 80112a6:	d1d6      	bne.n	8011256 <_vfiprintf_r+0x19e>
 80112a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112aa:	07d9      	lsls	r1, r3, #31
 80112ac:	d405      	bmi.n	80112ba <_vfiprintf_r+0x202>
 80112ae:	89ab      	ldrh	r3, [r5, #12]
 80112b0:	059a      	lsls	r2, r3, #22
 80112b2:	d402      	bmi.n	80112ba <_vfiprintf_r+0x202>
 80112b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112b6:	f7ff fd19 	bl	8010cec <__retarget_lock_release_recursive>
 80112ba:	89ab      	ldrh	r3, [r5, #12]
 80112bc:	065b      	lsls	r3, r3, #25
 80112be:	f53f af1d 	bmi.w	80110fc <_vfiprintf_r+0x44>
 80112c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112c4:	e71c      	b.n	8011100 <_vfiprintf_r+0x48>
 80112c6:	ab03      	add	r3, sp, #12
 80112c8:	9300      	str	r3, [sp, #0]
 80112ca:	462a      	mov	r2, r5
 80112cc:	4b05      	ldr	r3, [pc, #20]	; (80112e4 <_vfiprintf_r+0x22c>)
 80112ce:	a904      	add	r1, sp, #16
 80112d0:	4630      	mov	r0, r6
 80112d2:	f000 f879 	bl	80113c8 <_printf_i>
 80112d6:	e7e4      	b.n	80112a2 <_vfiprintf_r+0x1ea>
 80112d8:	080124bc 	.word	0x080124bc
 80112dc:	080124c6 	.word	0x080124c6
 80112e0:	00000000 	.word	0x00000000
 80112e4:	08011093 	.word	0x08011093
 80112e8:	080124c2 	.word	0x080124c2

080112ec <_printf_common>:
 80112ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f0:	4616      	mov	r6, r2
 80112f2:	4699      	mov	r9, r3
 80112f4:	688a      	ldr	r2, [r1, #8]
 80112f6:	690b      	ldr	r3, [r1, #16]
 80112f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112fc:	4293      	cmp	r3, r2
 80112fe:	bfb8      	it	lt
 8011300:	4613      	movlt	r3, r2
 8011302:	6033      	str	r3, [r6, #0]
 8011304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011308:	4607      	mov	r7, r0
 801130a:	460c      	mov	r4, r1
 801130c:	b10a      	cbz	r2, 8011312 <_printf_common+0x26>
 801130e:	3301      	adds	r3, #1
 8011310:	6033      	str	r3, [r6, #0]
 8011312:	6823      	ldr	r3, [r4, #0]
 8011314:	0699      	lsls	r1, r3, #26
 8011316:	bf42      	ittt	mi
 8011318:	6833      	ldrmi	r3, [r6, #0]
 801131a:	3302      	addmi	r3, #2
 801131c:	6033      	strmi	r3, [r6, #0]
 801131e:	6825      	ldr	r5, [r4, #0]
 8011320:	f015 0506 	ands.w	r5, r5, #6
 8011324:	d106      	bne.n	8011334 <_printf_common+0x48>
 8011326:	f104 0a19 	add.w	sl, r4, #25
 801132a:	68e3      	ldr	r3, [r4, #12]
 801132c:	6832      	ldr	r2, [r6, #0]
 801132e:	1a9b      	subs	r3, r3, r2
 8011330:	42ab      	cmp	r3, r5
 8011332:	dc26      	bgt.n	8011382 <_printf_common+0x96>
 8011334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011338:	1e13      	subs	r3, r2, #0
 801133a:	6822      	ldr	r2, [r4, #0]
 801133c:	bf18      	it	ne
 801133e:	2301      	movne	r3, #1
 8011340:	0692      	lsls	r2, r2, #26
 8011342:	d42b      	bmi.n	801139c <_printf_common+0xb0>
 8011344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011348:	4649      	mov	r1, r9
 801134a:	4638      	mov	r0, r7
 801134c:	47c0      	blx	r8
 801134e:	3001      	adds	r0, #1
 8011350:	d01e      	beq.n	8011390 <_printf_common+0xa4>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	6922      	ldr	r2, [r4, #16]
 8011356:	f003 0306 	and.w	r3, r3, #6
 801135a:	2b04      	cmp	r3, #4
 801135c:	bf02      	ittt	eq
 801135e:	68e5      	ldreq	r5, [r4, #12]
 8011360:	6833      	ldreq	r3, [r6, #0]
 8011362:	1aed      	subeq	r5, r5, r3
 8011364:	68a3      	ldr	r3, [r4, #8]
 8011366:	bf0c      	ite	eq
 8011368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801136c:	2500      	movne	r5, #0
 801136e:	4293      	cmp	r3, r2
 8011370:	bfc4      	itt	gt
 8011372:	1a9b      	subgt	r3, r3, r2
 8011374:	18ed      	addgt	r5, r5, r3
 8011376:	2600      	movs	r6, #0
 8011378:	341a      	adds	r4, #26
 801137a:	42b5      	cmp	r5, r6
 801137c:	d11a      	bne.n	80113b4 <_printf_common+0xc8>
 801137e:	2000      	movs	r0, #0
 8011380:	e008      	b.n	8011394 <_printf_common+0xa8>
 8011382:	2301      	movs	r3, #1
 8011384:	4652      	mov	r2, sl
 8011386:	4649      	mov	r1, r9
 8011388:	4638      	mov	r0, r7
 801138a:	47c0      	blx	r8
 801138c:	3001      	adds	r0, #1
 801138e:	d103      	bne.n	8011398 <_printf_common+0xac>
 8011390:	f04f 30ff 	mov.w	r0, #4294967295
 8011394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011398:	3501      	adds	r5, #1
 801139a:	e7c6      	b.n	801132a <_printf_common+0x3e>
 801139c:	18e1      	adds	r1, r4, r3
 801139e:	1c5a      	adds	r2, r3, #1
 80113a0:	2030      	movs	r0, #48	; 0x30
 80113a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113a6:	4422      	add	r2, r4
 80113a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113b0:	3302      	adds	r3, #2
 80113b2:	e7c7      	b.n	8011344 <_printf_common+0x58>
 80113b4:	2301      	movs	r3, #1
 80113b6:	4622      	mov	r2, r4
 80113b8:	4649      	mov	r1, r9
 80113ba:	4638      	mov	r0, r7
 80113bc:	47c0      	blx	r8
 80113be:	3001      	adds	r0, #1
 80113c0:	d0e6      	beq.n	8011390 <_printf_common+0xa4>
 80113c2:	3601      	adds	r6, #1
 80113c4:	e7d9      	b.n	801137a <_printf_common+0x8e>
	...

080113c8 <_printf_i>:
 80113c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113cc:	7e0f      	ldrb	r7, [r1, #24]
 80113ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113d0:	2f78      	cmp	r7, #120	; 0x78
 80113d2:	4691      	mov	r9, r2
 80113d4:	4680      	mov	r8, r0
 80113d6:	460c      	mov	r4, r1
 80113d8:	469a      	mov	sl, r3
 80113da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80113de:	d807      	bhi.n	80113f0 <_printf_i+0x28>
 80113e0:	2f62      	cmp	r7, #98	; 0x62
 80113e2:	d80a      	bhi.n	80113fa <_printf_i+0x32>
 80113e4:	2f00      	cmp	r7, #0
 80113e6:	f000 80d4 	beq.w	8011592 <_printf_i+0x1ca>
 80113ea:	2f58      	cmp	r7, #88	; 0x58
 80113ec:	f000 80c0 	beq.w	8011570 <_printf_i+0x1a8>
 80113f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80113f8:	e03a      	b.n	8011470 <_printf_i+0xa8>
 80113fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80113fe:	2b15      	cmp	r3, #21
 8011400:	d8f6      	bhi.n	80113f0 <_printf_i+0x28>
 8011402:	a101      	add	r1, pc, #4	; (adr r1, 8011408 <_printf_i+0x40>)
 8011404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011408:	08011461 	.word	0x08011461
 801140c:	08011475 	.word	0x08011475
 8011410:	080113f1 	.word	0x080113f1
 8011414:	080113f1 	.word	0x080113f1
 8011418:	080113f1 	.word	0x080113f1
 801141c:	080113f1 	.word	0x080113f1
 8011420:	08011475 	.word	0x08011475
 8011424:	080113f1 	.word	0x080113f1
 8011428:	080113f1 	.word	0x080113f1
 801142c:	080113f1 	.word	0x080113f1
 8011430:	080113f1 	.word	0x080113f1
 8011434:	08011579 	.word	0x08011579
 8011438:	080114a1 	.word	0x080114a1
 801143c:	08011533 	.word	0x08011533
 8011440:	080113f1 	.word	0x080113f1
 8011444:	080113f1 	.word	0x080113f1
 8011448:	0801159b 	.word	0x0801159b
 801144c:	080113f1 	.word	0x080113f1
 8011450:	080114a1 	.word	0x080114a1
 8011454:	080113f1 	.word	0x080113f1
 8011458:	080113f1 	.word	0x080113f1
 801145c:	0801153b 	.word	0x0801153b
 8011460:	682b      	ldr	r3, [r5, #0]
 8011462:	1d1a      	adds	r2, r3, #4
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	602a      	str	r2, [r5, #0]
 8011468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801146c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011470:	2301      	movs	r3, #1
 8011472:	e09f      	b.n	80115b4 <_printf_i+0x1ec>
 8011474:	6820      	ldr	r0, [r4, #0]
 8011476:	682b      	ldr	r3, [r5, #0]
 8011478:	0607      	lsls	r7, r0, #24
 801147a:	f103 0104 	add.w	r1, r3, #4
 801147e:	6029      	str	r1, [r5, #0]
 8011480:	d501      	bpl.n	8011486 <_printf_i+0xbe>
 8011482:	681e      	ldr	r6, [r3, #0]
 8011484:	e003      	b.n	801148e <_printf_i+0xc6>
 8011486:	0646      	lsls	r6, r0, #25
 8011488:	d5fb      	bpl.n	8011482 <_printf_i+0xba>
 801148a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801148e:	2e00      	cmp	r6, #0
 8011490:	da03      	bge.n	801149a <_printf_i+0xd2>
 8011492:	232d      	movs	r3, #45	; 0x2d
 8011494:	4276      	negs	r6, r6
 8011496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801149a:	485a      	ldr	r0, [pc, #360]	; (8011604 <_printf_i+0x23c>)
 801149c:	230a      	movs	r3, #10
 801149e:	e012      	b.n	80114c6 <_printf_i+0xfe>
 80114a0:	682b      	ldr	r3, [r5, #0]
 80114a2:	6820      	ldr	r0, [r4, #0]
 80114a4:	1d19      	adds	r1, r3, #4
 80114a6:	6029      	str	r1, [r5, #0]
 80114a8:	0605      	lsls	r5, r0, #24
 80114aa:	d501      	bpl.n	80114b0 <_printf_i+0xe8>
 80114ac:	681e      	ldr	r6, [r3, #0]
 80114ae:	e002      	b.n	80114b6 <_printf_i+0xee>
 80114b0:	0641      	lsls	r1, r0, #25
 80114b2:	d5fb      	bpl.n	80114ac <_printf_i+0xe4>
 80114b4:	881e      	ldrh	r6, [r3, #0]
 80114b6:	4853      	ldr	r0, [pc, #332]	; (8011604 <_printf_i+0x23c>)
 80114b8:	2f6f      	cmp	r7, #111	; 0x6f
 80114ba:	bf0c      	ite	eq
 80114bc:	2308      	moveq	r3, #8
 80114be:	230a      	movne	r3, #10
 80114c0:	2100      	movs	r1, #0
 80114c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114c6:	6865      	ldr	r5, [r4, #4]
 80114c8:	60a5      	str	r5, [r4, #8]
 80114ca:	2d00      	cmp	r5, #0
 80114cc:	bfa2      	ittt	ge
 80114ce:	6821      	ldrge	r1, [r4, #0]
 80114d0:	f021 0104 	bicge.w	r1, r1, #4
 80114d4:	6021      	strge	r1, [r4, #0]
 80114d6:	b90e      	cbnz	r6, 80114dc <_printf_i+0x114>
 80114d8:	2d00      	cmp	r5, #0
 80114da:	d04b      	beq.n	8011574 <_printf_i+0x1ac>
 80114dc:	4615      	mov	r5, r2
 80114de:	fbb6 f1f3 	udiv	r1, r6, r3
 80114e2:	fb03 6711 	mls	r7, r3, r1, r6
 80114e6:	5dc7      	ldrb	r7, [r0, r7]
 80114e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80114ec:	4637      	mov	r7, r6
 80114ee:	42bb      	cmp	r3, r7
 80114f0:	460e      	mov	r6, r1
 80114f2:	d9f4      	bls.n	80114de <_printf_i+0x116>
 80114f4:	2b08      	cmp	r3, #8
 80114f6:	d10b      	bne.n	8011510 <_printf_i+0x148>
 80114f8:	6823      	ldr	r3, [r4, #0]
 80114fa:	07de      	lsls	r6, r3, #31
 80114fc:	d508      	bpl.n	8011510 <_printf_i+0x148>
 80114fe:	6923      	ldr	r3, [r4, #16]
 8011500:	6861      	ldr	r1, [r4, #4]
 8011502:	4299      	cmp	r1, r3
 8011504:	bfde      	ittt	le
 8011506:	2330      	movle	r3, #48	; 0x30
 8011508:	f805 3c01 	strble.w	r3, [r5, #-1]
 801150c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011510:	1b52      	subs	r2, r2, r5
 8011512:	6122      	str	r2, [r4, #16]
 8011514:	f8cd a000 	str.w	sl, [sp]
 8011518:	464b      	mov	r3, r9
 801151a:	aa03      	add	r2, sp, #12
 801151c:	4621      	mov	r1, r4
 801151e:	4640      	mov	r0, r8
 8011520:	f7ff fee4 	bl	80112ec <_printf_common>
 8011524:	3001      	adds	r0, #1
 8011526:	d14a      	bne.n	80115be <_printf_i+0x1f6>
 8011528:	f04f 30ff 	mov.w	r0, #4294967295
 801152c:	b004      	add	sp, #16
 801152e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011532:	6823      	ldr	r3, [r4, #0]
 8011534:	f043 0320 	orr.w	r3, r3, #32
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	4833      	ldr	r0, [pc, #204]	; (8011608 <_printf_i+0x240>)
 801153c:	2778      	movs	r7, #120	; 0x78
 801153e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	6829      	ldr	r1, [r5, #0]
 8011546:	061f      	lsls	r7, r3, #24
 8011548:	f851 6b04 	ldr.w	r6, [r1], #4
 801154c:	d402      	bmi.n	8011554 <_printf_i+0x18c>
 801154e:	065f      	lsls	r7, r3, #25
 8011550:	bf48      	it	mi
 8011552:	b2b6      	uxthmi	r6, r6
 8011554:	07df      	lsls	r7, r3, #31
 8011556:	bf48      	it	mi
 8011558:	f043 0320 	orrmi.w	r3, r3, #32
 801155c:	6029      	str	r1, [r5, #0]
 801155e:	bf48      	it	mi
 8011560:	6023      	strmi	r3, [r4, #0]
 8011562:	b91e      	cbnz	r6, 801156c <_printf_i+0x1a4>
 8011564:	6823      	ldr	r3, [r4, #0]
 8011566:	f023 0320 	bic.w	r3, r3, #32
 801156a:	6023      	str	r3, [r4, #0]
 801156c:	2310      	movs	r3, #16
 801156e:	e7a7      	b.n	80114c0 <_printf_i+0xf8>
 8011570:	4824      	ldr	r0, [pc, #144]	; (8011604 <_printf_i+0x23c>)
 8011572:	e7e4      	b.n	801153e <_printf_i+0x176>
 8011574:	4615      	mov	r5, r2
 8011576:	e7bd      	b.n	80114f4 <_printf_i+0x12c>
 8011578:	682b      	ldr	r3, [r5, #0]
 801157a:	6826      	ldr	r6, [r4, #0]
 801157c:	6961      	ldr	r1, [r4, #20]
 801157e:	1d18      	adds	r0, r3, #4
 8011580:	6028      	str	r0, [r5, #0]
 8011582:	0635      	lsls	r5, r6, #24
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	d501      	bpl.n	801158c <_printf_i+0x1c4>
 8011588:	6019      	str	r1, [r3, #0]
 801158a:	e002      	b.n	8011592 <_printf_i+0x1ca>
 801158c:	0670      	lsls	r0, r6, #25
 801158e:	d5fb      	bpl.n	8011588 <_printf_i+0x1c0>
 8011590:	8019      	strh	r1, [r3, #0]
 8011592:	2300      	movs	r3, #0
 8011594:	6123      	str	r3, [r4, #16]
 8011596:	4615      	mov	r5, r2
 8011598:	e7bc      	b.n	8011514 <_printf_i+0x14c>
 801159a:	682b      	ldr	r3, [r5, #0]
 801159c:	1d1a      	adds	r2, r3, #4
 801159e:	602a      	str	r2, [r5, #0]
 80115a0:	681d      	ldr	r5, [r3, #0]
 80115a2:	6862      	ldr	r2, [r4, #4]
 80115a4:	2100      	movs	r1, #0
 80115a6:	4628      	mov	r0, r5
 80115a8:	f7f4 fbc2 	bl	8005d30 <memchr>
 80115ac:	b108      	cbz	r0, 80115b2 <_printf_i+0x1ea>
 80115ae:	1b40      	subs	r0, r0, r5
 80115b0:	6060      	str	r0, [r4, #4]
 80115b2:	6863      	ldr	r3, [r4, #4]
 80115b4:	6123      	str	r3, [r4, #16]
 80115b6:	2300      	movs	r3, #0
 80115b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115bc:	e7aa      	b.n	8011514 <_printf_i+0x14c>
 80115be:	6923      	ldr	r3, [r4, #16]
 80115c0:	462a      	mov	r2, r5
 80115c2:	4649      	mov	r1, r9
 80115c4:	4640      	mov	r0, r8
 80115c6:	47d0      	blx	sl
 80115c8:	3001      	adds	r0, #1
 80115ca:	d0ad      	beq.n	8011528 <_printf_i+0x160>
 80115cc:	6823      	ldr	r3, [r4, #0]
 80115ce:	079b      	lsls	r3, r3, #30
 80115d0:	d413      	bmi.n	80115fa <_printf_i+0x232>
 80115d2:	68e0      	ldr	r0, [r4, #12]
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	4298      	cmp	r0, r3
 80115d8:	bfb8      	it	lt
 80115da:	4618      	movlt	r0, r3
 80115dc:	e7a6      	b.n	801152c <_printf_i+0x164>
 80115de:	2301      	movs	r3, #1
 80115e0:	4632      	mov	r2, r6
 80115e2:	4649      	mov	r1, r9
 80115e4:	4640      	mov	r0, r8
 80115e6:	47d0      	blx	sl
 80115e8:	3001      	adds	r0, #1
 80115ea:	d09d      	beq.n	8011528 <_printf_i+0x160>
 80115ec:	3501      	adds	r5, #1
 80115ee:	68e3      	ldr	r3, [r4, #12]
 80115f0:	9903      	ldr	r1, [sp, #12]
 80115f2:	1a5b      	subs	r3, r3, r1
 80115f4:	42ab      	cmp	r3, r5
 80115f6:	dcf2      	bgt.n	80115de <_printf_i+0x216>
 80115f8:	e7eb      	b.n	80115d2 <_printf_i+0x20a>
 80115fa:	2500      	movs	r5, #0
 80115fc:	f104 0619 	add.w	r6, r4, #25
 8011600:	e7f5      	b.n	80115ee <_printf_i+0x226>
 8011602:	bf00      	nop
 8011604:	080124cd 	.word	0x080124cd
 8011608:	080124de 	.word	0x080124de

0801160c <__sflush_r>:
 801160c:	898a      	ldrh	r2, [r1, #12]
 801160e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011612:	4605      	mov	r5, r0
 8011614:	0710      	lsls	r0, r2, #28
 8011616:	460c      	mov	r4, r1
 8011618:	d458      	bmi.n	80116cc <__sflush_r+0xc0>
 801161a:	684b      	ldr	r3, [r1, #4]
 801161c:	2b00      	cmp	r3, #0
 801161e:	dc05      	bgt.n	801162c <__sflush_r+0x20>
 8011620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011622:	2b00      	cmp	r3, #0
 8011624:	dc02      	bgt.n	801162c <__sflush_r+0x20>
 8011626:	2000      	movs	r0, #0
 8011628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801162e:	2e00      	cmp	r6, #0
 8011630:	d0f9      	beq.n	8011626 <__sflush_r+0x1a>
 8011632:	2300      	movs	r3, #0
 8011634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011638:	682f      	ldr	r7, [r5, #0]
 801163a:	6a21      	ldr	r1, [r4, #32]
 801163c:	602b      	str	r3, [r5, #0]
 801163e:	d032      	beq.n	80116a6 <__sflush_r+0x9a>
 8011640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	075a      	lsls	r2, r3, #29
 8011646:	d505      	bpl.n	8011654 <__sflush_r+0x48>
 8011648:	6863      	ldr	r3, [r4, #4]
 801164a:	1ac0      	subs	r0, r0, r3
 801164c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801164e:	b10b      	cbz	r3, 8011654 <__sflush_r+0x48>
 8011650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011652:	1ac0      	subs	r0, r0, r3
 8011654:	2300      	movs	r3, #0
 8011656:	4602      	mov	r2, r0
 8011658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801165a:	6a21      	ldr	r1, [r4, #32]
 801165c:	4628      	mov	r0, r5
 801165e:	47b0      	blx	r6
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	89a3      	ldrh	r3, [r4, #12]
 8011664:	d106      	bne.n	8011674 <__sflush_r+0x68>
 8011666:	6829      	ldr	r1, [r5, #0]
 8011668:	291d      	cmp	r1, #29
 801166a:	d82b      	bhi.n	80116c4 <__sflush_r+0xb8>
 801166c:	4a29      	ldr	r2, [pc, #164]	; (8011714 <__sflush_r+0x108>)
 801166e:	410a      	asrs	r2, r1
 8011670:	07d6      	lsls	r6, r2, #31
 8011672:	d427      	bmi.n	80116c4 <__sflush_r+0xb8>
 8011674:	2200      	movs	r2, #0
 8011676:	6062      	str	r2, [r4, #4]
 8011678:	04d9      	lsls	r1, r3, #19
 801167a:	6922      	ldr	r2, [r4, #16]
 801167c:	6022      	str	r2, [r4, #0]
 801167e:	d504      	bpl.n	801168a <__sflush_r+0x7e>
 8011680:	1c42      	adds	r2, r0, #1
 8011682:	d101      	bne.n	8011688 <__sflush_r+0x7c>
 8011684:	682b      	ldr	r3, [r5, #0]
 8011686:	b903      	cbnz	r3, 801168a <__sflush_r+0x7e>
 8011688:	6560      	str	r0, [r4, #84]	; 0x54
 801168a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801168c:	602f      	str	r7, [r5, #0]
 801168e:	2900      	cmp	r1, #0
 8011690:	d0c9      	beq.n	8011626 <__sflush_r+0x1a>
 8011692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011696:	4299      	cmp	r1, r3
 8011698:	d002      	beq.n	80116a0 <__sflush_r+0x94>
 801169a:	4628      	mov	r0, r5
 801169c:	f7ff fb3e 	bl	8010d1c <_free_r>
 80116a0:	2000      	movs	r0, #0
 80116a2:	6360      	str	r0, [r4, #52]	; 0x34
 80116a4:	e7c0      	b.n	8011628 <__sflush_r+0x1c>
 80116a6:	2301      	movs	r3, #1
 80116a8:	4628      	mov	r0, r5
 80116aa:	47b0      	blx	r6
 80116ac:	1c41      	adds	r1, r0, #1
 80116ae:	d1c8      	bne.n	8011642 <__sflush_r+0x36>
 80116b0:	682b      	ldr	r3, [r5, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d0c5      	beq.n	8011642 <__sflush_r+0x36>
 80116b6:	2b1d      	cmp	r3, #29
 80116b8:	d001      	beq.n	80116be <__sflush_r+0xb2>
 80116ba:	2b16      	cmp	r3, #22
 80116bc:	d101      	bne.n	80116c2 <__sflush_r+0xb6>
 80116be:	602f      	str	r7, [r5, #0]
 80116c0:	e7b1      	b.n	8011626 <__sflush_r+0x1a>
 80116c2:	89a3      	ldrh	r3, [r4, #12]
 80116c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116c8:	81a3      	strh	r3, [r4, #12]
 80116ca:	e7ad      	b.n	8011628 <__sflush_r+0x1c>
 80116cc:	690f      	ldr	r7, [r1, #16]
 80116ce:	2f00      	cmp	r7, #0
 80116d0:	d0a9      	beq.n	8011626 <__sflush_r+0x1a>
 80116d2:	0793      	lsls	r3, r2, #30
 80116d4:	680e      	ldr	r6, [r1, #0]
 80116d6:	bf08      	it	eq
 80116d8:	694b      	ldreq	r3, [r1, #20]
 80116da:	600f      	str	r7, [r1, #0]
 80116dc:	bf18      	it	ne
 80116de:	2300      	movne	r3, #0
 80116e0:	eba6 0807 	sub.w	r8, r6, r7
 80116e4:	608b      	str	r3, [r1, #8]
 80116e6:	f1b8 0f00 	cmp.w	r8, #0
 80116ea:	dd9c      	ble.n	8011626 <__sflush_r+0x1a>
 80116ec:	6a21      	ldr	r1, [r4, #32]
 80116ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116f0:	4643      	mov	r3, r8
 80116f2:	463a      	mov	r2, r7
 80116f4:	4628      	mov	r0, r5
 80116f6:	47b0      	blx	r6
 80116f8:	2800      	cmp	r0, #0
 80116fa:	dc06      	bgt.n	801170a <__sflush_r+0xfe>
 80116fc:	89a3      	ldrh	r3, [r4, #12]
 80116fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	f04f 30ff 	mov.w	r0, #4294967295
 8011708:	e78e      	b.n	8011628 <__sflush_r+0x1c>
 801170a:	4407      	add	r7, r0
 801170c:	eba8 0800 	sub.w	r8, r8, r0
 8011710:	e7e9      	b.n	80116e6 <__sflush_r+0xda>
 8011712:	bf00      	nop
 8011714:	dfbffffe 	.word	0xdfbffffe

08011718 <_fflush_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	690b      	ldr	r3, [r1, #16]
 801171c:	4605      	mov	r5, r0
 801171e:	460c      	mov	r4, r1
 8011720:	b913      	cbnz	r3, 8011728 <_fflush_r+0x10>
 8011722:	2500      	movs	r5, #0
 8011724:	4628      	mov	r0, r5
 8011726:	bd38      	pop	{r3, r4, r5, pc}
 8011728:	b118      	cbz	r0, 8011732 <_fflush_r+0x1a>
 801172a:	6a03      	ldr	r3, [r0, #32]
 801172c:	b90b      	cbnz	r3, 8011732 <_fflush_r+0x1a>
 801172e:	f7ff f99b 	bl	8010a68 <__sinit>
 8011732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d0f3      	beq.n	8011722 <_fflush_r+0xa>
 801173a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801173c:	07d0      	lsls	r0, r2, #31
 801173e:	d404      	bmi.n	801174a <_fflush_r+0x32>
 8011740:	0599      	lsls	r1, r3, #22
 8011742:	d402      	bmi.n	801174a <_fflush_r+0x32>
 8011744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011746:	f7ff fad0 	bl	8010cea <__retarget_lock_acquire_recursive>
 801174a:	4628      	mov	r0, r5
 801174c:	4621      	mov	r1, r4
 801174e:	f7ff ff5d 	bl	801160c <__sflush_r>
 8011752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011754:	07da      	lsls	r2, r3, #31
 8011756:	4605      	mov	r5, r0
 8011758:	d4e4      	bmi.n	8011724 <_fflush_r+0xc>
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	059b      	lsls	r3, r3, #22
 801175e:	d4e1      	bmi.n	8011724 <_fflush_r+0xc>
 8011760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011762:	f7ff fac3 	bl	8010cec <__retarget_lock_release_recursive>
 8011766:	e7dd      	b.n	8011724 <_fflush_r+0xc>

08011768 <__swbuf_r>:
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176a:	460e      	mov	r6, r1
 801176c:	4614      	mov	r4, r2
 801176e:	4605      	mov	r5, r0
 8011770:	b118      	cbz	r0, 801177a <__swbuf_r+0x12>
 8011772:	6a03      	ldr	r3, [r0, #32]
 8011774:	b90b      	cbnz	r3, 801177a <__swbuf_r+0x12>
 8011776:	f7ff f977 	bl	8010a68 <__sinit>
 801177a:	69a3      	ldr	r3, [r4, #24]
 801177c:	60a3      	str	r3, [r4, #8]
 801177e:	89a3      	ldrh	r3, [r4, #12]
 8011780:	071a      	lsls	r2, r3, #28
 8011782:	d525      	bpl.n	80117d0 <__swbuf_r+0x68>
 8011784:	6923      	ldr	r3, [r4, #16]
 8011786:	b31b      	cbz	r3, 80117d0 <__swbuf_r+0x68>
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	6922      	ldr	r2, [r4, #16]
 801178c:	1a98      	subs	r0, r3, r2
 801178e:	6963      	ldr	r3, [r4, #20]
 8011790:	b2f6      	uxtb	r6, r6
 8011792:	4283      	cmp	r3, r0
 8011794:	4637      	mov	r7, r6
 8011796:	dc04      	bgt.n	80117a2 <__swbuf_r+0x3a>
 8011798:	4621      	mov	r1, r4
 801179a:	4628      	mov	r0, r5
 801179c:	f7ff ffbc 	bl	8011718 <_fflush_r>
 80117a0:	b9e0      	cbnz	r0, 80117dc <__swbuf_r+0x74>
 80117a2:	68a3      	ldr	r3, [r4, #8]
 80117a4:	3b01      	subs	r3, #1
 80117a6:	60a3      	str	r3, [r4, #8]
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	6022      	str	r2, [r4, #0]
 80117ae:	701e      	strb	r6, [r3, #0]
 80117b0:	6962      	ldr	r2, [r4, #20]
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d004      	beq.n	80117c2 <__swbuf_r+0x5a>
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	07db      	lsls	r3, r3, #31
 80117bc:	d506      	bpl.n	80117cc <__swbuf_r+0x64>
 80117be:	2e0a      	cmp	r6, #10
 80117c0:	d104      	bne.n	80117cc <__swbuf_r+0x64>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4628      	mov	r0, r5
 80117c6:	f7ff ffa7 	bl	8011718 <_fflush_r>
 80117ca:	b938      	cbnz	r0, 80117dc <__swbuf_r+0x74>
 80117cc:	4638      	mov	r0, r7
 80117ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117d0:	4621      	mov	r1, r4
 80117d2:	4628      	mov	r0, r5
 80117d4:	f000 f806 	bl	80117e4 <__swsetup_r>
 80117d8:	2800      	cmp	r0, #0
 80117da:	d0d5      	beq.n	8011788 <__swbuf_r+0x20>
 80117dc:	f04f 37ff 	mov.w	r7, #4294967295
 80117e0:	e7f4      	b.n	80117cc <__swbuf_r+0x64>
	...

080117e4 <__swsetup_r>:
 80117e4:	b538      	push	{r3, r4, r5, lr}
 80117e6:	4b2a      	ldr	r3, [pc, #168]	; (8011890 <__swsetup_r+0xac>)
 80117e8:	4605      	mov	r5, r0
 80117ea:	6818      	ldr	r0, [r3, #0]
 80117ec:	460c      	mov	r4, r1
 80117ee:	b118      	cbz	r0, 80117f8 <__swsetup_r+0x14>
 80117f0:	6a03      	ldr	r3, [r0, #32]
 80117f2:	b90b      	cbnz	r3, 80117f8 <__swsetup_r+0x14>
 80117f4:	f7ff f938 	bl	8010a68 <__sinit>
 80117f8:	89a3      	ldrh	r3, [r4, #12]
 80117fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117fe:	0718      	lsls	r0, r3, #28
 8011800:	d422      	bmi.n	8011848 <__swsetup_r+0x64>
 8011802:	06d9      	lsls	r1, r3, #27
 8011804:	d407      	bmi.n	8011816 <__swsetup_r+0x32>
 8011806:	2309      	movs	r3, #9
 8011808:	602b      	str	r3, [r5, #0]
 801180a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801180e:	81a3      	strh	r3, [r4, #12]
 8011810:	f04f 30ff 	mov.w	r0, #4294967295
 8011814:	e034      	b.n	8011880 <__swsetup_r+0x9c>
 8011816:	0758      	lsls	r0, r3, #29
 8011818:	d512      	bpl.n	8011840 <__swsetup_r+0x5c>
 801181a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801181c:	b141      	cbz	r1, 8011830 <__swsetup_r+0x4c>
 801181e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011822:	4299      	cmp	r1, r3
 8011824:	d002      	beq.n	801182c <__swsetup_r+0x48>
 8011826:	4628      	mov	r0, r5
 8011828:	f7ff fa78 	bl	8010d1c <_free_r>
 801182c:	2300      	movs	r3, #0
 801182e:	6363      	str	r3, [r4, #52]	; 0x34
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011836:	81a3      	strh	r3, [r4, #12]
 8011838:	2300      	movs	r3, #0
 801183a:	6063      	str	r3, [r4, #4]
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	6023      	str	r3, [r4, #0]
 8011840:	89a3      	ldrh	r3, [r4, #12]
 8011842:	f043 0308 	orr.w	r3, r3, #8
 8011846:	81a3      	strh	r3, [r4, #12]
 8011848:	6923      	ldr	r3, [r4, #16]
 801184a:	b94b      	cbnz	r3, 8011860 <__swsetup_r+0x7c>
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011856:	d003      	beq.n	8011860 <__swsetup_r+0x7c>
 8011858:	4621      	mov	r1, r4
 801185a:	4628      	mov	r0, r5
 801185c:	f000 f8cd 	bl	80119fa <__smakebuf_r>
 8011860:	89a0      	ldrh	r0, [r4, #12]
 8011862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011866:	f010 0301 	ands.w	r3, r0, #1
 801186a:	d00a      	beq.n	8011882 <__swsetup_r+0x9e>
 801186c:	2300      	movs	r3, #0
 801186e:	60a3      	str	r3, [r4, #8]
 8011870:	6963      	ldr	r3, [r4, #20]
 8011872:	425b      	negs	r3, r3
 8011874:	61a3      	str	r3, [r4, #24]
 8011876:	6923      	ldr	r3, [r4, #16]
 8011878:	b943      	cbnz	r3, 801188c <__swsetup_r+0xa8>
 801187a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801187e:	d1c4      	bne.n	801180a <__swsetup_r+0x26>
 8011880:	bd38      	pop	{r3, r4, r5, pc}
 8011882:	0781      	lsls	r1, r0, #30
 8011884:	bf58      	it	pl
 8011886:	6963      	ldrpl	r3, [r4, #20]
 8011888:	60a3      	str	r3, [r4, #8]
 801188a:	e7f4      	b.n	8011876 <__swsetup_r+0x92>
 801188c:	2000      	movs	r0, #0
 801188e:	e7f7      	b.n	8011880 <__swsetup_r+0x9c>
 8011890:	20000088 	.word	0x20000088

08011894 <memmove>:
 8011894:	4288      	cmp	r0, r1
 8011896:	b510      	push	{r4, lr}
 8011898:	eb01 0402 	add.w	r4, r1, r2
 801189c:	d902      	bls.n	80118a4 <memmove+0x10>
 801189e:	4284      	cmp	r4, r0
 80118a0:	4623      	mov	r3, r4
 80118a2:	d807      	bhi.n	80118b4 <memmove+0x20>
 80118a4:	1e43      	subs	r3, r0, #1
 80118a6:	42a1      	cmp	r1, r4
 80118a8:	d008      	beq.n	80118bc <memmove+0x28>
 80118aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118b2:	e7f8      	b.n	80118a6 <memmove+0x12>
 80118b4:	4402      	add	r2, r0
 80118b6:	4601      	mov	r1, r0
 80118b8:	428a      	cmp	r2, r1
 80118ba:	d100      	bne.n	80118be <memmove+0x2a>
 80118bc:	bd10      	pop	{r4, pc}
 80118be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118c6:	e7f7      	b.n	80118b8 <memmove+0x24>

080118c8 <_raise_r>:
 80118c8:	291f      	cmp	r1, #31
 80118ca:	b538      	push	{r3, r4, r5, lr}
 80118cc:	4604      	mov	r4, r0
 80118ce:	460d      	mov	r5, r1
 80118d0:	d904      	bls.n	80118dc <_raise_r+0x14>
 80118d2:	2316      	movs	r3, #22
 80118d4:	6003      	str	r3, [r0, #0]
 80118d6:	f04f 30ff 	mov.w	r0, #4294967295
 80118da:	bd38      	pop	{r3, r4, r5, pc}
 80118dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80118de:	b112      	cbz	r2, 80118e6 <_raise_r+0x1e>
 80118e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118e4:	b94b      	cbnz	r3, 80118fa <_raise_r+0x32>
 80118e6:	4620      	mov	r0, r4
 80118e8:	f000 f830 	bl	801194c <_getpid_r>
 80118ec:	462a      	mov	r2, r5
 80118ee:	4601      	mov	r1, r0
 80118f0:	4620      	mov	r0, r4
 80118f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118f6:	f000 b817 	b.w	8011928 <_kill_r>
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d00a      	beq.n	8011914 <_raise_r+0x4c>
 80118fe:	1c59      	adds	r1, r3, #1
 8011900:	d103      	bne.n	801190a <_raise_r+0x42>
 8011902:	2316      	movs	r3, #22
 8011904:	6003      	str	r3, [r0, #0]
 8011906:	2001      	movs	r0, #1
 8011908:	e7e7      	b.n	80118da <_raise_r+0x12>
 801190a:	2400      	movs	r4, #0
 801190c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011910:	4628      	mov	r0, r5
 8011912:	4798      	blx	r3
 8011914:	2000      	movs	r0, #0
 8011916:	e7e0      	b.n	80118da <_raise_r+0x12>

08011918 <raise>:
 8011918:	4b02      	ldr	r3, [pc, #8]	; (8011924 <raise+0xc>)
 801191a:	4601      	mov	r1, r0
 801191c:	6818      	ldr	r0, [r3, #0]
 801191e:	f7ff bfd3 	b.w	80118c8 <_raise_r>
 8011922:	bf00      	nop
 8011924:	20000088 	.word	0x20000088

08011928 <_kill_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4d07      	ldr	r5, [pc, #28]	; (8011948 <_kill_r+0x20>)
 801192c:	2300      	movs	r3, #0
 801192e:	4604      	mov	r4, r0
 8011930:	4608      	mov	r0, r1
 8011932:	4611      	mov	r1, r2
 8011934:	602b      	str	r3, [r5, #0]
 8011936:	f7f6 fa43 	bl	8007dc0 <_kill>
 801193a:	1c43      	adds	r3, r0, #1
 801193c:	d102      	bne.n	8011944 <_kill_r+0x1c>
 801193e:	682b      	ldr	r3, [r5, #0]
 8011940:	b103      	cbz	r3, 8011944 <_kill_r+0x1c>
 8011942:	6023      	str	r3, [r4, #0]
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	bf00      	nop
 8011948:	20000ae4 	.word	0x20000ae4

0801194c <_getpid_r>:
 801194c:	f7f6 ba30 	b.w	8007db0 <_getpid>

08011950 <_realloc_r>:
 8011950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011954:	4680      	mov	r8, r0
 8011956:	4614      	mov	r4, r2
 8011958:	460e      	mov	r6, r1
 801195a:	b921      	cbnz	r1, 8011966 <_realloc_r+0x16>
 801195c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011960:	4611      	mov	r1, r2
 8011962:	f7fe bf69 	b.w	8010838 <_malloc_r>
 8011966:	b92a      	cbnz	r2, 8011974 <_realloc_r+0x24>
 8011968:	f7ff f9d8 	bl	8010d1c <_free_r>
 801196c:	4625      	mov	r5, r4
 801196e:	4628      	mov	r0, r5
 8011970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011974:	f000 f8a0 	bl	8011ab8 <_malloc_usable_size_r>
 8011978:	4284      	cmp	r4, r0
 801197a:	4607      	mov	r7, r0
 801197c:	d802      	bhi.n	8011984 <_realloc_r+0x34>
 801197e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011982:	d812      	bhi.n	80119aa <_realloc_r+0x5a>
 8011984:	4621      	mov	r1, r4
 8011986:	4640      	mov	r0, r8
 8011988:	f7fe ff56 	bl	8010838 <_malloc_r>
 801198c:	4605      	mov	r5, r0
 801198e:	2800      	cmp	r0, #0
 8011990:	d0ed      	beq.n	801196e <_realloc_r+0x1e>
 8011992:	42bc      	cmp	r4, r7
 8011994:	4622      	mov	r2, r4
 8011996:	4631      	mov	r1, r6
 8011998:	bf28      	it	cs
 801199a:	463a      	movcs	r2, r7
 801199c:	f7ff f9a9 	bl	8010cf2 <memcpy>
 80119a0:	4631      	mov	r1, r6
 80119a2:	4640      	mov	r0, r8
 80119a4:	f7ff f9ba 	bl	8010d1c <_free_r>
 80119a8:	e7e1      	b.n	801196e <_realloc_r+0x1e>
 80119aa:	4635      	mov	r5, r6
 80119ac:	e7df      	b.n	801196e <_realloc_r+0x1e>

080119ae <__swhatbuf_r>:
 80119ae:	b570      	push	{r4, r5, r6, lr}
 80119b0:	460c      	mov	r4, r1
 80119b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b6:	2900      	cmp	r1, #0
 80119b8:	b096      	sub	sp, #88	; 0x58
 80119ba:	4615      	mov	r5, r2
 80119bc:	461e      	mov	r6, r3
 80119be:	da0d      	bge.n	80119dc <__swhatbuf_r+0x2e>
 80119c0:	89a3      	ldrh	r3, [r4, #12]
 80119c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80119c6:	f04f 0100 	mov.w	r1, #0
 80119ca:	bf0c      	ite	eq
 80119cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80119d0:	2340      	movne	r3, #64	; 0x40
 80119d2:	2000      	movs	r0, #0
 80119d4:	6031      	str	r1, [r6, #0]
 80119d6:	602b      	str	r3, [r5, #0]
 80119d8:	b016      	add	sp, #88	; 0x58
 80119da:	bd70      	pop	{r4, r5, r6, pc}
 80119dc:	466a      	mov	r2, sp
 80119de:	f000 f849 	bl	8011a74 <_fstat_r>
 80119e2:	2800      	cmp	r0, #0
 80119e4:	dbec      	blt.n	80119c0 <__swhatbuf_r+0x12>
 80119e6:	9901      	ldr	r1, [sp, #4]
 80119e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80119ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80119f0:	4259      	negs	r1, r3
 80119f2:	4159      	adcs	r1, r3
 80119f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119f8:	e7eb      	b.n	80119d2 <__swhatbuf_r+0x24>

080119fa <__smakebuf_r>:
 80119fa:	898b      	ldrh	r3, [r1, #12]
 80119fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119fe:	079d      	lsls	r5, r3, #30
 8011a00:	4606      	mov	r6, r0
 8011a02:	460c      	mov	r4, r1
 8011a04:	d507      	bpl.n	8011a16 <__smakebuf_r+0x1c>
 8011a06:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a0a:	6023      	str	r3, [r4, #0]
 8011a0c:	6123      	str	r3, [r4, #16]
 8011a0e:	2301      	movs	r3, #1
 8011a10:	6163      	str	r3, [r4, #20]
 8011a12:	b002      	add	sp, #8
 8011a14:	bd70      	pop	{r4, r5, r6, pc}
 8011a16:	ab01      	add	r3, sp, #4
 8011a18:	466a      	mov	r2, sp
 8011a1a:	f7ff ffc8 	bl	80119ae <__swhatbuf_r>
 8011a1e:	9900      	ldr	r1, [sp, #0]
 8011a20:	4605      	mov	r5, r0
 8011a22:	4630      	mov	r0, r6
 8011a24:	f7fe ff08 	bl	8010838 <_malloc_r>
 8011a28:	b948      	cbnz	r0, 8011a3e <__smakebuf_r+0x44>
 8011a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a2e:	059a      	lsls	r2, r3, #22
 8011a30:	d4ef      	bmi.n	8011a12 <__smakebuf_r+0x18>
 8011a32:	f023 0303 	bic.w	r3, r3, #3
 8011a36:	f043 0302 	orr.w	r3, r3, #2
 8011a3a:	81a3      	strh	r3, [r4, #12]
 8011a3c:	e7e3      	b.n	8011a06 <__smakebuf_r+0xc>
 8011a3e:	89a3      	ldrh	r3, [r4, #12]
 8011a40:	6020      	str	r0, [r4, #0]
 8011a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a46:	81a3      	strh	r3, [r4, #12]
 8011a48:	9b00      	ldr	r3, [sp, #0]
 8011a4a:	6163      	str	r3, [r4, #20]
 8011a4c:	9b01      	ldr	r3, [sp, #4]
 8011a4e:	6120      	str	r0, [r4, #16]
 8011a50:	b15b      	cbz	r3, 8011a6a <__smakebuf_r+0x70>
 8011a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a56:	4630      	mov	r0, r6
 8011a58:	f000 f81e 	bl	8011a98 <_isatty_r>
 8011a5c:	b128      	cbz	r0, 8011a6a <__smakebuf_r+0x70>
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	f023 0303 	bic.w	r3, r3, #3
 8011a64:	f043 0301 	orr.w	r3, r3, #1
 8011a68:	81a3      	strh	r3, [r4, #12]
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	431d      	orrs	r5, r3
 8011a6e:	81a5      	strh	r5, [r4, #12]
 8011a70:	e7cf      	b.n	8011a12 <__smakebuf_r+0x18>
	...

08011a74 <_fstat_r>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	4d07      	ldr	r5, [pc, #28]	; (8011a94 <_fstat_r+0x20>)
 8011a78:	2300      	movs	r3, #0
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	4608      	mov	r0, r1
 8011a7e:	4611      	mov	r1, r2
 8011a80:	602b      	str	r3, [r5, #0]
 8011a82:	f7f6 f9fc 	bl	8007e7e <_fstat>
 8011a86:	1c43      	adds	r3, r0, #1
 8011a88:	d102      	bne.n	8011a90 <_fstat_r+0x1c>
 8011a8a:	682b      	ldr	r3, [r5, #0]
 8011a8c:	b103      	cbz	r3, 8011a90 <_fstat_r+0x1c>
 8011a8e:	6023      	str	r3, [r4, #0]
 8011a90:	bd38      	pop	{r3, r4, r5, pc}
 8011a92:	bf00      	nop
 8011a94:	20000ae4 	.word	0x20000ae4

08011a98 <_isatty_r>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	4d06      	ldr	r5, [pc, #24]	; (8011ab4 <_isatty_r+0x1c>)
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	4608      	mov	r0, r1
 8011aa2:	602b      	str	r3, [r5, #0]
 8011aa4:	f7f6 f9fb 	bl	8007e9e <_isatty>
 8011aa8:	1c43      	adds	r3, r0, #1
 8011aaa:	d102      	bne.n	8011ab2 <_isatty_r+0x1a>
 8011aac:	682b      	ldr	r3, [r5, #0]
 8011aae:	b103      	cbz	r3, 8011ab2 <_isatty_r+0x1a>
 8011ab0:	6023      	str	r3, [r4, #0]
 8011ab2:	bd38      	pop	{r3, r4, r5, pc}
 8011ab4:	20000ae4 	.word	0x20000ae4

08011ab8 <_malloc_usable_size_r>:
 8011ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011abc:	1f18      	subs	r0, r3, #4
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	bfbc      	itt	lt
 8011ac2:	580b      	ldrlt	r3, [r1, r0]
 8011ac4:	18c0      	addlt	r0, r0, r3
 8011ac6:	4770      	bx	lr

08011ac8 <_init>:
 8011ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aca:	bf00      	nop
 8011acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ace:	bc08      	pop	{r3}
 8011ad0:	469e      	mov	lr, r3
 8011ad2:	4770      	bx	lr

08011ad4 <_fini>:
 8011ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad6:	bf00      	nop
 8011ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ada:	bc08      	pop	{r3}
 8011adc:	469e      	mov	lr, r3
 8011ade:	4770      	bx	lr
